+---------------------------------------------------------------------+
|  Log file: mau.tp.log                                               |
|  Compiler version: 5.8.0 (7069cde)                                  |
|  Created on: Sun Nov 17 06:21:48 2019                               |
|  Run ID: 5264f50f8fd548e5                                           |
+---------------------------------------------------------------------+

Table ingress_port_mapping is candidate to be implemented in phase 0 resources.
Table ingress_port_mapping is candidate to be implemented in phase 0 resources.
----- Stage 0 ------
   __egress_pkt_length_update__
   _condition_49
   _condition_50
   _condition_51
   rid
   _condition_52
----- Stage 1 ------
   mirror
   _condition_53
   mcast_egress_ifindex
   _condition_54
   replica_type
----- Stage 2 ------
   egress_port_mapping
   _condition_56
   vlan_decap
   _condition_57
----- Stage 3 ------
   _condition_58
   tunnel_decap_process_outer
   tunnel_decap_process_inner
   _condition_59
   rewrite
----- Stage 4 ------
   _condition_61
   egress_bd_map
   _condition_62
   l3_rewrite
----- Stage 5 ------
   smac_rewrite
   egress_bd_stats
   _condition_64
   _condition_65
   egress_vni
   tunnel_encap_process_inner
----- Stage 6 ------
   tunnel_encap_process_outer
   egress_outer_bd_map
----- Stage 7 ------
   tunnel_rewrite
   tunnel_dst_rewrite
   tunnel_smac_rewrite
   tunnel_dmac_rewrite
   mtu
   _condition_66
   egress_vlan_xlate
   capture_tstamp
----- Stage 8 ------
   _condition_67
   egress_system_acl
----- Stage 0 ------
   _condition_0
   ingress_port_mapping
   ingress_port_properties
   switch_config_params
   validate_outer_ethernet
   _condition_1
   _condition_2
   validate_outer_ipv4_packet
   validate_outer_ipv6_packet
   _condition_3
   validate_mpls_packet
   _condition_4
   port_vlan_to_bd_mapping
   cpu_packet_transform
   port_vlan_to_ifindex_mapping
----- Stage 1 ------
   _condition_5
   spanning_tree
   _condition_6
   fabric_ingress_dst_lkp
   _condition_7
   outer_rmac
   _condition_8
   _condition_9
   ipv4_src_vtep
   ipv6_src_vtep
   ipv4_dest_vtep
   ipv6_dest_vtep
----- Stage 2 ------
   _condition_10
   adjust_lkp_fields
   tunnel_check
   tunnel
   tunnel_lookup_miss
   _condition_11
   storm_control
----- Stage 3 ------
   _condition_12
   _condition_13
   validate_packet
   ingress_l4_src_port
   ingress_l4_dst_port
   _condition_14
   smac
   _condition_15
   dmac
   _condition_16
   _condition_18
   _condition_17
   mac_acl
----- Stage 4 ------
   _condition_19
   _condition_20
   ip_acl
   ipv6_acl
   _condition_21
   _condition_28
   rmac
   _condition_31
   _condition_29
   _condition_22
   _condition_32
   ipv4_multicast_bridge
   ipv6_multicast_bridge
   ipv4_multicast_bridge_star_g
   ipv6_multicast_bridge_star_g
----- Stage 5 ------
   _condition_23
   _condition_25
   ipv4_racl
   _condition_30
   ipv6_racl
   _condition_24
   _condition_33
   ipv4_multicast_route
   _condition_26
   ipv4_urpf
   ipv6_multicast_route
   ipv4_multicast_route_star_g
   ipv6_urpf
   ipv4_urpf_lpm
   ipv6_multicast_route_star_g
   ipv6_urpf_lpm
   ipv4_fib
   ipv6_fib
   ipv4_fib_lpm
   ipv6_fib_lpm
----- Stage 6 ------
   _condition_27
   urpf_bd
   _condition_34
   _condition_35
   compute_ipv4_hashes
   compute_non_ip_hashes
   compute_ipv6_hashes
----- Stage 7 ------
   compute_other_hashes
   ingress_bd_stats
   acl_stats
   storm_control_stats
   _condition_36
   fwd_result
----- Stage 8 ------
   _condition_39
   nexthop
   ecmp_group
----- Stage 9 ------
   _condition_41
   _condition_42
   bd_flood
   lag_group
   tunnel_to_mgid_mapping
   _condition_43
   learn_notify
   racl_stats
   _condition_44
   _condition_45
   system_acl
   _condition_46
   drop_stats
----- Stage 0 ------
   _condition_0
   ingress_port_mapping
   ingress_port_properties
   switch_config_params
   validate_outer_ethernet
   _condition_1
   _condition_2
   validate_outer_ipv4_packet
   validate_outer_ipv6_packet
   _condition_3
   validate_mpls_packet
   _condition_4
   port_vlan_to_bd_mapping
   cpu_packet_transform
   port_vlan_to_ifindex_mapping
----- Stage 1 ------
   _condition_5
   spanning_tree
   _condition_6
   fabric_ingress_dst_lkp
   _condition_7
   outer_rmac
   _condition_8
   _condition_9
   ipv4_src_vtep
   ipv6_src_vtep
   ipv4_dest_vtep
   ipv6_dest_vtep
----- Stage 2 ------
   _condition_10
   adjust_lkp_fields
   tunnel_check
   tunnel
   tunnel_lookup_miss
   _condition_11
   storm_control
----- Stage 3 ------
   _condition_12
   _condition_13
   validate_packet
   ingress_l4_src_port
   ingress_l4_dst_port
   _condition_14
   smac
   _condition_15
   dmac
   _condition_16
   _condition_18
   _condition_17
   mac_acl
----- Stage 4 ------
   _condition_19
   _condition_20
   ip_acl
   ipv6_acl
   _condition_21
   _condition_28
   rmac
   _condition_31
   _condition_29
   _condition_22
   _condition_32
   ipv4_multicast_bridge
   ipv6_multicast_bridge
   ipv4_multicast_bridge_star_g
   ipv6_multicast_bridge_star_g
----- Stage 5 ------
   _condition_23
   _condition_25
   ipv4_racl
   _condition_30
   ipv6_racl
   _condition_24
   _condition_33
   ipv4_multicast_route
   _condition_26
   ipv4_urpf
   ipv6_multicast_route
   ipv4_multicast_route_star_g
   ipv6_urpf
   ipv4_urpf_lpm
   ipv6_multicast_route_star_g
   ipv6_urpf_lpm
   ipv4_fib
   ipv6_fib
   ipv4_fib_lpm
   ipv6_fib_lpm
----- Stage 6 ------
   _condition_27
   urpf_bd
   _condition_34
   _condition_35
   compute_ipv4_hashes
   compute_non_ip_hashes
   compute_ipv6_hashes
----- Stage 7 ------
   compute_other_hashes
   ingress_bd_stats
   acl_stats
   storm_control_stats
   _condition_36
   fwd_result
----- Stage 8 ------
   _condition_39
   nexthop
   ecmp_group
----- Stage 9 ------
   _condition_41
   _condition_42
   bd_flood
   lag_group
   tunnel_to_mgid_mapping
   _condition_43
   learn_notify
   racl_stats
   _condition_44
   _condition_45
   system_acl
   _condition_46
   drop_stats
----- Stage 0 ------
   _condition_0
   ingress_port_mapping
   ingress_port_properties
   switch_config_params
   validate_outer_ethernet
   _condition_1
   _condition_2
   validate_outer_ipv4_packet
   validate_outer_ipv6_packet
   _condition_3
   validate_mpls_packet
   _condition_4
   port_vlan_to_bd_mapping
   cpu_packet_transform
   port_vlan_to_ifindex_mapping
----- Stage 1 ------
   _condition_5
   spanning_tree
   _condition_6
   fabric_ingress_dst_lkp
   _condition_7
   outer_rmac
   _condition_8
   _condition_9
   ipv4_src_vtep
   ipv6_src_vtep
   ipv4_dest_vtep
   ipv6_dest_vtep
----- Stage 2 ------
   _condition_10
   adjust_lkp_fields
   tunnel_check
   tunnel
   tunnel_lookup_miss
   _condition_11
   storm_control
----- Stage 3 ------
   _condition_12
   _condition_13
   validate_packet
   ingress_l4_src_port
   ingress_l4_dst_port
   _condition_14
   smac
   _condition_15
   dmac
   _condition_16
   _condition_18
   _condition_17
   mac_acl
----- Stage 4 ------
   _condition_19
   _condition_20
   ip_acl
   ipv6_acl
   _condition_21
   _condition_28
   rmac
   _condition_31
   _condition_29
   _condition_22
   _condition_32
   ipv4_multicast_bridge
   ipv6_multicast_bridge
   ipv4_multicast_bridge_star_g
   ipv6_multicast_bridge_star_g
----- Stage 5 ------
   _condition_23
   _condition_25
   ipv4_racl
   _condition_30
   ipv6_racl
   _condition_24
   _condition_33
   ipv4_multicast_route
   _condition_26
   ipv4_urpf
   ipv6_multicast_route
   ipv4_multicast_route_star_g
   ipv6_urpf
   ipv4_urpf_lpm
   ipv6_multicast_route_star_g
   ipv6_urpf_lpm
   ipv4_fib
   ipv6_fib
   ipv4_fib_lpm
   ipv6_fib_lpm
----- Stage 6 ------
   _condition_27
   urpf_bd
   _condition_34
   _condition_35
   compute_ipv4_hashes
   compute_non_ip_hashes
   compute_ipv6_hashes
----- Stage 7 ------
   compute_other_hashes
   ingress_bd_stats
   acl_stats
   storm_control_stats
   _condition_36
   fwd_result
----- Stage 8 ------
   _condition_39
   nexthop
   ecmp_group
----- Stage 9 ------
   _condition_41
   _condition_42
   bd_flood
   lag_group
   tunnel_to_mgid_mapping
   _condition_43
   learn_notify
   racl_stats
   _condition_44
   _condition_45
   system_acl
   _condition_46
   drop_stats
----- Stage 0 ------
   __egress_pkt_length_update__
   _condition_49
   _condition_50
   _condition_51
   rid
   _condition_52
----- Stage 1 ------
   mirror
   _condition_53
   mcast_egress_ifindex
   _condition_54
   replica_type
----- Stage 2 ------
   egress_port_mapping
   _condition_56
   vlan_decap
   _condition_57
----- Stage 3 ------
   _condition_58
   tunnel_decap_process_outer
   tunnel_decap_process_inner
   _condition_59
   rewrite
----- Stage 4 ------
   _condition_61
   egress_bd_map
   _condition_62
   l3_rewrite
----- Stage 5 ------
   smac_rewrite
   egress_bd_stats
   _condition_64
   _condition_65
   egress_vni
   tunnel_encap_process_inner
----- Stage 6 ------
   tunnel_encap_process_outer
   egress_outer_bd_map
----- Stage 7 ------
   tunnel_rewrite
   tunnel_dst_rewrite
   tunnel_smac_rewrite
   tunnel_dmac_rewrite
   mtu
   _condition_66
   egress_vlan_xlate
   capture_tstamp
----- Stage 8 ------
   _condition_67
   egress_system_acl
----- Stage 0 ------
   __egress_pkt_length_update__
   _condition_49
   _condition_50
   _condition_51
   rid
   _condition_52
----- Stage 1 ------
   mirror
   _condition_53
   mcast_egress_ifindex
   _condition_54
   replica_type
----- Stage 2 ------
   egress_port_mapping
   _condition_56
   vlan_decap
   _condition_57
----- Stage 3 ------
   _condition_58
   tunnel_decap_process_outer
   tunnel_decap_process_inner
   _condition_59
   rewrite
----- Stage 4 ------
   _condition_61
   egress_bd_map
   _condition_62
   l3_rewrite
----- Stage 5 ------
   smac_rewrite
   egress_bd_stats
   _condition_64
   _condition_65
   egress_vni
   tunnel_encap_process_inner
----- Stage 6 ------
   tunnel_encap_process_outer
   egress_outer_bd_map
----- Stage 7 ------
   tunnel_rewrite
   tunnel_dst_rewrite
   tunnel_smac_rewrite
   tunnel_dmac_rewrite
   mtu
   _condition_66
   egress_vlan_xlate
   capture_tstamp
----- Stage 8 ------
   _condition_67
   egress_system_acl
------------------------------------------
 Running Table Placement 4
------------------------------------------
Cannot use hash action for table switch_config_params.
Cannot use hash-action for table switch_config_params because it has no side-effect table
Cannot use hash action for table validate_outer_ethernet.
Cannot use hash-action for table validate_outer_ethernet because it requires a ternary-style match for field ethernet.srcAddr.
Cannot use hash action for table ingress_port_mapping.
Cannot use hash-action for table ingress_port_mapping because its key bit width does not match the requested entries
Cannot use hash action for table ingress_port_properties.
Cannot use hash-action for table ingress_port_properties because its key bit width does not match the requested entries
Cannot use hash action for table port_vlan_to_bd_mapping.
Cannot use hash-action for table port_vlan_to_bd_mapping because it does not directly reference side-effect table port_vlan_to_bd_mapping__action__
Cannot use hash action for table port_vlan_to_ifindex_mapping.
Cannot use hash-action for table port_vlan_to_ifindex_mapping because it requires overhead
Cannot use hash action for table cpu_packet_transform.
Cannot use hash-action for table cpu_packet_transform because it does not directly reference side-effect table port_vlan_to_bd_mapping__action__
Can use hash action for table ingress_bd_stats???  True
Decided that match table ingress_bd_stats is more efficiently allocated using hash-action to ingress_bd_stats.
Cannot use hash action for table lag_group.
Cannot use hash-action for table lag_group because it has more than one side-effect table
Cannot use hash action for table egress_port_mapping.
Cannot use hash-action for table egress_port_mapping because it requires overhead
Cannot use hash action for table egress_vlan_xlate.
Cannot use hash-action for table egress_vlan_xlate because it requires overhead
Cannot use hash action for table capture_tstamp.
Table capture_tstamp has no side effect tables.
Cannot use hash action for table spanning_tree.
Cannot use hash-action for table spanning_tree because its key bit width is too large.  Index requires 16777216 entries, but a maximum of 1048576 are supported.
Cannot use hash action for table smac.
Cannot use hash-action for table smac because it requires overhead
Cannot use hash action for table dmac.
Cannot use hash-action for table dmac because it requires overhead
Cannot use hash action for table learn_notify.
Table learn_notify has no side effect tables.
Cannot use hash action for table validate_packet.
Cannot use hash-action for table validate_packet because it requires a ternary-style match for field l2_metadata.lkp_mac_sa.
Cannot use hash action for table egress_bd_stats.
Cannot use hash-action for table egress_bd_stats because its key bit width is too large.  Index requires 131072 entries, but a maximum of 32768 are supported.
Cannot use hash action for table egress_bd_map.
Cannot use hash-action for table egress_bd_map because it requires overhead
Cannot use hash action for table egress_outer_bd_map.
Cannot use hash-action for table egress_outer_bd_map because it requires overhead
Cannot use hash action for table vlan_decap.
Table vlan_decap has no side effect tables.
Cannot use hash action for table rmac.
Table rmac has no side effect tables.
Cannot use hash action for table urpf_bd.
Table urpf_bd has no side effect tables.
Cannot use hash action for table smac_rewrite.
Cannot use hash-action for table smac_rewrite because it did not specify a default action.
Cannot use hash action for table l3_rewrite.
Table l3_rewrite has no side effect tables.
Cannot use hash action for table mtu.
Cannot use hash-action for table mtu, because user indicated to implement this as a ternary table.
Cannot use hash action for table validate_outer_ipv4_packet.
Cannot use hash-action for table validate_outer_ipv4_packet because it requires a ternary-style match for field ig_intr_md_from_parser_aux.ingress_parser_err.
Cannot use hash action for table ipv4_fib.
Cannot use hash-action for table ipv4_fib because it requires overhead
Cannot use hash action for table ipv4_fib_lpm.
Cannot use hash-action for table ipv4_fib_lpm because it requires a ternary-style match for field ipv4_metadata.lkp_ipv4_da.
Cannot use hash action for table ipv4_urpf_lpm.
Cannot use hash-action for table ipv4_urpf_lpm because it requires a ternary-style match for field ipv4_metadata.lkp_ipv4_sa.
Cannot use hash action for table ipv4_urpf.
Cannot use hash-action for table ipv4_urpf because it requires overhead
Cannot use hash action for table validate_outer_ipv6_packet.
Cannot use hash-action for table validate_outer_ipv6_packet because it requires a ternary-style match for field ipv6.version.
Cannot use hash action for table ipv6_fib_lpm.
Cannot use hash-action for table ipv6_fib_lpm because it requires a ternary-style match for field ipv6_metadata.lkp_ipv6_da.
Cannot use hash action for table ipv6_fib.
Cannot use hash-action for table ipv6_fib because it requires overhead
Cannot use hash action for table ipv6_urpf_lpm.
Cannot use hash-action for table ipv6_urpf_lpm because it requires a ternary-style match for field ipv6_metadata.lkp_ipv6_sa.
Cannot use hash action for table ipv6_urpf.
Cannot use hash-action for table ipv6_urpf because it requires overhead
Cannot use hash action for table outer_rmac.
Table outer_rmac has no side effect tables.
Cannot use hash action for table ipv4_dest_vtep.
Cannot use hash-action for table ipv4_dest_vtep because it requires overhead
Cannot use hash action for table ipv4_src_vtep.
Cannot use hash-action for table ipv4_src_vtep because it requires overhead
Cannot use hash action for table ipv6_dest_vtep.
Cannot use hash-action for table ipv6_dest_vtep because it requires overhead
Cannot use hash action for table ipv6_src_vtep.
Cannot use hash-action for table ipv6_src_vtep because it requires overhead
Cannot use hash action for table tunnel.
Cannot use hash-action for table tunnel because it requires overhead
Cannot use hash action for table adjust_lkp_fields.
Table adjust_lkp_fields has no side effect tables.
Cannot use hash action for table tunnel_lookup_miss.
Table tunnel_lookup_miss has no side effect tables.
Cannot use hash action for table tunnel_check.
Table tunnel_check has no side effect tables.
User requested to not attempt to place action data parameters in the match overhead.
Cannot use hash action for table validate_mpls_packet.
Table validate_mpls_packet has no side effect tables.
Cannot use hash action for table tunnel_decap_process_outer.
Table tunnel_decap_process_outer has no side effect tables.
Cannot use hash action for table tunnel_decap_process_inner.
Table tunnel_decap_process_inner has no side effect tables.
Cannot use hash action for table egress_vni.
Cannot use hash-action for table egress_vni because its key bit width does not match the requested entries
Cannot use hash action for table tunnel_encap_process_inner.
Table tunnel_encap_process_inner has no side effect tables.
Cannot use hash action for table tunnel_encap_process_outer.
Table tunnel_encap_process_outer has no side effect tables.
Cannot use hash action for table tunnel_rewrite.
Cannot use hash-action for table tunnel_rewrite because it requires overhead
Cannot use hash action for table tunnel_dst_rewrite.
Cannot use hash-action for table tunnel_dst_rewrite because it requires overhead
Cannot use hash action for table tunnel_smac_rewrite.
Cannot use hash-action for table tunnel_smac_rewrite because it requires overhead
Cannot use hash action for table tunnel_dmac_rewrite.
Cannot use hash-action for table tunnel_dmac_rewrite because it requires overhead
Cannot use hash action for table tunnel_to_mgid_mapping.
Cannot use hash-action for table tunnel_to_mgid_mapping because it requires overhead
Cannot use hash action for table ingress_l4_src_port.
Cannot use hash-action for table ingress_l4_src_port because it requires a ternary-style match for field l3_metadata.lkp_l4_sport.
Cannot use hash action for table ingress_l4_dst_port.
Cannot use hash-action for table ingress_l4_dst_port because it requires a ternary-style match for field l3_metadata.lkp_l4_dport.
Cannot use hash action for table mac_acl.
Cannot use hash-action for table mac_acl because it requires a ternary-style match for field acl_metadata.port_lag_label.
Cannot use hash action for table ip_acl.
Cannot use hash-action for table ip_acl because it requires a ternary-style match for field acl_metadata.port_lag_label.
Cannot use hash action for table ipv6_acl.
Cannot use hash-action for table ipv6_acl because it requires a ternary-style match for field acl_metadata.port_lag_label.
Cannot use hash action for table ipv4_racl.
Cannot use hash-action for table ipv4_racl because it requires a ternary-style match for field acl_metadata.port_lag_label.
Cannot use hash action for table ipv6_racl.
Cannot use hash-action for table ipv6_racl because it requires a ternary-style match for field acl_metadata.port_lag_label.
Can use hash action for table acl_stats???  True
Decided that match table acl_stats is more efficiently allocated using hash-action to acl_stats.
Can use hash action for table racl_stats???  True
Decided that match table racl_stats is more efficiently allocated using hash-action to racl_stats.
Cannot use hash action for table system_acl.
Cannot use hash-action for table system_acl because it requires a ternary-style match for field acl_metadata.port_lag_label.
Can use hash action for table drop_stats???  True
Decided that match table drop_stats is more efficiently allocated using hash-action to drop_stats_2.
Cannot use hash action for table egress_system_acl.
Cannot use hash-action for table egress_system_acl because it requires a ternary-style match for field fabric_metadata.reason_code.
Cannot use hash action for table ipv4_multicast_bridge_star_g.
Cannot use hash-action for table ipv4_multicast_bridge_star_g because it requires overhead
Cannot use hash action for table ipv4_multicast_bridge.
Cannot use hash-action for table ipv4_multicast_bridge because it requires overhead
Cannot use hash action for table ipv4_multicast_route_star_g.
Cannot use hash-action for table ipv4_multicast_route_star_g because it has more than one side-effect table
Cannot use hash action for table ipv4_multicast_route.
Cannot use hash-action for table ipv4_multicast_route because it has more than one side-effect table
Cannot use hash action for table ipv6_multicast_bridge_star_g.
Cannot use hash-action for table ipv6_multicast_bridge_star_g because it requires overhead
Cannot use hash action for table ipv6_multicast_bridge.
Cannot use hash-action for table ipv6_multicast_bridge because it requires overhead
Cannot use hash action for table ipv6_multicast_route_star_g.
Cannot use hash-action for table ipv6_multicast_route_star_g because it has more than one side-effect table
Cannot use hash action for table ipv6_multicast_route.
Cannot use hash-action for table ipv6_multicast_route because it has more than one side-effect table
Cannot use hash action for table bd_flood.
Cannot use hash-action for table bd_flood because it requires overhead
Cannot use hash action for table rid.
Cannot use hash-action for table rid because it requires overhead
Cannot use hash action for table mcast_egress_ifindex.
Cannot use hash-action for table mcast_egress_ifindex because its key bit width does not match the requested entries
Cannot use hash action for table replica_type.
Table replica_type has no side effect tables.
Cannot use hash action for table fwd_result.
Cannot use hash-action for table fwd_result because it requires a ternary-style match for field l2_metadata.l2_redirect.
Cannot use hash action for table ecmp_group.
Cannot use hash-action for table ecmp_group because it has more than one side-effect table
Cannot use hash action for table nexthop.
Cannot use hash-action for table nexthop because it requires overhead
Cannot use hash action for table rewrite.
Cannot use hash-action for table rewrite because it requires overhead
Cannot use hash action for table storm_control_stats.
Cannot use hash-action for table storm_control_stats because it requires a ternary-style match for field l2_metadata.lkp_pkt_type.
Cannot use hash action for table storm_control.
Cannot use hash-action for table storm_control because it requires a ternary-style match for field l2_metadata.lkp_pkt_type.
Cannot use hash action for table fabric_ingress_dst_lkp.
Table fabric_ingress_dst_lkp has no side effect tables.
Cannot use hash action for table mirror.
Cannot use hash-action for table mirror because it requires overhead
Cannot use hash action for table compute_ipv4_hashes.
Table compute_ipv4_hashes has no side effect tables.
Cannot use hash action for table compute_ipv6_hashes.
Table compute_ipv6_hashes has no side effect tables.
Cannot use hash action for table compute_non_ip_hashes.
Table compute_non_ip_hashes has no side effect tables.
Cannot use hash action for table compute_other_hashes.
Table compute_other_hashes has no side effect tables.
Cannot use hash action for table __egress_pkt_length_update__.
Cannot use hash-action for table __egress_pkt_length_update__ because its key bit width does not match the requested entries
------------------------------------------
 Table Groups
------------------------------------------
Table Grouping (ingress) with match table switch_config_params (1) [switch_config_params__action__ (1)]
Table Grouping (ingress) with match table validate_outer_ethernet (512) [validate_outer_ethernet__action__ (512)]
Table Grouping (ingress) with match table ingress_port_mapping (288) [ingress_port_mapping__action__ (288)]
Table Grouping (ingress) with match table ingress_port_properties (290) [ingress_port_properties__action__ (290)]
Table Grouping (ingress) with match table port_vlan_to_bd_mapping (4096) [port_vlan_to_bd_mapping__action__ (1024)]
Table Grouping (ingress) with match table port_vlan_to_ifindex_mapping (4096) [port_vlan_to_ifindex_mapping__action__ (4096)]
Table Grouping (ingress) with match table cpu_packet_transform (1024) [port_vlan_to_bd_mapping__action__ (1024)]
Table Grouping (ingress) with match table ingress_bd_stats (1024) [ingress_bd_stats__action__ (1024), ingress_bd_stats (1024)]
Table Grouping (ingress) with match table lag_group (1024) [lag_group__action__ (1024), lag_group__select__ (2)]
Table Grouping (egress) with match table egress_port_mapping (290) [egress_port_mapping__action__ (290)]
Table Grouping (egress) with match table egress_vlan_xlate (1024) [egress_vlan_xlate__action__ (1024)]
Table Grouping (egress) with match table capture_tstamp (1) [capture_tstamp__action__ (1)]
Table Grouping (ingress) with match table spanning_tree (1024) [spanning_tree__action__ (1024)]
Table Grouping (ingress) with match table smac (1024) [smac__action__ (1024)]
Table Grouping (ingress) with match table dmac (1024) [dmac__action__ (1024)]
Table Grouping (ingress) with match table learn_notify (512) [learn_notify__action__ (512)]
Table Grouping (ingress) with match table validate_packet (512) [validate_packet__action__ (512)]
Table Grouping (egress) with match table egress_bd_stats (1024) [egress_bd_stats__action__ (1024), egress_bd_stats (1024)]
Table Grouping (egress) with match table egress_bd_map (1024) [egress_bd_map__action__ (1024)]
Table Grouping (egress) with match table egress_outer_bd_map (1024) [egress_outer_bd_map__action__ (1024)]
Table Grouping (egress) with match table vlan_decap (3) [vlan_decap__action__ (3)]
Table Grouping (ingress) with match table rmac (512) [rmac__action__ (512)]
Table Grouping (ingress) with match table urpf_bd (512) [urpf_bd__action__ (512)]
Table Grouping (egress) with match table smac_rewrite (512) [smac_rewrite__action__ (512)]
Table Grouping (egress) with match table l3_rewrite (512) [l3_rewrite__action__ (512)]
Table Grouping (egress) with match table mtu (512) [mtu__action__ (512)]
Table Grouping (ingress) with match table validate_outer_ipv4_packet (512) [validate_outer_ipv4_packet__action__ (512)]
Table Grouping (ingress) with match table ipv4_fib (1024) [ipv4_fib__action__ (1024)]
Table Grouping (ingress) with match table ipv4_fib_lpm (512) [ipv4_fib_lpm__action__ (512)]
Table Grouping (ingress) with match table ipv4_urpf_lpm (512) [ipv4_urpf_lpm__action__ (512)]
Table Grouping (ingress) with match table ipv4_urpf (1024) [ipv4_urpf__action__ (1024)]
Table Grouping (ingress) with match table validate_outer_ipv6_packet (512) [validate_outer_ipv6_packet__action__ (512)]
Table Grouping (ingress) with match table ipv6_fib_lpm (512) [ipv6_fib_lpm__action__ (512)]
Table Grouping (ingress) with match table ipv6_fib (1024) [ipv6_fib__action__ (1024)]
Table Grouping (ingress) with match table ipv6_urpf_lpm (512) [ipv6_urpf_lpm__action__ (512)]
Table Grouping (ingress) with match table ipv6_urpf (1024) [ipv6_urpf__action__ (1024)]
Table Grouping (ingress) with match table outer_rmac (512) [outer_rmac__action__ (512)]
Table Grouping (ingress) with match table ipv4_dest_vtep (512) [ipv4_dest_vtep__action__ (512)]
Table Grouping (ingress) with match table ipv4_src_vtep (1024) [ipv4_src_vtep__action__ (1024)]
Table Grouping (ingress) with match table ipv6_dest_vtep (512) [ipv6_dest_vtep__action__ (512)]
Table Grouping (ingress) with match table ipv6_src_vtep (1024) [ipv6_src_vtep__action__ (1024)]
Table Grouping (ingress) with match table tunnel (1024) [tunnel__action__ (1024)]
Table Grouping (ingress) with match table adjust_lkp_fields (5) [adjust_lkp_fields__action__ (5)]
Table Grouping (ingress) with match table tunnel_lookup_miss (5) [tunnel_lookup_miss__action__ (5)]
Table Grouping (ingress) with match table tunnel_check (512) [tunnel_check__action__ (512)]
Table Grouping (ingress) with match table validate_mpls_packet (3) [validate_mpls_packet__action__ (3)]
Table Grouping (egress) with match table tunnel_decap_process_outer (129) [tunnel_decap_process_outer__action__ (129)]
Table Grouping (egress) with match table tunnel_decap_process_inner (9) [tunnel_decap_process_inner__action__ (9)]
Table Grouping (egress) with match table egress_vni (1024) [egress_vni__action__ (1024)]
Table Grouping (egress) with match table tunnel_encap_process_inner (33) [tunnel_encap_process_inner__action__ (33)]
Table Grouping (egress) with match table tunnel_encap_process_outer (512) [tunnel_encap_process_outer__action__ (512)]
Table Grouping (egress) with match table tunnel_rewrite (1024) [tunnel_rewrite__action__ (1024)]
Table Grouping (egress) with match table tunnel_dst_rewrite (1024) [tunnel_dst_rewrite__action__ (1024)]
Table Grouping (egress) with match table tunnel_smac_rewrite (257) [tunnel_smac_rewrite__action__ (257)]
Table Grouping (egress) with match table tunnel_dmac_rewrite (1024) [tunnel_dmac_rewrite__action__ (1024)]
Table Grouping (ingress) with match table tunnel_to_mgid_mapping (1024) [tunnel_to_mgid_mapping__action__ (1024)]
Table Grouping (ingress) with match table ingress_l4_src_port (512) [ingress_l4_src_port__action__ (512)]
Table Grouping (ingress) with match table ingress_l4_dst_port (512) [ingress_l4_dst_port__action__ (512)]
Table Grouping (ingress) with match table mac_acl (512) [mac_acl__action__ (512)]
Table Grouping (ingress) with match table ip_acl (512) [ip_acl__action__ (512)]
Table Grouping (ingress) with match table ipv6_acl (512) [ipv6_acl__action__ (512)]
Table Grouping (ingress) with match table ipv4_racl (512) [ipv4_racl__action__ (512)]
Table Grouping (ingress) with match table ipv6_racl (512) [ipv6_racl__action__ (512)]
Table Grouping (ingress) with match table acl_stats (1024) [acl_stats__action__ (1024), acl_stats (1024)]
Table Grouping (ingress) with match table racl_stats (1024) [racl_stats__action__ (1024), racl_stats (1024)]
Table Grouping (ingress) with match table system_acl (512) [system_acl__action__ (512), drop_stats (1024), copp (512)]
Table Grouping (ingress) with match table drop_stats (1024) [drop_stats__action__ (1024), drop_stats_2 (1024)]
Table Grouping (egress) with match table egress_system_acl (512) [egress_system_acl__action__ (512)]
Table Grouping (ingress) with match table ipv4_multicast_bridge_star_g (512) [ipv4_multicast_bridge_star_g__action__ (512)]
Table Grouping (ingress) with match table ipv4_multicast_bridge (512) [ipv4_multicast_bridge__action__ (512)]
Table Grouping (ingress) with match table ipv4_multicast_route_star_g (512) [ipv4_multicast_route_star_g__action__ (512), ipv4_multicast_route_star_g_stats (512)]
Table Grouping (ingress) with match table ipv4_multicast_route (512) [ipv4_multicast_route__action__ (512), ipv4_multicast_route_s_g_stats (512)]
Table Grouping (ingress) with match table ipv6_multicast_bridge_star_g (512) [ipv6_multicast_bridge_star_g__action__ (512)]
Table Grouping (ingress) with match table ipv6_multicast_bridge (512) [ipv6_multicast_bridge__action__ (512)]
Table Grouping (ingress) with match table ipv6_multicast_route_star_g (512) [ipv6_multicast_route_star_g__action__ (512), ipv6_multicast_route_star_g_stats (512)]
Table Grouping (ingress) with match table ipv6_multicast_route (512) [ipv6_multicast_route__action__ (512), ipv6_multicast_route_s_g_stats (512)]
Table Grouping (ingress) with match table bd_flood (1024) [bd_flood__action__ (1024)]
Table Grouping (egress) with match table rid (1024) [rid__action__ (1024)]
Table Grouping (egress) with match table mcast_egress_ifindex (1024) [mcast_egress_ifindex__action__ (1024)]
Table Grouping (egress) with match table replica_type (512) [replica_type__action__ (512)]
Table Grouping (ingress) with match table fwd_result (512) [fwd_result__action__ (512)]
Table Grouping (ingress) with match table ecmp_group (1024) [ecmp_group__action__ (1024), ecmp_group__select__ (2)]
Table Grouping (ingress) with match table nexthop (1024) [nexthop__action__ (1024)]
Table Grouping (egress) with match table rewrite (1024) [rewrite__action__ (1024)]
Table Grouping (ingress) with match table storm_control_stats (1024) [storm_control_stats__action__ (1024), storm_control_stats (1024)]
Table Grouping (ingress) with match table storm_control (512) [storm_control__action__ (512), storm_control_meter (512)]
Table Grouping (ingress) with match table fabric_ingress_dst_lkp (257) [fabric_ingress_dst_lkp__action__ (257)]
Table Grouping (egress) with match table mirror (1024) [mirror__action__ (1024)]
Table Grouping (ingress) with match table compute_ipv4_hashes (3) [compute_ipv4_hashes__action__ (3)]
Table Grouping (ingress) with match table compute_ipv6_hashes (3) [compute_ipv6_hashes__action__ (3)]
Table Grouping (ingress) with match table compute_non_ip_hashes (3) [compute_non_ip_hashes__action__ (3)]
Table Grouping (ingress) with match table compute_other_hashes (3) [compute_other_hashes__action__ (3)]
Table Grouping (egress) with match table __egress_pkt_length_update__ (5) [__egress_pkt_length_update____action__ (5)]
Table Grouping (ingress) with condition table _condition_0 (0) []
Table Grouping (ingress) with condition table _condition_1 (0) []
Table Grouping (ingress) with condition table _condition_2 (0) []
Table Grouping (ingress) with condition table _condition_3 (0) []
Table Grouping (ingress) with condition table _condition_4 (0) []
Table Grouping (ingress) with condition table _condition_5 (0) []
Table Grouping (ingress) with condition table _condition_6 (0) []
Table Grouping (ingress) with condition table _condition_7 (0) []
Table Grouping (ingress) with condition table _condition_8 (0) []
Table Grouping (ingress) with condition table _condition_9 (0) []
Table Grouping (ingress) with condition table _condition_10 (0) []
Table Grouping (ingress) with condition table _condition_11 (0) []
Table Grouping (ingress) with condition table _condition_12 (0) []
Table Grouping (ingress) with condition table _condition_13 (0) []
Table Grouping (ingress) with condition table _condition_14 (0) []
Table Grouping (ingress) with condition table _condition_15 (0) []
Table Grouping (ingress) with condition table _condition_16 (0) []
Table Grouping (ingress) with condition table _condition_17 (0) []
Table Grouping (ingress) with condition table _condition_18 (0) []
Table Grouping (ingress) with condition table _condition_19 (0) []
Table Grouping (ingress) with condition table _condition_20 (0) []
Table Grouping (ingress) with condition table _condition_21 (0) []
Table Grouping (ingress) with condition table _condition_22 (0) []
Table Grouping (ingress) with condition table _condition_23 (0) []
Table Grouping (ingress) with condition table _condition_24 (0) []
Table Grouping (ingress) with condition table _condition_25 (0) []
Table Grouping (ingress) with condition table _condition_26 (0) []
Table Grouping (ingress) with condition table _condition_27 (0) []
Table Grouping (ingress) with condition table _condition_28 (0) []
Table Grouping (ingress) with condition table _condition_29 (0) []
Table Grouping (ingress) with condition table _condition_30 (0) []
Table Grouping (ingress) with condition table _condition_31 (0) []
Table Grouping (ingress) with condition table _condition_32 (0) []
Table Grouping (ingress) with condition table _condition_33 (0) []
Table Grouping (ingress) with condition table _condition_34 (0) []
Table Grouping (ingress) with condition table _condition_35 (0) []
Table Grouping (ingress) with condition table _condition_36 (0) []
Table Grouping (ingress) with condition table _condition_39 (0) []
Table Grouping (ingress) with condition table _condition_41 (0) []
Table Grouping (ingress) with condition table _condition_42 (0) []
Table Grouping (ingress) with condition table _condition_43 (0) []
Table Grouping (ingress) with condition table _condition_44 (0) []
Table Grouping (ingress) with condition table _condition_45 (0) []
Table Grouping (ingress) with condition table _condition_46 (0) []
Table Grouping (egress) with condition table _condition_49 (0) []
Table Grouping (egress) with condition table _condition_50 (0) []
Table Grouping (egress) with condition table _condition_51 (0) []
Table Grouping (egress) with condition table _condition_52 (0) []
Table Grouping (egress) with condition table _condition_53 (0) []
Table Grouping (egress) with condition table _condition_54 (0) []
Table Grouping (egress) with condition table _condition_56 (0) []
Table Grouping (egress) with condition table _condition_57 (0) []
Table Grouping (egress) with condition table _condition_58 (0) []
Table Grouping (egress) with condition table _condition_59 (0) []
Table Grouping (egress) with condition table _condition_61 (0) []
Table Grouping (egress) with condition table _condition_62 (0) []
Table Grouping (egress) with condition table _condition_64 (0) []
Table Grouping (egress) with condition table _condition_65 (0) []
Table Grouping (egress) with condition table _condition_66 (0) []
Table Grouping (egress) with condition table _condition_67 (0) []
Phase 0 possible?  True   Table ingress_port_mapping can be implemented using a combination of the ingress buffer registers and parser writes.
Table ingress_port_mapping can be implemented in phase 0 resources.
User indicated that egress packet length adjustment table (__egress_pkt_length_update__) should be in stage 0.
*** User specified placement constraint for table __egress_pkt_length_update__: {0: None}
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
----- Stage 0 ------
   __egress_pkt_length_update__
   _condition_49
   _condition_50
   _condition_51
   rid
   _condition_52
----- Stage 1 ------
   mirror
   _condition_53
   mcast_egress_ifindex
   _condition_54
   replica_type
----- Stage 2 ------
   egress_port_mapping
   _condition_56
   vlan_decap
   _condition_57
----- Stage 3 ------
   _condition_58
   tunnel_decap_process_outer
   tunnel_decap_process_inner
   _condition_59
   rewrite
----- Stage 4 ------
   _condition_61
   egress_bd_map
   _condition_62
   l3_rewrite
----- Stage 5 ------
   smac_rewrite
   egress_bd_stats
   _condition_64
   _condition_65
   egress_vni
   tunnel_encap_process_inner
----- Stage 6 ------
   tunnel_encap_process_outer
   egress_outer_bd_map
----- Stage 7 ------
   tunnel_rewrite
   tunnel_dst_rewrite
   tunnel_smac_rewrite
   tunnel_dmac_rewrite
   mtu
   _condition_66
   egress_vlan_xlate
   capture_tstamp
----- Stage 8 ------
   _condition_67
   egress_system_acl
Placing table: __egress_pkt_length_update____action__ with 5 entries
Table __egress_pkt_length_update____action__ with 0 entries is directly referenced
Match Table __egress_pkt_length_update__ has a total of 1024 entries in stage 0
  Direct mapped table __egress_pkt_length_update____action__ has 0 entries
>> set __egress_pkt_length_update__ (2) to placed (pragma)
------------------------------------
  Starting placement pass 0
------------------------------------
-->Placed (in ingress buffer / parser):
Table Grouping (ingress) with match table ingress_port_mapping (288) [ingress_port_mapping__action__ (288)]
>> set _condition_0 (2) to placed
>> set ingress_port_mapping (112) to placed

Nodes could place:
  ingress_port_properties (3)
>> choose Table Grouping (ingress) with match table ingress_port_properties (290) [ingress_port_properties__action__ (290)]
Earliest stage can place: 0
Placing table: ingress_port_properties__action__ with 290 entries
Table ingress_port_properties__action__ with 2048 entries is directly referenced
Match Table ingress_port_properties has a total of 1024 entries in stage 0
  Direct mapped table ingress_port_properties__action__ has 2048 entries
>> set ingress_port_properties (3) to placed

Nodes could place:
  switch_config_params (4)
switch_config_params and ingress_port_properties not mutually exclusive
>> choose Table Grouping (ingress) with match table switch_config_params (1) [switch_config_params__action__ (1)]
Earliest stage can place: 0
switch_config_params and ingress_port_properties not mutually exclusive
Placing table: switch_config_params__action__ with 1 entries
Table switch_config_params__action__ with 8192 entries is directly referenced
>> set switch_config_params (4) to placed

Nodes could place:
  validate_outer_ethernet (5)
validate_outer_ethernet and ingress_port_properties not mutually exclusive
validate_outer_ethernet and switch_config_params not mutually exclusive
>> choose Table Grouping (ingress) with match table validate_outer_ethernet (512) [validate_outer_ethernet__action__ (512)]
Earliest stage can place: 0
validate_outer_ethernet and ingress_port_properties not mutually exclusive
validate_outer_ethernet and switch_config_params not mutually exclusive
Placing table: validate_outer_ethernet__action__ with 512 entries
Table validate_outer_ethernet__action__ with 0 entries is directly referenced
Match Table validate_outer_ethernet has a total of 512 entries in stage 0
  Direct mapped table validate_outer_ethernet__action__ has 0 entries
>> set validate_outer_ethernet (5) to placed

Nodes could place:
  _condition_1 (106)
validate_outer_ipv4_packet and ingress_port_properties not mutually exclusive
validate_outer_ipv4_packet and switch_config_params not mutually exclusive
validate_outer_ipv4_packet and validate_outer_ethernet not mutually exclusive
>> choose Table Grouping (ingress) with match table validate_outer_ipv4_packet (512) [validate_outer_ipv4_packet__action__ (512)]
Earliest stage can place: 0
validate_outer_ipv4_packet and ingress_port_properties not mutually exclusive
validate_outer_ipv4_packet and switch_config_params not mutually exclusive
validate_outer_ipv4_packet and validate_outer_ethernet not mutually exclusive
Placing table: validate_outer_ipv4_packet__action__ with 512 entries
Table validate_outer_ipv4_packet__action__ with 0 entries is directly referenced
Match Table validate_outer_ipv4_packet has a total of 512 entries in stage 0
  Direct mapped table validate_outer_ipv4_packet__action__ has 0 entries
>> set validate_outer_ipv4_packet (111) to placed
>> set _condition_1 (106) to placed

Nodes could place:
  _condition_2 (107)
validate_outer_ipv6_packet and ingress_port_properties not mutually exclusive
validate_outer_ipv6_packet and switch_config_params not mutually exclusive
validate_outer_ipv6_packet and validate_outer_ethernet not mutually exclusive
validate_outer_ipv6_packet and _condition_1 not mutually exclusive
>> choose Table Grouping (ingress) with match table validate_outer_ipv6_packet (512) [validate_outer_ipv6_packet__action__ (512)]
Earliest stage can place: 0
validate_outer_ipv6_packet and ingress_port_properties not mutually exclusive
validate_outer_ipv6_packet and switch_config_params not mutually exclusive
validate_outer_ipv6_packet and validate_outer_ethernet not mutually exclusive
validate_outer_ipv6_packet and _condition_1 not mutually exclusive
Placing table: validate_outer_ipv6_packet__action__ with 512 entries
Table validate_outer_ipv6_packet__action__ with 0 entries is directly referenced
Match Table validate_outer_ipv6_packet has a total of 512 entries in stage 0
  Direct mapped table validate_outer_ipv6_packet__action__ has 0 entries
>> set validate_outer_ipv6_packet (110) to placed
>> set _condition_2 (107) to placed

Nodes could place:
  _condition_3 (108)
validate_mpls_packet and ingress_port_properties not mutually exclusive
validate_mpls_packet and switch_config_params not mutually exclusive
validate_mpls_packet and validate_outer_ethernet not mutually exclusive
validate_mpls_packet and _condition_1 not mutually exclusive
validate_mpls_packet and _condition_2 not mutually exclusive
validate_mpls_packet and validate_outer_ipv4_packet not mutually exclusive
validate_mpls_packet and validate_outer_ipv6_packet not mutually exclusive
>> choose Table Grouping (ingress) with match table validate_mpls_packet (3) [validate_mpls_packet__action__ (3)]
Earliest stage can place: 0
validate_mpls_packet and ingress_port_properties not mutually exclusive
validate_mpls_packet and switch_config_params not mutually exclusive
validate_mpls_packet and validate_outer_ethernet not mutually exclusive
validate_mpls_packet and _condition_1 not mutually exclusive
validate_mpls_packet and _condition_2 not mutually exclusive
validate_mpls_packet and validate_outer_ipv4_packet not mutually exclusive
validate_mpls_packet and validate_outer_ipv6_packet not mutually exclusive
Placing table: validate_mpls_packet__action__ with 3 entries
Table validate_mpls_packet__action__ with 0 entries is directly referenced
Match Table validate_mpls_packet has a total of 1024 entries in stage 0
  Direct mapped table validate_mpls_packet__action__ has 0 entries
>> set validate_mpls_packet (109) to placed
>> set _condition_3 (108) to placed

Nodes could place:
  _condition_4 (6)
cpu_packet_transform and ingress_port_properties not mutually exclusive
cpu_packet_transform and switch_config_params not mutually exclusive
cpu_packet_transform and validate_outer_ethernet not mutually exclusive
cpu_packet_transform and _condition_1 not mutually exclusive
cpu_packet_transform and _condition_2 not mutually exclusive
cpu_packet_transform and validate_outer_ipv4_packet not mutually exclusive
cpu_packet_transform and _condition_3 not mutually exclusive
cpu_packet_transform and validate_outer_ipv6_packet not mutually exclusive
cpu_packet_transform and validate_mpls_packet not mutually exclusive
>> choose Table Grouping (ingress) with match table cpu_packet_transform (1024) [port_vlan_to_bd_mapping__action__ (1024)]
Earliest stage can place: 0
cpu_packet_transform and ingress_port_properties not mutually exclusive
cpu_packet_transform and switch_config_params not mutually exclusive
cpu_packet_transform and validate_outer_ethernet not mutually exclusive
cpu_packet_transform and _condition_1 not mutually exclusive
cpu_packet_transform and _condition_2 not mutually exclusive
cpu_packet_transform and validate_outer_ipv4_packet not mutually exclusive
cpu_packet_transform and _condition_3 not mutually exclusive
cpu_packet_transform and validate_outer_ipv6_packet not mutually exclusive
cpu_packet_transform and validate_mpls_packet not mutually exclusive
Placing table: port_vlan_to_bd_mapping__action__ with 1024 entries
Table port_vlan_to_bd_mapping__action__ with 1024 entries is indirectly referenced
Match Table cpu_packet_transform has a total of 3072 entries in stage 0
>> set cpu_packet_transform (105) to placed
>> set _condition_4 (6) to placed

Nodes could place:
  port_vlan_to_bd_mapping (7)
port_vlan_to_bd_mapping and ingress_port_properties not mutually exclusive
port_vlan_to_bd_mapping and switch_config_params not mutually exclusive
port_vlan_to_bd_mapping and validate_outer_ethernet not mutually exclusive
port_vlan_to_bd_mapping and _condition_4 not mutually exclusive
port_vlan_to_bd_mapping and _condition_1 not mutually exclusive
port_vlan_to_bd_mapping and _condition_2 not mutually exclusive
port_vlan_to_bd_mapping and validate_outer_ipv4_packet not mutually exclusive
port_vlan_to_bd_mapping and _condition_3 not mutually exclusive
port_vlan_to_bd_mapping and validate_outer_ipv6_packet not mutually exclusive
port_vlan_to_bd_mapping and validate_mpls_packet not mutually exclusive
>> choose Table Grouping (ingress) with match table port_vlan_to_bd_mapping (4096) [port_vlan_to_bd_mapping__action__ (1024)]
Earliest stage can place: 0
port_vlan_to_bd_mapping and ingress_port_properties not mutually exclusive
port_vlan_to_bd_mapping and switch_config_params not mutually exclusive
port_vlan_to_bd_mapping and validate_outer_ethernet not mutually exclusive
port_vlan_to_bd_mapping and _condition_4 not mutually exclusive
port_vlan_to_bd_mapping and _condition_1 not mutually exclusive
port_vlan_to_bd_mapping and _condition_2 not mutually exclusive
port_vlan_to_bd_mapping and validate_outer_ipv4_packet not mutually exclusive
port_vlan_to_bd_mapping and _condition_3 not mutually exclusive
port_vlan_to_bd_mapping and validate_outer_ipv6_packet not mutually exclusive
port_vlan_to_bd_mapping and validate_mpls_packet not mutually exclusive
Placing table: port_vlan_to_bd_mapping__action__ with 1024 entries
port_vlan_to_bd_mapping__action__ has already been placed, no need to duplicate
Table port_vlan_to_bd_mapping__action__ with 1024 entries is indirectly referenced
Match Table port_vlan_to_bd_mapping has a total of 4096 entries in stage 0
>> set port_vlan_to_bd_mapping (7) to placed

Nodes could place:
  port_vlan_to_ifindex_mapping (8)
port_vlan_to_ifindex_mapping and ingress_port_properties not mutually exclusive
port_vlan_to_ifindex_mapping and switch_config_params not mutually exclusive
port_vlan_to_ifindex_mapping and validate_outer_ethernet not mutually exclusive
port_vlan_to_ifindex_mapping and _condition_4 not mutually exclusive
port_vlan_to_ifindex_mapping and _condition_1 not mutually exclusive
port_vlan_to_ifindex_mapping and port_vlan_to_bd_mapping not mutually exclusive
port_vlan_to_ifindex_mapping and cpu_packet_transform not mutually exclusive
port_vlan_to_ifindex_mapping and _condition_2 not mutually exclusive
port_vlan_to_ifindex_mapping and validate_outer_ipv4_packet not mutually exclusive
port_vlan_to_ifindex_mapping and _condition_3 not mutually exclusive
port_vlan_to_ifindex_mapping and validate_outer_ipv6_packet not mutually exclusive
port_vlan_to_ifindex_mapping and validate_mpls_packet not mutually exclusive
>> choose Table Grouping (ingress) with match table port_vlan_to_ifindex_mapping (4096) [port_vlan_to_ifindex_mapping__action__ (4096)]
Earliest stage can place: 0
port_vlan_to_ifindex_mapping and ingress_port_properties not mutually exclusive
port_vlan_to_ifindex_mapping and switch_config_params not mutually exclusive
port_vlan_to_ifindex_mapping and validate_outer_ethernet not mutually exclusive
port_vlan_to_ifindex_mapping and _condition_4 not mutually exclusive
port_vlan_to_ifindex_mapping and _condition_1 not mutually exclusive
port_vlan_to_ifindex_mapping and port_vlan_to_bd_mapping not mutually exclusive
port_vlan_to_ifindex_mapping and cpu_packet_transform not mutually exclusive
port_vlan_to_ifindex_mapping and _condition_2 not mutually exclusive
port_vlan_to_ifindex_mapping and validate_outer_ipv4_packet not mutually exclusive
port_vlan_to_ifindex_mapping and _condition_3 not mutually exclusive
port_vlan_to_ifindex_mapping and validate_outer_ipv6_packet not mutually exclusive
port_vlan_to_ifindex_mapping and validate_mpls_packet not mutually exclusive
Placing table: port_vlan_to_ifindex_mapping__action__ with 4096 entries
Table port_vlan_to_ifindex_mapping__action__ with 8192 entries is directly referenced
Match Table port_vlan_to_ifindex_mapping has a total of 4096 entries in stage 0
  Direct mapped table port_vlan_to_ifindex_mapping__action__ has 8192 entries
>> set port_vlan_to_ifindex_mapping (8) to placed

Nodes could place:
  _condition_5 (9)
spanning_tree and ingress_port_properties not mutually exclusive
>> choose Table Grouping (ingress) with match table spanning_tree (1024) [spanning_tree__action__ (1024)]
Earliest stage can place: 1
Placing table: spanning_tree__action__ with 1024 entries
Table spanning_tree__action__ with 0 entries is directly referenced
Match Table spanning_tree has a total of 3072 entries in stage 1
  Direct mapped table spanning_tree__action__ has 0 entries
>> set spanning_tree (104) to placed
>> set _condition_5 (9) to placed

Nodes could place:
  _condition_6 (10)
fabric_ingress_dst_lkp and _condition_5 not mutually exclusive
fabric_ingress_dst_lkp and spanning_tree not mutually exclusive
>> choose Table Grouping (ingress) with match table fabric_ingress_dst_lkp (257) [fabric_ingress_dst_lkp__action__ (257)]
Earliest stage can place: 1
fabric_ingress_dst_lkp and _condition_5 not mutually exclusive
fabric_ingress_dst_lkp and spanning_tree not mutually exclusive
Placing table: fabric_ingress_dst_lkp__action__ with 257 entries
User requested to implement the match table fabric_ingress_dst_lkp as a ternary table.
Table fabric_ingress_dst_lkp__action__ with 0 entries is directly referenced
Match Table fabric_ingress_dst_lkp has a total of 512 entries in stage 1
  Direct mapped table fabric_ingress_dst_lkp__action__ has 0 entries
>> set fabric_ingress_dst_lkp (103) to placed
>> set _condition_6 (10) to placed

Nodes could place:
  _condition_7 (11)
outer_rmac and _condition_5 not mutually exclusive
outer_rmac and _condition_6 not mutually exclusive
outer_rmac and spanning_tree not mutually exclusive
outer_rmac and fabric_ingress_dst_lkp not mutually exclusive
>> choose Table Grouping (ingress) with match table outer_rmac (512) [outer_rmac__action__ (512)]
Earliest stage can place: 1
outer_rmac and _condition_5 not mutually exclusive
outer_rmac and _condition_6 not mutually exclusive
outer_rmac and spanning_tree not mutually exclusive
outer_rmac and fabric_ingress_dst_lkp not mutually exclusive
Placing table: outer_rmac__action__ with 512 entries
User requested to implement the match table outer_rmac as a ternary table.
Table outer_rmac__action__ with 0 entries is directly referenced
Match Table outer_rmac has a total of 512 entries in stage 1
  Direct mapped table outer_rmac__action__ has 0 entries
>> set outer_rmac (96) to placed
>> set _condition_7 (11) to placed

Nodes could place:
  _condition_8 (97)
ipv4_src_vtep and _condition_5 not mutually exclusive
ipv4_src_vtep and _condition_6 not mutually exclusive
ipv4_src_vtep and spanning_tree not mutually exclusive
ipv4_src_vtep and _condition_7 not mutually exclusive
ipv4_src_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv4_src_vtep and outer_rmac not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_src_vtep (1024) [ipv4_src_vtep__action__ (1024)]
Earliest stage can place: 1
ipv4_src_vtep and _condition_5 not mutually exclusive
ipv4_src_vtep and _condition_6 not mutually exclusive
ipv4_src_vtep and spanning_tree not mutually exclusive
ipv4_src_vtep and _condition_7 not mutually exclusive
ipv4_src_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv4_src_vtep and outer_rmac not mutually exclusive
Placing table: ipv4_src_vtep__action__ with 1024 entries
Table ipv4_src_vtep__action__ with 0 entries is directly referenced
Match Table ipv4_src_vtep has a total of 3072 entries in stage 1
  Direct mapped table ipv4_src_vtep__action__ has 0 entries
>> set ipv4_src_vtep (101) to placed
>> set _condition_8 (97) to placed

Nodes could place:
  _condition_9 (98)
  ipv4_dest_vtep (102)
ipv6_src_vtep and _condition_5 not mutually exclusive
ipv6_src_vtep and _condition_6 not mutually exclusive
ipv6_src_vtep and spanning_tree not mutually exclusive
ipv6_src_vtep and _condition_7 not mutually exclusive
ipv6_src_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv6_src_vtep and outer_rmac not mutually exclusive
ipv6_src_vtep and _condition_8 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_src_vtep (1024) [ipv6_src_vtep__action__ (1024)] is 1
ipv4_dest_vtep and _condition_5 not mutually exclusive
ipv4_dest_vtep and _condition_6 not mutually exclusive
ipv4_dest_vtep and spanning_tree not mutually exclusive
ipv4_dest_vtep and _condition_7 not mutually exclusive
ipv4_dest_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv4_dest_vtep and outer_rmac not mutually exclusive
ipv4_dest_vtep and _condition_8 not mutually exclusive
ipv4_dest_vtep and ipv4_src_vtep not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_dest_vtep (512) [ipv4_dest_vtep__action__ (512)] is 1
ipv6_src_vtep and _condition_5 not mutually exclusive
ipv6_src_vtep and _condition_6 not mutually exclusive
ipv6_src_vtep and spanning_tree not mutually exclusive
ipv6_src_vtep and _condition_7 not mutually exclusive
ipv6_src_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv6_src_vtep and outer_rmac not mutually exclusive
ipv6_src_vtep and _condition_8 not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_src_vtep (1024) [ipv6_src_vtep__action__ (1024)]
Earliest stage can place: 1
ipv6_src_vtep and _condition_5 not mutually exclusive
ipv6_src_vtep and _condition_6 not mutually exclusive
ipv6_src_vtep and spanning_tree not mutually exclusive
ipv6_src_vtep and _condition_7 not mutually exclusive
ipv6_src_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv6_src_vtep and outer_rmac not mutually exclusive
ipv6_src_vtep and _condition_8 not mutually exclusive
Placing table: ipv6_src_vtep__action__ with 1024 entries
Table ipv6_src_vtep__action__ with 0 entries is directly referenced
Match Table ipv6_src_vtep has a total of 3072 entries in stage 1
  Direct mapped table ipv6_src_vtep__action__ has 0 entries
>> set ipv6_src_vtep (99) to placed
>> set _condition_9 (98) to placed

Nodes could place:
  ipv4_dest_vtep (102)
  ipv6_dest_vtep (100)
ipv4_dest_vtep and _condition_5 not mutually exclusive
ipv4_dest_vtep and _condition_6 not mutually exclusive
ipv4_dest_vtep and spanning_tree not mutually exclusive
ipv4_dest_vtep and _condition_7 not mutually exclusive
ipv4_dest_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv4_dest_vtep and outer_rmac not mutually exclusive
ipv4_dest_vtep and _condition_8 not mutually exclusive
ipv4_dest_vtep and ipv4_src_vtep not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_dest_vtep (512) [ipv4_dest_vtep__action__ (512)] is 1
ipv6_dest_vtep and _condition_5 not mutually exclusive
ipv6_dest_vtep and _condition_6 not mutually exclusive
ipv6_dest_vtep and spanning_tree not mutually exclusive
ipv6_dest_vtep and _condition_7 not mutually exclusive
ipv6_dest_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv6_dest_vtep and outer_rmac not mutually exclusive
ipv6_dest_vtep and _condition_8 not mutually exclusive
ipv6_dest_vtep and _condition_9 not mutually exclusive
ipv6_dest_vtep and ipv6_src_vtep not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_dest_vtep (512) [ipv6_dest_vtep__action__ (512)] is 1
ipv4_dest_vtep and _condition_5 not mutually exclusive
ipv4_dest_vtep and _condition_6 not mutually exclusive
ipv4_dest_vtep and spanning_tree not mutually exclusive
ipv4_dest_vtep and _condition_7 not mutually exclusive
ipv4_dest_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv4_dest_vtep and outer_rmac not mutually exclusive
ipv4_dest_vtep and _condition_8 not mutually exclusive
ipv4_dest_vtep and ipv4_src_vtep not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_dest_vtep (512) [ipv4_dest_vtep__action__ (512)]
Earliest stage can place: 1
ipv4_dest_vtep and _condition_5 not mutually exclusive
ipv4_dest_vtep and _condition_6 not mutually exclusive
ipv4_dest_vtep and spanning_tree not mutually exclusive
ipv4_dest_vtep and _condition_7 not mutually exclusive
ipv4_dest_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv4_dest_vtep and outer_rmac not mutually exclusive
ipv4_dest_vtep and _condition_8 not mutually exclusive
ipv4_dest_vtep and ipv4_src_vtep not mutually exclusive
Placing table: ipv4_dest_vtep__action__ with 512 entries
Table ipv4_dest_vtep__action__ with 4096 entries is directly referenced
Match Table ipv4_dest_vtep has a total of 3072 entries in stage 1
  Direct mapped table ipv4_dest_vtep__action__ has 4096 entries
>> set ipv4_dest_vtep (102) to placed

Nodes could place:
  ipv6_dest_vtep (100)
ipv6_dest_vtep and _condition_5 not mutually exclusive
ipv6_dest_vtep and _condition_6 not mutually exclusive
ipv6_dest_vtep and spanning_tree not mutually exclusive
ipv6_dest_vtep and _condition_7 not mutually exclusive
ipv6_dest_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv6_dest_vtep and outer_rmac not mutually exclusive
ipv6_dest_vtep and _condition_8 not mutually exclusive
ipv6_dest_vtep and _condition_9 not mutually exclusive
ipv6_dest_vtep and ipv6_src_vtep not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_dest_vtep (512) [ipv6_dest_vtep__action__ (512)]
Earliest stage can place: 1
ipv6_dest_vtep and _condition_5 not mutually exclusive
ipv6_dest_vtep and _condition_6 not mutually exclusive
ipv6_dest_vtep and spanning_tree not mutually exclusive
ipv6_dest_vtep and _condition_7 not mutually exclusive
ipv6_dest_vtep and fabric_ingress_dst_lkp not mutually exclusive
ipv6_dest_vtep and outer_rmac not mutually exclusive
ipv6_dest_vtep and _condition_8 not mutually exclusive
ipv6_dest_vtep and _condition_9 not mutually exclusive
ipv6_dest_vtep and ipv6_src_vtep not mutually exclusive
Placing table: ipv6_dest_vtep__action__ with 512 entries
Table ipv6_dest_vtep__action__ with 4096 entries is directly referenced
Match Table ipv6_dest_vtep has a total of 3072 entries in stage 1
  Direct mapped table ipv6_dest_vtep__action__ has 4096 entries
>> set ipv6_dest_vtep (100) to placed

Nodes could place:
  _condition_10 (12)
>> choose Table Grouping (ingress) with match table tunnel_check (512) [tunnel_check__action__ (512)]
Earliest stage can place: 2
Placing table: tunnel_check__action__ with 512 entries
Table tunnel_check__action__ with 0 entries is directly referenced
Match Table tunnel_check has a total of 512 entries in stage 2
  Direct mapped table tunnel_check__action__ has 0 entries
>> set tunnel_check (93) to placed
>> set _condition_10 (12) to placed

Nodes could place:
  adjust_lkp_fields (13)
  tunnel (94)
adjust_lkp_fields and _condition_10 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table adjust_lkp_fields (5) [adjust_lkp_fields__action__ (5)] is 2
tunnel and _condition_10 not mutually exclusive
tunnel and tunnel_check not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table tunnel (1024) [tunnel__action__ (1024)] is 2
adjust_lkp_fields and _condition_10 not mutually exclusive
>> choose Table Grouping (ingress) with match table adjust_lkp_fields (5) [adjust_lkp_fields__action__ (5)]
Earliest stage can place: 2
adjust_lkp_fields and _condition_10 not mutually exclusive
Placing table: adjust_lkp_fields__action__ with 5 entries
Table adjust_lkp_fields__action__ with 0 entries is directly referenced
Match Table adjust_lkp_fields has a total of 1024 entries in stage 2
  Direct mapped table adjust_lkp_fields__action__ has 0 entries
>> set adjust_lkp_fields (13) to placed

Nodes could place:
  tunnel (94)
tunnel and _condition_10 not mutually exclusive
tunnel and tunnel_check not mutually exclusive
>> choose Table Grouping (ingress) with match table tunnel (1024) [tunnel__action__ (1024)]
Earliest stage can place: 2
tunnel and _condition_10 not mutually exclusive
tunnel and tunnel_check not mutually exclusive
Placing table: tunnel__action__ with 1024 entries
Table tunnel__action__ with 1024 entries is directly referenced
Match Table tunnel has a total of 3072 entries in stage 2
  Direct mapped table tunnel__action__ has 1024 entries
   Will need to re-allocate to get more entries!
  deallocate tunnel__action__
  deallocate tunnel
Placing table: tunnel__action__ with 3072 entries
Table tunnel__action__ with 3072 entries is directly referenced
Match Table tunnel has a total of 3072 entries in stage 2
  Direct mapped table tunnel__action__ has 3072 entries
>> set tunnel (94) to placed

Nodes could place:
  tunnel_lookup_miss (95)
tunnel_lookup_miss and _condition_10 not mutually exclusive
tunnel_lookup_miss and tunnel_check not mutually exclusive
tunnel_lookup_miss and tunnel not mutually exclusive
>> choose Table Grouping (ingress) with match table tunnel_lookup_miss (5) [tunnel_lookup_miss__action__ (5)]
Earliest stage can place: 2
tunnel_lookup_miss and _condition_10 not mutually exclusive
tunnel_lookup_miss and tunnel_check not mutually exclusive
tunnel_lookup_miss and tunnel not mutually exclusive
Placing table: tunnel_lookup_miss__action__ with 5 entries
Table tunnel_lookup_miss__action__ with 0 entries is directly referenced
Match Table tunnel_lookup_miss has a total of 1024 entries in stage 2
  Direct mapped table tunnel_lookup_miss__action__ has 0 entries
>> set tunnel_lookup_miss (95) to placed

Nodes could place:
  _condition_11 (14)
storm_control and _condition_10 not mutually exclusive
storm_control and adjust_lkp_fields not mutually exclusive
storm_control and tunnel_check not mutually exclusive
storm_control and tunnel not mutually exclusive
storm_control and tunnel_lookup_miss not mutually exclusive
>> choose Table Grouping (ingress) with match table storm_control (512) [storm_control__action__ (512), storm_control_meter (512)]
Earliest stage can place: 2
storm_control and _condition_10 not mutually exclusive
storm_control and adjust_lkp_fields not mutually exclusive
storm_control and tunnel_check not mutually exclusive
storm_control and tunnel not mutually exclusive
storm_control and tunnel_lookup_miss not mutually exclusive
Placing table: storm_control__action__ with 512 entries
Placing table: storm_control_meter with 512 entries
Table storm_control__action__ with 0 entries is directly referenced
Table storm_control_meter with 1024 entries is indirectly referenced
Match Table storm_control has a total of 512 entries in stage 2
  Direct mapped table storm_control__action__ has 0 entries
>> set storm_control (92) to placed
>> set _condition_11 (14) to placed

Nodes could place:
  _condition_12 (15)
_condition_12 and _condition_10 not mutually exclusive
>> choose Table Grouping (ingress) with condition table _condition_12 (0) []
Earliest stage can place: 3
>> set _condition_12 (15) to placed

Nodes could place:
  _condition_13 (43)
validate_packet and _condition_12 not mutually exclusive
>> choose Table Grouping (ingress) with match table validate_packet (512) [validate_packet__action__ (512)]
Earliest stage can place: 3
validate_packet and _condition_12 not mutually exclusive
Placing table: validate_packet__action__ with 512 entries
Table validate_packet__action__ with 0 entries is directly referenced
Match Table validate_packet has a total of 512 entries in stage 3
  Direct mapped table validate_packet__action__ has 0 entries
>> set validate_packet (91) to placed
>> set _condition_13 (43) to placed

Nodes could place:
  ingress_l4_src_port (44)
ingress_l4_src_port and _condition_12 not mutually exclusive
ingress_l4_src_port and _condition_13 not mutually exclusive
ingress_l4_src_port and validate_packet not mutually exclusive
>> choose Table Grouping (ingress) with match table ingress_l4_src_port (512) [ingress_l4_src_port__action__ (512)]
Earliest stage can place: 3
ingress_l4_src_port and _condition_12 not mutually exclusive
ingress_l4_src_port and _condition_13 not mutually exclusive
ingress_l4_src_port and validate_packet not mutually exclusive
Placing table: ingress_l4_src_port__action__ with 512 entries
Table ingress_l4_src_port__action__ with 0 entries is directly referenced
Match Table ingress_l4_src_port has a total of 1536 entries in stage 3
  Direct mapped table ingress_l4_src_port__action__ has 0 entries
>> set ingress_l4_src_port (44) to placed

Nodes could place:
  ingress_l4_dst_port (45)
ingress_l4_dst_port and _condition_12 not mutually exclusive
ingress_l4_dst_port and _condition_13 not mutually exclusive
ingress_l4_dst_port and ingress_l4_src_port not mutually exclusive
ingress_l4_dst_port and validate_packet not mutually exclusive
>> choose Table Grouping (ingress) with match table ingress_l4_dst_port (512) [ingress_l4_dst_port__action__ (512)]
Earliest stage can place: 3
ingress_l4_dst_port and _condition_12 not mutually exclusive
ingress_l4_dst_port and _condition_13 not mutually exclusive
ingress_l4_dst_port and ingress_l4_src_port not mutually exclusive
ingress_l4_dst_port and validate_packet not mutually exclusive
Placing table: ingress_l4_dst_port__action__ with 512 entries
Table ingress_l4_dst_port__action__ with 0 entries is directly referenced
Match Table ingress_l4_dst_port has a total of 1536 entries in stage 3
  Direct mapped table ingress_l4_dst_port__action__ has 0 entries
>> set ingress_l4_dst_port (45) to placed

Nodes could place:
  _condition_14 (46)
smac and _condition_12 not mutually exclusive
smac and _condition_13 not mutually exclusive
smac and ingress_l4_src_port not mutually exclusive
smac and validate_packet not mutually exclusive
smac and ingress_l4_dst_port not mutually exclusive
>> choose Table Grouping (ingress) with match table smac (1024) [smac__action__ (1024)]
Earliest stage can place: 3
smac and _condition_12 not mutually exclusive
smac and _condition_13 not mutually exclusive
smac and ingress_l4_src_port not mutually exclusive
smac and validate_packet not mutually exclusive
smac and ingress_l4_dst_port not mutually exclusive
Placing table: smac__action__ with 1024 entries
Table smac__action__ with 0 entries is directly referenced
Match Table smac has a total of 3072 entries in stage 3
  Direct mapped table smac__action__ has 0 entries
>> set smac (90) to placed
>> set _condition_14 (46) to placed

Nodes could place:
  _condition_15 (47)
dmac and _condition_12 not mutually exclusive
dmac and _condition_13 not mutually exclusive
dmac and ingress_l4_src_port not mutually exclusive
dmac and validate_packet not mutually exclusive
dmac and ingress_l4_dst_port not mutually exclusive
dmac and _condition_14 not mutually exclusive
dmac and smac not mutually exclusive
>> choose Table Grouping (ingress) with match table dmac (1024) [dmac__action__ (1024)]
Earliest stage can place: 3
dmac and _condition_12 not mutually exclusive
dmac and _condition_13 not mutually exclusive
dmac and ingress_l4_src_port not mutually exclusive
dmac and validate_packet not mutually exclusive
dmac and ingress_l4_dst_port not mutually exclusive
dmac and _condition_14 not mutually exclusive
dmac and smac not mutually exclusive
Placing table: dmac__action__ with 1024 entries
Table dmac__action__ with 4096 entries is directly referenced
Match Table dmac has a total of 3072 entries in stage 3
  Direct mapped table dmac__action__ has 4096 entries
>> set dmac (89) to placed
>> set _condition_15 (47) to placed

Nodes could place:
  _condition_16 (48)
_condition_16 and _condition_12 not mutually exclusive
_condition_16 and _condition_13 not mutually exclusive
_condition_16 and ingress_l4_src_port not mutually exclusive
_condition_16 and validate_packet not mutually exclusive
_condition_16 and ingress_l4_dst_port not mutually exclusive
_condition_16 and _condition_14 not mutually exclusive
_condition_16 and _condition_15 not mutually exclusive
_condition_16 and smac not mutually exclusive
_condition_16 and dmac not mutually exclusive
>> choose Table Grouping (ingress) with condition table _condition_16 (0) []
Earliest stage can place: 3
_condition_16 and _condition_12 not mutually exclusive
_condition_16 and _condition_13 not mutually exclusive
_condition_16 and ingress_l4_src_port not mutually exclusive
_condition_16 and validate_packet not mutually exclusive
_condition_16 and ingress_l4_dst_port not mutually exclusive
_condition_16 and _condition_14 not mutually exclusive
_condition_16 and _condition_15 not mutually exclusive
_condition_16 and smac not mutually exclusive
_condition_16 and dmac not mutually exclusive
>> set _condition_16 (48) to placed

Nodes could place:
  _condition_18 (49)
  _condition_17 (87)
_condition_18 and _condition_12 not mutually exclusive
_condition_18 and _condition_13 not mutually exclusive
_condition_18 and ingress_l4_src_port not mutually exclusive
_condition_18 and validate_packet not mutually exclusive
_condition_18 and ingress_l4_dst_port not mutually exclusive
_condition_18 and _condition_14 not mutually exclusive
_condition_18 and _condition_15 not mutually exclusive
_condition_18 and smac not mutually exclusive
_condition_18 and _condition_16 not mutually exclusive
_condition_18 and dmac not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with condition table _condition_18 (0) [] is 3
mac_acl and _condition_12 not mutually exclusive
mac_acl and _condition_13 not mutually exclusive
mac_acl and ingress_l4_src_port not mutually exclusive
mac_acl and validate_packet not mutually exclusive
mac_acl and ingress_l4_dst_port not mutually exclusive
mac_acl and _condition_14 not mutually exclusive
mac_acl and _condition_15 not mutually exclusive
mac_acl and smac not mutually exclusive
mac_acl and _condition_16 not mutually exclusive
mac_acl and dmac not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table mac_acl (512) [mac_acl__action__ (512)] is 3
_condition_18 and _condition_12 not mutually exclusive
_condition_18 and _condition_13 not mutually exclusive
_condition_18 and ingress_l4_src_port not mutually exclusive
_condition_18 and validate_packet not mutually exclusive
_condition_18 and ingress_l4_dst_port not mutually exclusive
_condition_18 and _condition_14 not mutually exclusive
_condition_18 and _condition_15 not mutually exclusive
_condition_18 and smac not mutually exclusive
_condition_18 and _condition_16 not mutually exclusive
_condition_18 and dmac not mutually exclusive
>> choose Table Grouping (ingress) with condition table _condition_18 (0) []
Earliest stage can place: 3
_condition_18 and _condition_12 not mutually exclusive
_condition_18 and _condition_13 not mutually exclusive
_condition_18 and ingress_l4_src_port not mutually exclusive
_condition_18 and validate_packet not mutually exclusive
_condition_18 and ingress_l4_dst_port not mutually exclusive
_condition_18 and _condition_14 not mutually exclusive
_condition_18 and _condition_15 not mutually exclusive
_condition_18 and smac not mutually exclusive
_condition_18 and _condition_16 not mutually exclusive
_condition_18 and dmac not mutually exclusive
>> set _condition_18 (49) to placed

Nodes could place:
  _condition_17 (87)
  _condition_19 (83)
mac_acl and _condition_12 not mutually exclusive
mac_acl and _condition_13 not mutually exclusive
mac_acl and ingress_l4_src_port not mutually exclusive
mac_acl and validate_packet not mutually exclusive
mac_acl and ingress_l4_dst_port not mutually exclusive
mac_acl and _condition_14 not mutually exclusive
mac_acl and _condition_15 not mutually exclusive
mac_acl and smac not mutually exclusive
mac_acl and _condition_16 not mutually exclusive
mac_acl and dmac not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table mac_acl (512) [mac_acl__action__ (512)] is 3
ip_acl and _condition_12 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ip_acl (512) [ip_acl__action__ (512)] is 4
mac_acl and _condition_12 not mutually exclusive
mac_acl and _condition_13 not mutually exclusive
mac_acl and ingress_l4_src_port not mutually exclusive
mac_acl and validate_packet not mutually exclusive
mac_acl and ingress_l4_dst_port not mutually exclusive
mac_acl and _condition_14 not mutually exclusive
mac_acl and _condition_15 not mutually exclusive
mac_acl and smac not mutually exclusive
mac_acl and _condition_16 not mutually exclusive
mac_acl and dmac not mutually exclusive
>> choose Table Grouping (ingress) with match table mac_acl (512) [mac_acl__action__ (512)]
Earliest stage can place: 3
mac_acl and _condition_12 not mutually exclusive
mac_acl and _condition_13 not mutually exclusive
mac_acl and ingress_l4_src_port not mutually exclusive
mac_acl and validate_packet not mutually exclusive
mac_acl and ingress_l4_dst_port not mutually exclusive
mac_acl and _condition_14 not mutually exclusive
mac_acl and _condition_15 not mutually exclusive
mac_acl and smac not mutually exclusive
mac_acl and _condition_16 not mutually exclusive
mac_acl and dmac not mutually exclusive
Placing table: mac_acl__action__ with 512 entries
Table mac_acl__action__ with 1024 entries is directly referenced
Match Table mac_acl has a total of 512 entries in stage 3
  Direct mapped table mac_acl__action__ has 1024 entries
>> set mac_acl (88) to placed
>> set _condition_17 (87) to placed

Nodes could place:
  _condition_19 (83)
ip_acl and _condition_12 not mutually exclusive
>> choose Table Grouping (ingress) with match table ip_acl (512) [ip_acl__action__ (512)]
Earliest stage can place: 4
Placing table: ip_acl__action__ with 512 entries
Table ip_acl__action__ with 1024 entries is directly referenced
Match Table ip_acl has a total of 512 entries in stage 4
  Direct mapped table ip_acl__action__ has 1024 entries
>> set ip_acl (86) to placed
>> set _condition_19 (83) to placed

Nodes could place:
  _condition_20 (84)
ipv6_acl and _condition_19 not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_acl (512) [ipv6_acl__action__ (512)]
Earliest stage can place: 4
ipv6_acl and _condition_19 not mutually exclusive
Placing table: ipv6_acl__action__ with 512 entries
Table ipv6_acl__action__ with 1024 entries is directly referenced
Match Table ipv6_acl has a total of 512 entries in stage 4
  Direct mapped table ipv6_acl__action__ has 1024 entries
>> set ipv6_acl (85) to placed
>> set _condition_20 (84) to placed

Nodes could place:
  _condition_21 (50)
rmac and _condition_19 not mutually exclusive
rmac and _condition_20 not mutually exclusive
rmac and ip_acl not mutually exclusive
rmac and ipv6_acl not mutually exclusive
>> choose Table Grouping (ingress) with match table rmac (512) [rmac__action__ (512)]
Earliest stage can place: 4
rmac and _condition_19 not mutually exclusive
rmac and _condition_20 not mutually exclusive
rmac and ip_acl not mutually exclusive
rmac and ipv6_acl not mutually exclusive
Placing table: rmac__action__ with 512 entries
Table rmac__action__ with 0 entries is directly referenced
Match Table rmac has a total of 3072 entries in stage 4
  Direct mapped table rmac__action__ has 0 entries
>> set rmac (65) to placed
>> set _condition_21 (50) to placed

Nodes could place:
  _condition_28 (51)
  _condition_22 (66)
_condition_28 and _condition_21 not mutually exclusive
_condition_28 and _condition_19 not mutually exclusive
_condition_28 and _condition_20 not mutually exclusive
_condition_28 and ip_acl not mutually exclusive
_condition_28 and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with condition table _condition_28 (0) [] is 4
_condition_22 and _condition_21 not mutually exclusive
_condition_22 and _condition_19 not mutually exclusive
_condition_22 and rmac not mutually exclusive
_condition_22 and _condition_20 not mutually exclusive
_condition_22 and ip_acl not mutually exclusive
_condition_22 and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with condition table _condition_22 (0) [] is 4
_condition_28 and _condition_21 not mutually exclusive
_condition_28 and _condition_19 not mutually exclusive
_condition_28 and _condition_20 not mutually exclusive
_condition_28 and ip_acl not mutually exclusive
_condition_28 and ipv6_acl not mutually exclusive
>> choose Table Grouping (ingress) with condition table _condition_28 (0) []
Earliest stage can place: 4
_condition_28 and _condition_21 not mutually exclusive
_condition_28 and _condition_19 not mutually exclusive
_condition_28 and _condition_20 not mutually exclusive
_condition_28 and ip_acl not mutually exclusive
_condition_28 and ipv6_acl not mutually exclusive
>> set _condition_28 (51) to placed

Nodes could place:
  _condition_31 (52)
  _condition_29 (59)
  _condition_22 (66)
_condition_31 and _condition_21 not mutually exclusive
_condition_31 and _condition_19 not mutually exclusive
_condition_31 and _condition_28 not mutually exclusive
_condition_31 and _condition_20 not mutually exclusive
_condition_31 and ip_acl not mutually exclusive
_condition_31 and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with condition table _condition_31 (0) [] is 4
ipv4_multicast_bridge and _condition_21 not mutually exclusive
ipv4_multicast_bridge and _condition_19 not mutually exclusive
ipv4_multicast_bridge and _condition_28 not mutually exclusive
ipv4_multicast_bridge and _condition_20 not mutually exclusive
ipv4_multicast_bridge and ip_acl not mutually exclusive
ipv4_multicast_bridge and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_bridge (512) [ipv4_multicast_bridge__action__ (512)] is 4
_condition_22 and _condition_21 not mutually exclusive
_condition_22 and _condition_19 not mutually exclusive
_condition_22 and rmac not mutually exclusive
_condition_22 and _condition_20 not mutually exclusive
_condition_22 and ip_acl not mutually exclusive
_condition_22 and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with condition table _condition_22 (0) [] is 4
_condition_31 and _condition_21 not mutually exclusive
_condition_31 and _condition_19 not mutually exclusive
_condition_31 and _condition_28 not mutually exclusive
_condition_31 and _condition_20 not mutually exclusive
_condition_31 and ip_acl not mutually exclusive
_condition_31 and ipv6_acl not mutually exclusive
>> choose Table Grouping (ingress) with condition table _condition_31 (0) []
Earliest stage can place: 4
_condition_31 and _condition_21 not mutually exclusive
_condition_31 and _condition_19 not mutually exclusive
_condition_31 and _condition_28 not mutually exclusive
_condition_31 and _condition_20 not mutually exclusive
_condition_31 and ip_acl not mutually exclusive
_condition_31 and ipv6_acl not mutually exclusive
>> set _condition_31 (52) to placed

Nodes could place:
  _condition_29 (59)
  _condition_22 (66)
  _condition_32 (53)
ipv4_multicast_bridge and _condition_21 not mutually exclusive
ipv4_multicast_bridge and _condition_19 not mutually exclusive
ipv4_multicast_bridge and _condition_28 not mutually exclusive
ipv4_multicast_bridge and _condition_20 not mutually exclusive
ipv4_multicast_bridge and ip_acl not mutually exclusive
ipv4_multicast_bridge and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_bridge (512) [ipv4_multicast_bridge__action__ (512)] is 4
_condition_22 and _condition_21 not mutually exclusive
_condition_22 and _condition_19 not mutually exclusive
_condition_22 and rmac not mutually exclusive
_condition_22 and _condition_20 not mutually exclusive
_condition_22 and ip_acl not mutually exclusive
_condition_22 and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with condition table _condition_22 (0) [] is 4
ipv6_multicast_bridge and _condition_21 not mutually exclusive
ipv6_multicast_bridge and _condition_19 not mutually exclusive
ipv6_multicast_bridge and _condition_28 not mutually exclusive
ipv6_multicast_bridge and _condition_20 not mutually exclusive
ipv6_multicast_bridge and ip_acl not mutually exclusive
ipv6_multicast_bridge and _condition_31 not mutually exclusive
ipv6_multicast_bridge and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_bridge (512) [ipv6_multicast_bridge__action__ (512)] is 4
ipv4_multicast_bridge and _condition_21 not mutually exclusive
ipv4_multicast_bridge and _condition_19 not mutually exclusive
ipv4_multicast_bridge and _condition_28 not mutually exclusive
ipv4_multicast_bridge and _condition_20 not mutually exclusive
ipv4_multicast_bridge and ip_acl not mutually exclusive
ipv4_multicast_bridge and ipv6_acl not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_multicast_bridge (512) [ipv4_multicast_bridge__action__ (512)]
Earliest stage can place: 4
ipv4_multicast_bridge and _condition_21 not mutually exclusive
ipv4_multicast_bridge and _condition_19 not mutually exclusive
ipv4_multicast_bridge and _condition_28 not mutually exclusive
ipv4_multicast_bridge and _condition_20 not mutually exclusive
ipv4_multicast_bridge and ip_acl not mutually exclusive
ipv4_multicast_bridge and ipv6_acl not mutually exclusive
Placing table: ipv4_multicast_bridge__action__ with 512 entries
Table ipv4_multicast_bridge__action__ with 4096 entries is directly referenced
Match Table ipv4_multicast_bridge has a total of 3072 entries in stage 4
  Direct mapped table ipv4_multicast_bridge__action__ has 4096 entries
>> set ipv4_multicast_bridge (63) to placed
>> set _condition_29 (59) to placed

Nodes could place:
  _condition_22 (66)
  _condition_32 (53)
  ipv4_multicast_bridge_star_g (64)
_condition_22 and _condition_21 not mutually exclusive
_condition_22 and _condition_19 not mutually exclusive
_condition_22 and rmac not mutually exclusive
_condition_22 and _condition_20 not mutually exclusive
_condition_22 and ip_acl not mutually exclusive
_condition_22 and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with condition table _condition_22 (0) [] is 4
ipv6_multicast_bridge and _condition_21 not mutually exclusive
ipv6_multicast_bridge and _condition_19 not mutually exclusive
ipv6_multicast_bridge and _condition_28 not mutually exclusive
ipv6_multicast_bridge and _condition_20 not mutually exclusive
ipv6_multicast_bridge and ip_acl not mutually exclusive
ipv6_multicast_bridge and _condition_31 not mutually exclusive
ipv6_multicast_bridge and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_bridge (512) [ipv6_multicast_bridge__action__ (512)] is 4
ipv4_multicast_bridge_star_g and _condition_21 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_19 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_28 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_20 not mutually exclusive
ipv4_multicast_bridge_star_g and ip_acl not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_29 not mutually exclusive
ipv4_multicast_bridge_star_g and ipv6_acl not mutually exclusive
ipv4_multicast_bridge_star_g and ipv4_multicast_bridge not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_bridge_star_g (512) [ipv4_multicast_bridge_star_g__action__ (512)] is 4
_condition_22 and _condition_21 not mutually exclusive
_condition_22 and _condition_19 not mutually exclusive
_condition_22 and rmac not mutually exclusive
_condition_22 and _condition_20 not mutually exclusive
_condition_22 and ip_acl not mutually exclusive
_condition_22 and ipv6_acl not mutually exclusive
>> choose Table Grouping (ingress) with condition table _condition_22 (0) []
Earliest stage can place: 4
_condition_22 and _condition_21 not mutually exclusive
_condition_22 and _condition_19 not mutually exclusive
_condition_22 and rmac not mutually exclusive
_condition_22 and _condition_20 not mutually exclusive
_condition_22 and ip_acl not mutually exclusive
_condition_22 and ipv6_acl not mutually exclusive
>> set _condition_22 (66) to placed

Nodes could place:
  _condition_32 (53)
  _condition_23 (67)
  ipv4_multicast_bridge_star_g (64)
ipv6_multicast_bridge and _condition_21 not mutually exclusive
ipv6_multicast_bridge and _condition_19 not mutually exclusive
ipv6_multicast_bridge and _condition_28 not mutually exclusive
ipv6_multicast_bridge and _condition_20 not mutually exclusive
ipv6_multicast_bridge and ip_acl not mutually exclusive
ipv6_multicast_bridge and _condition_31 not mutually exclusive
ipv6_multicast_bridge and ipv6_acl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_bridge (512) [ipv6_multicast_bridge__action__ (512)] is 4
ipv4_racl and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_racl (512) [ipv4_racl__action__ (512)] is 5
ipv4_multicast_bridge_star_g and _condition_21 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_19 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_28 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_20 not mutually exclusive
ipv4_multicast_bridge_star_g and ip_acl not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_29 not mutually exclusive
ipv4_multicast_bridge_star_g and ipv6_acl not mutually exclusive
ipv4_multicast_bridge_star_g and ipv4_multicast_bridge not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_bridge_star_g (512) [ipv4_multicast_bridge_star_g__action__ (512)] is 4
ipv6_multicast_bridge and _condition_21 not mutually exclusive
ipv6_multicast_bridge and _condition_19 not mutually exclusive
ipv6_multicast_bridge and _condition_28 not mutually exclusive
ipv6_multicast_bridge and _condition_20 not mutually exclusive
ipv6_multicast_bridge and ip_acl not mutually exclusive
ipv6_multicast_bridge and _condition_31 not mutually exclusive
ipv6_multicast_bridge and ipv6_acl not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_multicast_bridge (512) [ipv6_multicast_bridge__action__ (512)]
Earliest stage can place: 4
ipv6_multicast_bridge and _condition_21 not mutually exclusive
ipv6_multicast_bridge and _condition_19 not mutually exclusive
ipv6_multicast_bridge and _condition_28 not mutually exclusive
ipv6_multicast_bridge and _condition_20 not mutually exclusive
ipv6_multicast_bridge and ip_acl not mutually exclusive
ipv6_multicast_bridge and _condition_31 not mutually exclusive
ipv6_multicast_bridge and ipv6_acl not mutually exclusive
Placing table: ipv6_multicast_bridge__action__ with 512 entries
Table ipv6_multicast_bridge__action__ with 4096 entries is directly referenced
Match Table ipv6_multicast_bridge has a total of 3072 entries in stage 4
  Direct mapped table ipv6_multicast_bridge__action__ has 4096 entries
>> set ipv6_multicast_bridge (57) to placed
>> set _condition_32 (53) to placed

Nodes could place:
  _condition_23 (67)
  ipv4_multicast_bridge_star_g (64)
  ipv6_multicast_bridge_star_g (58)
ipv4_racl and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_racl (512) [ipv4_racl__action__ (512)] is 5
ipv4_multicast_bridge_star_g and _condition_21 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_19 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_28 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_20 not mutually exclusive
ipv4_multicast_bridge_star_g and ip_acl not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_29 not mutually exclusive
ipv4_multicast_bridge_star_g and ipv6_acl not mutually exclusive
ipv4_multicast_bridge_star_g and ipv4_multicast_bridge not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_bridge_star_g (512) [ipv4_multicast_bridge_star_g__action__ (512)] is 4
ipv6_multicast_bridge_star_g and _condition_21 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_19 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_28 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_20 not mutually exclusive
ipv6_multicast_bridge_star_g and ip_acl not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_31 not mutually exclusive
ipv6_multicast_bridge_star_g and ipv6_acl not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_32 not mutually exclusive
ipv6_multicast_bridge_star_g and ipv6_multicast_bridge not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_bridge_star_g (512) [ipv6_multicast_bridge_star_g__action__ (512)] is 4
ipv4_multicast_bridge_star_g and _condition_21 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_19 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_28 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_20 not mutually exclusive
ipv4_multicast_bridge_star_g and ip_acl not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_29 not mutually exclusive
ipv4_multicast_bridge_star_g and ipv6_acl not mutually exclusive
ipv4_multicast_bridge_star_g and ipv4_multicast_bridge not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_multicast_bridge_star_g (512) [ipv4_multicast_bridge_star_g__action__ (512)]
Earliest stage can place: 4
ipv4_multicast_bridge_star_g and _condition_21 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_19 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_28 not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_20 not mutually exclusive
ipv4_multicast_bridge_star_g and ip_acl not mutually exclusive
ipv4_multicast_bridge_star_g and _condition_29 not mutually exclusive
ipv4_multicast_bridge_star_g and ipv6_acl not mutually exclusive
ipv4_multicast_bridge_star_g and ipv4_multicast_bridge not mutually exclusive
Placing table: ipv4_multicast_bridge_star_g__action__ with 512 entries
Table ipv4_multicast_bridge_star_g__action__ with 4096 entries is directly referenced
Match Table ipv4_multicast_bridge_star_g has a total of 3072 entries in stage 4
  Direct mapped table ipv4_multicast_bridge_star_g__action__ has 4096 entries
>> set ipv4_multicast_bridge_star_g (64) to placed

Nodes could place:
  _condition_30 (60)
  _condition_23 (67)
  ipv6_multicast_bridge_star_g (58)
ipv4_multicast_route and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_route (512) [ipv4_multicast_route__action__ (512), ipv4_multicast_route_s_g_stats (512)] is 5
ipv4_racl and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_racl (512) [ipv4_racl__action__ (512)] is 5
ipv6_multicast_bridge_star_g and _condition_21 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_19 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_28 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_20 not mutually exclusive
ipv6_multicast_bridge_star_g and ip_acl not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_31 not mutually exclusive
ipv6_multicast_bridge_star_g and ipv6_acl not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_32 not mutually exclusive
ipv6_multicast_bridge_star_g and ipv6_multicast_bridge not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_bridge_star_g (512) [ipv6_multicast_bridge_star_g__action__ (512)] is 4
ipv6_multicast_bridge_star_g and _condition_21 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_19 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_28 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_20 not mutually exclusive
ipv6_multicast_bridge_star_g and ip_acl not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_31 not mutually exclusive
ipv6_multicast_bridge_star_g and ipv6_acl not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_32 not mutually exclusive
ipv6_multicast_bridge_star_g and ipv6_multicast_bridge not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_multicast_bridge_star_g (512) [ipv6_multicast_bridge_star_g__action__ (512)]
Earliest stage can place: 4
ipv6_multicast_bridge_star_g and _condition_21 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_19 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_28 not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_20 not mutually exclusive
ipv6_multicast_bridge_star_g and ip_acl not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_31 not mutually exclusive
ipv6_multicast_bridge_star_g and ipv6_acl not mutually exclusive
ipv6_multicast_bridge_star_g and _condition_32 not mutually exclusive
ipv6_multicast_bridge_star_g and ipv6_multicast_bridge not mutually exclusive
Placing table: ipv6_multicast_bridge_star_g__action__ with 512 entries
Table ipv6_multicast_bridge_star_g__action__ with 4096 entries is directly referenced
Match Table ipv6_multicast_bridge_star_g has a total of 3072 entries in stage 4
  Direct mapped table ipv6_multicast_bridge_star_g__action__ has 4096 entries
>> set ipv6_multicast_bridge_star_g (58) to placed

Nodes could place:
  _condition_30 (60)
  _condition_23 (67)
  _condition_33 (54)
ipv4_multicast_route and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_route (512) [ipv4_multicast_route__action__ (512), ipv4_multicast_route_s_g_stats (512)] is 5
ipv4_racl and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_racl (512) [ipv4_racl__action__ (512)] is 5
ipv6_multicast_route and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_route (512) [ipv6_multicast_route__action__ (512), ipv6_multicast_route_s_g_stats (512)] is 5
ipv4_multicast_route and _condition_21 not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_multicast_route (512) [ipv4_multicast_route__action__ (512), ipv4_multicast_route_s_g_stats (512)]
Earliest stage can place: 5
Placing table: ipv4_multicast_route__action__ with 512 entries
Placing table: ipv4_multicast_route_s_g_stats with 512 entries
Table ipv4_multicast_route__action__ with 4096 entries is directly referenced
Table ipv4_multicast_route_s_g_stats with 2048 entries is directly referenced
Match Table ipv4_multicast_route has a total of 3072 entries in stage 5
  Direct mapped table ipv4_multicast_route__action__ has 4096 entries
  Direct mapped table ipv4_multicast_route_s_g_stats has 2048 entries
   Will need to re-allocate to get more entries!
  deallocate ipv4_multicast_route__action__
  deallocate ipv4_multicast_route_s_g_stats
  deallocate ipv4_multicast_route
Placing table: ipv4_multicast_route__action__ with 3072 entries
Placing table: ipv4_multicast_route_s_g_stats with 3072 entries
Table ipv4_multicast_route__action__ with 4096 entries is directly referenced
Table ipv4_multicast_route_s_g_stats with 4096 entries is directly referenced
Match Table ipv4_multicast_route has a total of 3072 entries in stage 5
  Direct mapped table ipv4_multicast_route__action__ has 4096 entries
  Direct mapped table ipv4_multicast_route_s_g_stats has 4096 entries
>> set ipv4_multicast_route (61) to placed
>> set _condition_30 (60) to placed

Nodes could place:
  _condition_23 (67)
  _condition_33 (54)
  ipv4_multicast_route_star_g (62)
ipv4_racl and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_racl (512) [ipv4_racl__action__ (512)] is 5
ipv6_multicast_route and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_route (512) [ipv6_multicast_route__action__ (512), ipv6_multicast_route_s_g_stats (512)] is 5
ipv4_multicast_route_star_g and _condition_30 not mutually exclusive
ipv4_multicast_route_star_g and ipv4_multicast_route not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_route_star_g (512) [ipv4_multicast_route_star_g__action__ (512), ipv4_multicast_route_star_g_stats (512)] is 5
ipv4_racl and _condition_21 not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_racl (512) [ipv4_racl__action__ (512)]
Earliest stage can place: 5
Placing table: ipv4_racl__action__ with 512 entries
Table ipv4_racl__action__ with 4096 entries is directly referenced
Match Table ipv4_racl has a total of 512 entries in stage 5
  Direct mapped table ipv4_racl__action__ has 4096 entries
>> set ipv4_racl (77) to placed
>> set _condition_23 (67) to placed

Nodes could place:
  _condition_33 (54)
  _condition_25 (68)
  ipv4_multicast_route_star_g (62)
  _condition_24 (78)
ipv6_multicast_route and _condition_21 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_route (512) [ipv6_multicast_route__action__ (512), ipv6_multicast_route_s_g_stats (512)] is 5
ipv6_racl and _condition_23 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_racl (512) [ipv6_racl__action__ (512)] is 5
ipv4_multicast_route_star_g and _condition_30 not mutually exclusive
ipv4_multicast_route_star_g and ipv4_multicast_route not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_route_star_g (512) [ipv4_multicast_route_star_g__action__ (512), ipv4_multicast_route_star_g_stats (512)] is 5
ipv4_urpf and _condition_23 not mutually exclusive
ipv4_urpf and ipv4_racl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_urpf (1024) [ipv4_urpf__action__ (1024)] is 5
ipv6_multicast_route and _condition_21 not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_multicast_route (512) [ipv6_multicast_route__action__ (512), ipv6_multicast_route_s_g_stats (512)]
Earliest stage can place: 5
Placing table: ipv6_multicast_route__action__ with 512 entries
Placing table: ipv6_multicast_route_s_g_stats with 512 entries
Table ipv6_multicast_route__action__ with 4096 entries is directly referenced
Table ipv6_multicast_route_s_g_stats with 2048 entries is directly referenced
Match Table ipv6_multicast_route has a total of 3072 entries in stage 5
  Direct mapped table ipv6_multicast_route__action__ has 4096 entries
  Direct mapped table ipv6_multicast_route_s_g_stats has 2048 entries
   Will need to re-allocate to get more entries!
  deallocate ipv6_multicast_route__action__
  deallocate ipv6_multicast_route_s_g_stats
  deallocate ipv6_multicast_route
Placing table: ipv6_multicast_route__action__ with 3072 entries
Placing table: ipv6_multicast_route_s_g_stats with 3072 entries
Table ipv6_multicast_route__action__ with 4096 entries is directly referenced
Table ipv6_multicast_route_s_g_stats with 4096 entries is directly referenced
Match Table ipv6_multicast_route has a total of 3072 entries in stage 5
  Direct mapped table ipv6_multicast_route__action__ has 4096 entries
  Direct mapped table ipv6_multicast_route_s_g_stats has 4096 entries
>> set ipv6_multicast_route (55) to placed
>> set _condition_33 (54) to placed

Nodes could place:
  _condition_25 (68)
  ipv4_multicast_route_star_g (62)
  _condition_24 (78)
  ipv6_multicast_route_star_g (56)
ipv6_racl and _condition_23 not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_racl (512) [ipv6_racl__action__ (512)] is 5
ipv4_multicast_route_star_g and _condition_30 not mutually exclusive
ipv4_multicast_route_star_g and ipv4_multicast_route not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_route_star_g (512) [ipv4_multicast_route_star_g__action__ (512), ipv4_multicast_route_star_g_stats (512)] is 5
ipv4_urpf and _condition_23 not mutually exclusive
ipv4_urpf and ipv4_racl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_urpf (1024) [ipv4_urpf__action__ (1024)] is 5
ipv6_multicast_route_star_g and _condition_33 not mutually exclusive
ipv6_multicast_route_star_g and ipv6_multicast_route not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_route_star_g (512) [ipv6_multicast_route_star_g__action__ (512), ipv6_multicast_route_star_g_stats (512)] is 5
ipv6_racl and _condition_23 not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_racl (512) [ipv6_racl__action__ (512)]
Earliest stage can place: 5
ipv6_racl and _condition_23 not mutually exclusive
Placing table: ipv6_racl__action__ with 512 entries
Table ipv6_racl__action__ with 4096 entries is directly referenced
Match Table ipv6_racl has a total of 512 entries in stage 5
  Direct mapped table ipv6_racl__action__ has 4096 entries
>> set ipv6_racl (71) to placed
>> set _condition_25 (68) to placed

Nodes could place:
  ipv4_multicast_route_star_g (62)
  _condition_24 (78)
  ipv6_multicast_route_star_g (56)
  _condition_26 (72)
ipv4_multicast_route_star_g and _condition_30 not mutually exclusive
ipv4_multicast_route_star_g and ipv4_multicast_route not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_multicast_route_star_g (512) [ipv4_multicast_route_star_g__action__ (512), ipv4_multicast_route_star_g_stats (512)] is 5
ipv4_urpf and _condition_23 not mutually exclusive
ipv4_urpf and ipv4_racl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_urpf (1024) [ipv4_urpf__action__ (1024)] is 5
ipv6_multicast_route_star_g and _condition_33 not mutually exclusive
ipv6_multicast_route_star_g and ipv6_multicast_route not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_route_star_g (512) [ipv6_multicast_route_star_g__action__ (512), ipv6_multicast_route_star_g_stats (512)] is 5
ipv6_urpf and _condition_23 not mutually exclusive
ipv6_urpf and _condition_25 not mutually exclusive
ipv6_urpf and ipv6_racl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_urpf (1024) [ipv6_urpf__action__ (1024)] is 5
ipv4_multicast_route_star_g and _condition_30 not mutually exclusive
ipv4_multicast_route_star_g and ipv4_multicast_route not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_multicast_route_star_g (512) [ipv4_multicast_route_star_g__action__ (512), ipv4_multicast_route_star_g_stats (512)]
Earliest stage can place: 5
ipv4_multicast_route_star_g and _condition_30 not mutually exclusive
ipv4_multicast_route_star_g and ipv4_multicast_route not mutually exclusive
Placing table: ipv4_multicast_route_star_g__action__ with 512 entries
Placing table: ipv4_multicast_route_star_g_stats with 512 entries
Table ipv4_multicast_route_star_g__action__ with 4096 entries is directly referenced
Table ipv4_multicast_route_star_g_stats with 2048 entries is directly referenced
Match Table ipv4_multicast_route_star_g has a total of 3072 entries in stage 5
  Direct mapped table ipv4_multicast_route_star_g__action__ has 4096 entries
  Direct mapped table ipv4_multicast_route_star_g_stats has 2048 entries
   Will need to re-allocate to get more entries!
  deallocate ipv4_multicast_route_star_g__action__
  deallocate ipv4_multicast_route_star_g_stats
  deallocate ipv4_multicast_route_star_g
Placing table: ipv4_multicast_route_star_g__action__ with 3072 entries
Placing table: ipv4_multicast_route_star_g_stats with 3072 entries
Table ipv4_multicast_route_star_g__action__ with 4096 entries is directly referenced
Table ipv4_multicast_route_star_g_stats with 4096 entries is directly referenced
Match Table ipv4_multicast_route_star_g has a total of 3072 entries in stage 5
  Direct mapped table ipv4_multicast_route_star_g__action__ has 4096 entries
  Direct mapped table ipv4_multicast_route_star_g_stats has 4096 entries
>> set ipv4_multicast_route_star_g (62) to placed

Nodes could place:
  _condition_24 (78)
  ipv6_multicast_route_star_g (56)
  _condition_26 (72)
ipv4_urpf and _condition_23 not mutually exclusive
ipv4_urpf and ipv4_racl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_urpf (1024) [ipv4_urpf__action__ (1024)] is 5
ipv6_multicast_route_star_g and _condition_33 not mutually exclusive
ipv6_multicast_route_star_g and ipv6_multicast_route not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_route_star_g (512) [ipv6_multicast_route_star_g__action__ (512), ipv6_multicast_route_star_g_stats (512)] is 5
ipv6_urpf and _condition_23 not mutually exclusive
ipv6_urpf and _condition_25 not mutually exclusive
ipv6_urpf and ipv6_racl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_urpf (1024) [ipv6_urpf__action__ (1024)] is 5
ipv4_urpf and _condition_23 not mutually exclusive
ipv4_urpf and ipv4_racl not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_urpf (1024) [ipv4_urpf__action__ (1024)]
Earliest stage can place: 5
ipv4_urpf and _condition_23 not mutually exclusive
ipv4_urpf and ipv4_racl not mutually exclusive
Placing table: ipv4_urpf__action__ with 1024 entries
Table ipv4_urpf__action__ with 0 entries is directly referenced
Match Table ipv4_urpf has a total of 3072 entries in stage 5
  Direct mapped table ipv4_urpf__action__ has 0 entries
>> set ipv4_urpf (81) to placed
>> set _condition_24 (78) to placed

Nodes could place:
  ipv6_multicast_route_star_g (56)
  _condition_26 (72)
  ipv4_urpf_lpm (82)
ipv6_multicast_route_star_g and _condition_33 not mutually exclusive
ipv6_multicast_route_star_g and ipv6_multicast_route not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_multicast_route_star_g (512) [ipv6_multicast_route_star_g__action__ (512), ipv6_multicast_route_star_g_stats (512)] is 5
ipv6_urpf and _condition_23 not mutually exclusive
ipv6_urpf and _condition_25 not mutually exclusive
ipv6_urpf and ipv6_racl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_urpf (1024) [ipv6_urpf__action__ (1024)] is 5
ipv4_urpf_lpm and _condition_23 not mutually exclusive
ipv4_urpf_lpm and ipv4_racl not mutually exclusive
ipv4_urpf_lpm and _condition_24 not mutually exclusive
ipv4_urpf_lpm and ipv4_urpf not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_urpf_lpm (512) [ipv4_urpf_lpm__action__ (512)] is 5
ipv6_multicast_route_star_g and _condition_33 not mutually exclusive
ipv6_multicast_route_star_g and ipv6_multicast_route not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_multicast_route_star_g (512) [ipv6_multicast_route_star_g__action__ (512), ipv6_multicast_route_star_g_stats (512)]
Earliest stage can place: 5
ipv6_multicast_route_star_g and _condition_33 not mutually exclusive
ipv6_multicast_route_star_g and ipv6_multicast_route not mutually exclusive
Placing table: ipv6_multicast_route_star_g__action__ with 512 entries
Placing table: ipv6_multicast_route_star_g_stats with 512 entries
Table ipv6_multicast_route_star_g__action__ with 4096 entries is directly referenced
Table ipv6_multicast_route_star_g_stats with 2048 entries is directly referenced
Match Table ipv6_multicast_route_star_g has a total of 3072 entries in stage 5
  Direct mapped table ipv6_multicast_route_star_g__action__ has 4096 entries
  Direct mapped table ipv6_multicast_route_star_g_stats has 2048 entries
   Will need to re-allocate to get more entries!
  deallocate ipv6_multicast_route_star_g__action__
  deallocate ipv6_multicast_route_star_g_stats
  deallocate ipv6_multicast_route_star_g
Placing table: ipv6_multicast_route_star_g__action__ with 3072 entries
Placing table: ipv6_multicast_route_star_g_stats with 3072 entries
Table ipv6_multicast_route_star_g__action__ with 4096 entries is directly referenced
Table ipv6_multicast_route_star_g_stats with 4096 entries is directly referenced
Match Table ipv6_multicast_route_star_g has a total of 3072 entries in stage 5
  Direct mapped table ipv6_multicast_route_star_g__action__ has 4096 entries
  Direct mapped table ipv6_multicast_route_star_g_stats has 4096 entries
>> set ipv6_multicast_route_star_g (56) to placed

Nodes could place:
  _condition_26 (72)
  ipv4_urpf_lpm (82)
ipv6_urpf and _condition_23 not mutually exclusive
ipv6_urpf and _condition_25 not mutually exclusive
ipv6_urpf and ipv6_racl not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_urpf (1024) [ipv6_urpf__action__ (1024)] is 5
ipv4_urpf_lpm and _condition_23 not mutually exclusive
ipv4_urpf_lpm and ipv4_racl not mutually exclusive
ipv4_urpf_lpm and _condition_24 not mutually exclusive
ipv4_urpf_lpm and ipv4_urpf not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_urpf_lpm (512) [ipv4_urpf_lpm__action__ (512)] is 5
ipv6_urpf and _condition_23 not mutually exclusive
ipv6_urpf and _condition_25 not mutually exclusive
ipv6_urpf and ipv6_racl not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_urpf (1024) [ipv6_urpf__action__ (1024)]
Earliest stage can place: 5
ipv6_urpf and _condition_23 not mutually exclusive
ipv6_urpf and _condition_25 not mutually exclusive
ipv6_urpf and ipv6_racl not mutually exclusive
Placing table: ipv6_urpf__action__ with 1024 entries
Table ipv6_urpf__action__ with 0 entries is directly referenced
Match Table ipv6_urpf has a total of 3072 entries in stage 5
  Direct mapped table ipv6_urpf__action__ has 0 entries
>> set ipv6_urpf (75) to placed
>> set _condition_26 (72) to placed

Nodes could place:
  ipv4_urpf_lpm (82)
  ipv6_urpf_lpm (76)
ipv4_urpf_lpm and _condition_23 not mutually exclusive
ipv4_urpf_lpm and ipv4_racl not mutually exclusive
ipv4_urpf_lpm and _condition_24 not mutually exclusive
ipv4_urpf_lpm and ipv4_urpf not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_urpf_lpm (512) [ipv4_urpf_lpm__action__ (512)] is 5
ipv6_urpf_lpm and _condition_23 not mutually exclusive
ipv6_urpf_lpm and _condition_25 not mutually exclusive
ipv6_urpf_lpm and ipv6_racl not mutually exclusive
ipv6_urpf_lpm and _condition_26 not mutually exclusive
ipv6_urpf_lpm and ipv6_urpf not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_urpf_lpm (512) [ipv6_urpf_lpm__action__ (512)] is 5
ipv4_urpf_lpm and _condition_23 not mutually exclusive
ipv4_urpf_lpm and ipv4_racl not mutually exclusive
ipv4_urpf_lpm and _condition_24 not mutually exclusive
ipv4_urpf_lpm and ipv4_urpf not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_urpf_lpm (512) [ipv4_urpf_lpm__action__ (512)]
Earliest stage can place: 5
ipv4_urpf_lpm and _condition_23 not mutually exclusive
ipv4_urpf_lpm and ipv4_racl not mutually exclusive
ipv4_urpf_lpm and _condition_24 not mutually exclusive
ipv4_urpf_lpm and ipv4_urpf not mutually exclusive
Placing table: ipv4_urpf_lpm__action__ with 512 entries
Table ipv4_urpf_lpm__action__ with 0 entries is directly referenced
Match Table ipv4_urpf_lpm has a total of 512 entries in stage 5
  Direct mapped table ipv4_urpf_lpm__action__ has 0 entries
>> set ipv4_urpf_lpm (82) to placed

Nodes could place:
  ipv4_fib (79)
  ipv6_urpf_lpm (76)
ipv4_fib and _condition_23 not mutually exclusive
ipv4_fib and ipv4_racl not mutually exclusive
ipv4_fib and _condition_24 not mutually exclusive
ipv4_fib and ipv4_urpf not mutually exclusive
ipv4_fib and ipv4_urpf_lpm not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_fib (1024) [ipv4_fib__action__ (1024)] is 5
ipv6_urpf_lpm and _condition_23 not mutually exclusive
ipv6_urpf_lpm and _condition_25 not mutually exclusive
ipv6_urpf_lpm and ipv6_racl not mutually exclusive
ipv6_urpf_lpm and _condition_26 not mutually exclusive
ipv6_urpf_lpm and ipv6_urpf not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_urpf_lpm (512) [ipv6_urpf_lpm__action__ (512)] is 5
ipv4_fib and _condition_23 not mutually exclusive
ipv4_fib and ipv4_racl not mutually exclusive
ipv4_fib and _condition_24 not mutually exclusive
ipv4_fib and ipv4_urpf not mutually exclusive
ipv4_fib and ipv4_urpf_lpm not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_fib (1024) [ipv4_fib__action__ (1024)]
Earliest stage can place: 5
ipv4_fib and _condition_23 not mutually exclusive
ipv4_fib and ipv4_racl not mutually exclusive
ipv4_fib and _condition_24 not mutually exclusive
ipv4_fib and ipv4_urpf not mutually exclusive
ipv4_fib and ipv4_urpf_lpm not mutually exclusive
Placing table: ipv4_fib__action__ with 1024 entries
Table ipv4_fib__action__ with 0 entries is directly referenced
Match Table ipv4_fib has a total of 3072 entries in stage 5
  Direct mapped table ipv4_fib__action__ has 0 entries
>> set ipv4_fib (79) to placed

Nodes could place:
  ipv4_fib_lpm (80)
  ipv6_urpf_lpm (76)
ipv4_fib_lpm and _condition_23 not mutually exclusive
ipv4_fib_lpm and ipv4_racl not mutually exclusive
ipv4_fib_lpm and _condition_24 not mutually exclusive
ipv4_fib_lpm and ipv4_fib not mutually exclusive
ipv4_fib_lpm and ipv4_urpf not mutually exclusive
ipv4_fib_lpm and ipv4_urpf_lpm not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv4_fib_lpm (512) [ipv4_fib_lpm__action__ (512)] is 5
ipv6_urpf_lpm and _condition_23 not mutually exclusive
ipv6_urpf_lpm and _condition_25 not mutually exclusive
ipv6_urpf_lpm and ipv6_racl not mutually exclusive
ipv6_urpf_lpm and _condition_26 not mutually exclusive
ipv6_urpf_lpm and ipv6_urpf not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ipv6_urpf_lpm (512) [ipv6_urpf_lpm__action__ (512)] is 5
ipv4_fib_lpm and _condition_23 not mutually exclusive
ipv4_fib_lpm and ipv4_racl not mutually exclusive
ipv4_fib_lpm and _condition_24 not mutually exclusive
ipv4_fib_lpm and ipv4_fib not mutually exclusive
ipv4_fib_lpm and ipv4_urpf not mutually exclusive
ipv4_fib_lpm and ipv4_urpf_lpm not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv4_fib_lpm (512) [ipv4_fib_lpm__action__ (512)]
Earliest stage can place: 5
ipv4_fib_lpm and _condition_23 not mutually exclusive
ipv4_fib_lpm and ipv4_racl not mutually exclusive
ipv4_fib_lpm and _condition_24 not mutually exclusive
ipv4_fib_lpm and ipv4_fib not mutually exclusive
ipv4_fib_lpm and ipv4_urpf not mutually exclusive
ipv4_fib_lpm and ipv4_urpf_lpm not mutually exclusive
Placing table: ipv4_fib_lpm__action__ with 512 entries
Table ipv4_fib_lpm__action__ with 0 entries is directly referenced
Match Table ipv4_fib_lpm has a total of 512 entries in stage 5
  Direct mapped table ipv4_fib_lpm__action__ has 0 entries
>> set ipv4_fib_lpm (80) to placed

Nodes could place:
  ipv6_urpf_lpm (76)
ipv6_urpf_lpm and _condition_23 not mutually exclusive
ipv6_urpf_lpm and _condition_25 not mutually exclusive
ipv6_urpf_lpm and ipv6_racl not mutually exclusive
ipv6_urpf_lpm and _condition_26 not mutually exclusive
ipv6_urpf_lpm and ipv6_urpf not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_urpf_lpm (512) [ipv6_urpf_lpm__action__ (512)]
Earliest stage can place: 5
ipv6_urpf_lpm and _condition_23 not mutually exclusive
ipv6_urpf_lpm and _condition_25 not mutually exclusive
ipv6_urpf_lpm and ipv6_racl not mutually exclusive
ipv6_urpf_lpm and _condition_26 not mutually exclusive
ipv6_urpf_lpm and ipv6_urpf not mutually exclusive
Placing table: ipv6_urpf_lpm__action__ with 512 entries
Could not place table ipv6_urpf_lpm in stage 5
*** Unable to allocate enough ternary match crossbar bytes for Match Table ipv6_urpf_lpm in stage 5.

  deallocate ipv6_urpf_lpm__action__
>>Trying to place:
     Table Grouping (ingress) with match table ipv6_urpf_lpm (256) [ipv6_urpf_lpm__action__ (256)]
Placing table: ipv6_urpf_lpm__action__ with 256 entries
Could not place table ipv6_urpf_lpm in stage 5
*** Unable to allocate enough ternary match crossbar bytes for Match Table ipv6_urpf_lpm in stage 5.

  deallocate ipv6_urpf_lpm__action__
Last successful number of entries placed was 0
---last_entries_actually_got = 0
Group for next stage is:
Table Grouping (ingress) with match table ipv6_urpf_lpm (512) [ipv6_urpf_lpm__action__ (512)]
Placing table: ipv6_urpf_lpm__action__ with 512 entries
Table ipv6_urpf_lpm__action__ with 0 entries is directly referenced
Match Table ipv6_urpf_lpm has a total of 512 entries in stage 6
  Direct mapped table ipv6_urpf_lpm__action__ has 0 entries
>> set ipv6_urpf_lpm (76) to placed

Nodes could place:
  ipv6_fib (73)
ipv6_fib and ipv6_urpf_lpm not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_fib (1024) [ipv6_fib__action__ (1024)]
Earliest stage can place: 6
ipv6_fib and ipv6_urpf_lpm not mutually exclusive
Placing table: ipv6_fib__action__ with 1024 entries
Table ipv6_fib__action__ with 0 entries is directly referenced
Match Table ipv6_fib has a total of 3072 entries in stage 6
  Direct mapped table ipv6_fib__action__ has 0 entries
>> set ipv6_fib (73) to placed

Nodes could place:
  ipv6_fib_lpm (74)
ipv6_fib_lpm and ipv6_fib not mutually exclusive
ipv6_fib_lpm and ipv6_urpf_lpm not mutually exclusive
>> choose Table Grouping (ingress) with match table ipv6_fib_lpm (512) [ipv6_fib_lpm__action__ (512)]
Earliest stage can place: 6
ipv6_fib_lpm and ipv6_fib not mutually exclusive
ipv6_fib_lpm and ipv6_urpf_lpm not mutually exclusive
Placing table: ipv6_fib_lpm__action__ with 512 entries
Table ipv6_fib_lpm__action__ with 0 entries is directly referenced
Match Table ipv6_fib_lpm has a total of 512 entries in stage 6
  Direct mapped table ipv6_fib_lpm__action__ has 0 entries
>> set ipv6_fib_lpm (74) to placed

Nodes could place:
  _condition_27 (69)
urpf_bd and ipv6_fib not mutually exclusive
urpf_bd and ipv6_fib_lpm not mutually exclusive
urpf_bd and ipv6_urpf_lpm not mutually exclusive
>> choose Table Grouping (ingress) with match table urpf_bd (512) [urpf_bd__action__ (512)]
Earliest stage can place: 7
Placing table: urpf_bd__action__ with 512 entries
Table urpf_bd__action__ with 0 entries is directly referenced
Match Table urpf_bd has a total of 3072 entries in stage 7
  Direct mapped table urpf_bd__action__ has 0 entries
>> set urpf_bd (70) to placed
>> set _condition_27 (69) to placed

Nodes could place:
  _condition_34 (16)
compute_ipv4_hashes and _condition_27 not mutually exclusive
compute_ipv4_hashes and urpf_bd not mutually exclusive
>> choose Table Grouping (ingress) with match table compute_ipv4_hashes (3) [compute_ipv4_hashes__action__ (3)]
Earliest stage can place: 7
compute_ipv4_hashes and _condition_27 not mutually exclusive
compute_ipv4_hashes and urpf_bd not mutually exclusive
Placing table: compute_ipv4_hashes__action__ with 3 entries
Table compute_ipv4_hashes__action__ with 0 entries is directly referenced
Match Table compute_ipv4_hashes has a total of 1024 entries in stage 7
  Direct mapped table compute_ipv4_hashes__action__ has 0 entries
>> set compute_ipv4_hashes (42) to placed
>> set _condition_34 (16) to placed

Nodes could place:
  _condition_35 (17)
compute_ipv6_hashes and _condition_34 not mutually exclusive
compute_ipv6_hashes and _condition_27 not mutually exclusive
compute_ipv6_hashes and urpf_bd not mutually exclusive
>> choose Table Grouping (ingress) with match table compute_ipv6_hashes (3) [compute_ipv6_hashes__action__ (3)]
Earliest stage can place: 7
compute_ipv6_hashes and _condition_34 not mutually exclusive
compute_ipv6_hashes and _condition_27 not mutually exclusive
compute_ipv6_hashes and urpf_bd not mutually exclusive
Placing table: compute_ipv6_hashes__action__ with 3 entries
Table compute_ipv6_hashes__action__ with 0 entries is directly referenced
Match Table compute_ipv6_hashes has a total of 1024 entries in stage 7
  Direct mapped table compute_ipv6_hashes__action__ has 0 entries
>> set compute_ipv6_hashes (41) to placed
>> set _condition_35 (17) to placed

Nodes could place:
  compute_non_ip_hashes (18)
compute_non_ip_hashes and _condition_34 not mutually exclusive
compute_non_ip_hashes and _condition_35 not mutually exclusive
compute_non_ip_hashes and _condition_27 not mutually exclusive
compute_non_ip_hashes and urpf_bd not mutually exclusive
>> choose Table Grouping (ingress) with match table compute_non_ip_hashes (3) [compute_non_ip_hashes__action__ (3)]
Earliest stage can place: 7
compute_non_ip_hashes and _condition_34 not mutually exclusive
compute_non_ip_hashes and _condition_35 not mutually exclusive
compute_non_ip_hashes and _condition_27 not mutually exclusive
compute_non_ip_hashes and urpf_bd not mutually exclusive
Placing table: compute_non_ip_hashes__action__ with 3 entries
Table compute_non_ip_hashes__action__ with 0 entries is directly referenced
Match Table compute_non_ip_hashes has a total of 1024 entries in stage 7
  Direct mapped table compute_non_ip_hashes__action__ has 0 entries
>> set compute_non_ip_hashes (18) to placed

Nodes could place:
  compute_other_hashes (19)
>> choose Table Grouping (ingress) with match table compute_other_hashes (3) [compute_other_hashes__action__ (3)]
Earliest stage can place: 8
Placing table: compute_other_hashes__action__ with 3 entries
User requested to implement the match table compute_other_hashes as a ternary table.
Table compute_other_hashes__action__ with 0 entries is directly referenced
Match Table compute_other_hashes has a total of 512 entries in stage 8
  Direct mapped table compute_other_hashes__action__ has 0 entries
>> set compute_other_hashes (19) to placed
all nodes between acl_stats and compute_other_hashes:
  ingress_bd_stats (20)
checking if dep exists between acl_stats and ingress_bd_stats
>> cannot move n=_condition_43 because v=storm_control_stats performs metadata initialization
>> cannot move n=racl_stats because v=storm_control_stats performs metadata initialization
>> cannot move n=_condition_44 because v=storm_control_stats performs metadata initialization

Nodes could place:
  ingress_bd_stats (20)
  (compute_other_hashes (19), acl_stats (21))  (if transform graph)
ingress_bd_stats and compute_other_hashes not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table ingress_bd_stats (1024) [ingress_bd_stats__action__ (1024), ingress_bd_stats (1024)] is 8
what_followed_n = storm_control_stats (22)
acl_stats and compute_other_hashes not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table acl_stats (1024) [acl_stats__action__ (1024), acl_stats (1024)] is 8 (if transform)
ingress_bd_stats and compute_other_hashes not mutually exclusive
>> choose Table Grouping (ingress) with match table ingress_bd_stats (1024) [ingress_bd_stats__action__ (1024), ingress_bd_stats (1024)]
Earliest stage can place: 8
ingress_bd_stats and compute_other_hashes not mutually exclusive
Placing table: ingress_bd_stats__action__ with 1024 entries
Placing table: ingress_bd_stats with 1024 entries
Table ingress_bd_stats__action__ with 0 entries is directly referenced
Table ingress_bd_stats with 2048 entries is indirectly referenced
Match Table ingress_bd_stats has a total of 1024 entries in stage 8
  Direct mapped table ingress_bd_stats__action__ has 0 entries
>> set ingress_bd_stats (20) to placed
>> cannot move n=_condition_43 because v=storm_control_stats performs metadata initialization
>> cannot move n=racl_stats because v=storm_control_stats performs metadata initialization
>> cannot move n=_condition_44 because v=storm_control_stats performs metadata initialization

Nodes could place:
  acl_stats (21)
acl_stats and compute_other_hashes not mutually exclusive
acl_stats and ingress_bd_stats not mutually exclusive
>> choose Table Grouping (ingress) with match table acl_stats (1024) [acl_stats__action__ (1024), acl_stats (1024)]
Earliest stage can place: 8
acl_stats and compute_other_hashes not mutually exclusive
acl_stats and ingress_bd_stats not mutually exclusive
Placing table: acl_stats__action__ with 1024 entries
Placing table: acl_stats with 1024 entries
Table acl_stats__action__ with 0 entries is directly referenced
Table acl_stats with 2048 entries is indirectly referenced
Match Table acl_stats has a total of 1024 entries in stage 8
  Direct mapped table acl_stats__action__ has 0 entries
>> set acl_stats (21) to placed
>> cannot move n=_condition_43 because v=storm_control_stats performs metadata initialization
>> cannot move n=racl_stats because v=storm_control_stats performs metadata initialization
>> cannot move n=_condition_44 because v=storm_control_stats performs metadata initialization

Nodes could place:
  storm_control_stats (22)
storm_control_stats and compute_other_hashes not mutually exclusive
storm_control_stats and ingress_bd_stats not mutually exclusive
storm_control_stats and acl_stats not mutually exclusive
>> choose Table Grouping (ingress) with match table storm_control_stats (1024) [storm_control_stats__action__ (1024), storm_control_stats (1024)]
Earliest stage can place: 8
storm_control_stats and compute_other_hashes not mutually exclusive
storm_control_stats and ingress_bd_stats not mutually exclusive
storm_control_stats and acl_stats not mutually exclusive
Placing table: storm_control_stats__action__ with 1024 entries
Placing table: storm_control_stats with 1024 entries
Table storm_control_stats__action__ with 0 entries is directly referenced
Table storm_control_stats with 2048 entries is directly referenced
Match Table storm_control_stats has a total of 1024 entries in stage 8
  Direct mapped table storm_control_stats__action__ has 0 entries
  Direct mapped table storm_control_stats has 2048 entries
>> set storm_control_stats (22) to placed
all nodes between racl_stats and storm_control_stats:
  _condition_43 (29)
  learn_notify (36)
  lag_group (28)
  tunnel_to_mgid_mapping (37)
  bd_flood (38)
  _condition_42 (27)
  _condition_41 (26)
  nexthop (25)
  ecmp_group (39)
  _condition_39 (24)
  _condition_36 (23)
  fwd_result (40)
checking if dep exists between racl_stats and _condition_43
checking if dep exists between racl_stats and learn_notify
checking if dep exists between racl_stats and lag_group
checking if dep exists between racl_stats and tunnel_to_mgid_mapping
checking if dep exists between racl_stats and bd_flood
checking if dep exists between racl_stats and _condition_42
checking if dep exists between racl_stats and _condition_41
checking if dep exists between racl_stats and nexthop
checking if dep exists between racl_stats and ecmp_group
checking if dep exists between racl_stats and _condition_39
checking if dep exists between racl_stats and _condition_36
checking if dep exists between racl_stats and fwd_result

Nodes could place:
  _condition_36 (23)
  (storm_control_stats (22), racl_stats (30))  (if transform graph)
fwd_result and compute_other_hashes not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table fwd_result (512) [fwd_result__action__ (512)] is 9
what_followed_n = _condition_44 (31)
racl_stats and compute_other_hashes not mutually exclusive
racl_stats and ingress_bd_stats not mutually exclusive
racl_stats and acl_stats not mutually exclusive
racl_stats and storm_control_stats not mutually exclusive
  >> earliest stage can place Table Grouping (ingress) with match table racl_stats (1024) [racl_stats__action__ (1024), racl_stats (1024)] is 8 (if transform)
racl_stats and compute_other_hashes not mutually exclusive
racl_stats and ingress_bd_stats not mutually exclusive
racl_stats and acl_stats not mutually exclusive
racl_stats and storm_control_stats not mutually exclusive
>> choose Table Grouping (ingress) with match table racl_stats (1024) [racl_stats__action__ (1024), racl_stats (1024)]
>>  needed graph transformation!
Earliest stage can place: 8
racl_stats and compute_other_hashes not mutually exclusive
racl_stats and ingress_bd_stats not mutually exclusive
racl_stats and acl_stats not mutually exclusive
racl_stats and storm_control_stats not mutually exclusive
Placing table: racl_stats__action__ with 1024 entries
Placing table: racl_stats with 1024 entries
Table racl_stats__action__ with 0 entries is directly referenced
Table racl_stats with 2048 entries is indirectly referenced
Match Table racl_stats has a total of 1024 entries in stage 8
  Direct mapped table racl_stats__action__ has 0 entries
>> set racl_stats (30) to placed

Nodes could place:
  _condition_36 (23)
fwd_result and compute_other_hashes not mutually exclusive
>> choose Table Grouping (ingress) with match table fwd_result (512) [fwd_result__action__ (512)]
Earliest stage can place: 9
Placing table: fwd_result__action__ with 512 entries
Table fwd_result__action__ with 8192 entries is directly referenced
Match Table fwd_result has a total of 512 entries in stage 9
  Direct mapped table fwd_result__action__ has 8192 entries
>> set fwd_result (40) to placed
>> set _condition_36 (23) to placed

Nodes could place:
  _condition_39 (24)
>> choose Table Grouping (ingress) with match table ecmp_group (1024) [ecmp_group__action__ (1024), ecmp_group__select__ (2)]
Earliest stage can place: 10
Placing table: ecmp_group__action__ with 1024 entries
Placing table: ecmp_group__select__ with 2 entries
Table ecmp_group__action__ with 1024 entries is indirectly referenced
Table ecmp_group__select__ with 1024 entries is indirectly referenced
Match Table ecmp_group has a total of 3072 entries in stage 10
>> set ecmp_group (39) to placed
>> set _condition_39 (24) to placed

Nodes could place:
  nexthop (25)
nexthop and _condition_39 not mutually exclusive
>> choose Table Grouping (ingress) with match table nexthop (1024) [nexthop__action__ (1024)]
Earliest stage can place: 10
nexthop and _condition_39 not mutually exclusive
Placing table: nexthop__action__ with 1024 entries
Table nexthop__action__ with 4096 entries is directly referenced
Match Table nexthop has a total of 3072 entries in stage 10
  Direct mapped table nexthop__action__ has 4096 entries
>> set nexthop (25) to placed

Nodes could place:
  _condition_41 (26)
>> choose Table Grouping (ingress) with match table bd_flood (1024) [bd_flood__action__ (1024)]
Earliest stage can place: 11
Placing table: bd_flood__action__ with 1024 entries
Table bd_flood__action__ with 0 entries is directly referenced
Match Table bd_flood has a total of 3072 entries in stage 11
  Direct mapped table bd_flood__action__ has 0 entries
>> set bd_flood (38) to placed
>> set _condition_41 (26) to placed

Nodes could place:
  _condition_42 (27)
tunnel_to_mgid_mapping and _condition_41 not mutually exclusive
>> choose Table Grouping (ingress) with match table tunnel_to_mgid_mapping (1024) [tunnel_to_mgid_mapping__action__ (1024)]
Earliest stage can place: 11
tunnel_to_mgid_mapping and _condition_41 not mutually exclusive
Placing table: tunnel_to_mgid_mapping__action__ with 1024 entries
Table tunnel_to_mgid_mapping__action__ with 0 entries is directly referenced
Match Table tunnel_to_mgid_mapping has a total of 3072 entries in stage 11
  Direct mapped table tunnel_to_mgid_mapping__action__ has 0 entries
>> set tunnel_to_mgid_mapping (37) to placed
>> set _condition_42 (27) to placed

Nodes could place:
  lag_group (28)
lag_group and _condition_41 not mutually exclusive
lag_group and _condition_42 not mutually exclusive
>> choose Table Grouping (ingress) with match table lag_group (1024) [lag_group__action__ (1024), lag_group__select__ (2)]
Earliest stage can place: 11
lag_group and _condition_41 not mutually exclusive
lag_group and _condition_42 not mutually exclusive
Placing table: lag_group__action__ with 1024 entries
Placing table: lag_group__select__ with 2 entries
Table lag_group__action__ with 8192 entries is indirectly referenced
Table lag_group__select__ with 1024 entries is indirectly referenced
Match Table lag_group has a total of 1024 entries in stage 11
>> set lag_group (28) to placed

Nodes could place:
  _condition_43 (29)
learn_notify and _condition_41 not mutually exclusive
learn_notify and _condition_42 not mutually exclusive
learn_notify and bd_flood not mutually exclusive
learn_notify and lag_group not mutually exclusive
learn_notify and tunnel_to_mgid_mapping not mutually exclusive
>> choose Table Grouping (ingress) with match table learn_notify (512) [learn_notify__action__ (512)]
Earliest stage can place: 11
learn_notify and _condition_41 not mutually exclusive
learn_notify and _condition_42 not mutually exclusive
learn_notify and bd_flood not mutually exclusive
learn_notify and lag_group not mutually exclusive
learn_notify and tunnel_to_mgid_mapping not mutually exclusive
Placing table: learn_notify__action__ with 512 entries
Table learn_notify__action__ with 0 entries is directly referenced
Match Table learn_notify has a total of 512 entries in stage 11
  Direct mapped table learn_notify__action__ has 0 entries
>> set learn_notify (36) to placed
>> set _condition_43 (29) to placed

Nodes could place:
  _condition_44 (31)
_condition_44 and _condition_41 not mutually exclusive
_condition_44 and _condition_42 not mutually exclusive
_condition_44 and bd_flood not mutually exclusive
_condition_44 and lag_group not mutually exclusive
_condition_44 and tunnel_to_mgid_mapping not mutually exclusive
_condition_44 and _condition_43 not mutually exclusive
_condition_44 and learn_notify not mutually exclusive
>> choose Table Grouping (ingress) with condition table _condition_44 (0) []
Earliest stage can place: 11
_condition_44 and _condition_41 not mutually exclusive
_condition_44 and _condition_42 not mutually exclusive
_condition_44 and bd_flood not mutually exclusive
_condition_44 and lag_group not mutually exclusive
_condition_44 and tunnel_to_mgid_mapping not mutually exclusive
_condition_44 and _condition_43 not mutually exclusive
_condition_44 and learn_notify not mutually exclusive
>> set _condition_44 (31) to placed

Nodes could place:
  _condition_45 (32)
system_acl and _condition_41 not mutually exclusive
system_acl and _condition_42 not mutually exclusive
system_acl and bd_flood not mutually exclusive
system_acl and lag_group not mutually exclusive
system_acl and tunnel_to_mgid_mapping not mutually exclusive
system_acl and _condition_43 not mutually exclusive
system_acl and _condition_44 not mutually exclusive
system_acl and learn_notify not mutually exclusive
>> choose Table Grouping (ingress) with match table system_acl (512) [system_acl__action__ (512), drop_stats (1024), copp (512)]
Earliest stage can place: 11
system_acl and _condition_41 not mutually exclusive
system_acl and _condition_42 not mutually exclusive
system_acl and bd_flood not mutually exclusive
system_acl and lag_group not mutually exclusive
system_acl and tunnel_to_mgid_mapping not mutually exclusive
system_acl and _condition_43 not mutually exclusive
system_acl and _condition_44 not mutually exclusive
system_acl and learn_notify not mutually exclusive
Placing table: system_acl__action__ with 512 entries
Placing table: drop_stats with 1024 entries
Placing table: copp with 512 entries
Table system_acl__action__ with 4096 entries is directly referenced
Table drop_stats with 2048 entries is indirectly referenced
Table copp with 1024 entries is indirectly referenced
Match Table system_acl has a total of 512 entries in stage 11
  Direct mapped table system_acl__action__ has 4096 entries
>> set system_acl (33) to placed
>> set _condition_45 (32) to placed

Nodes could place:
  _condition_46 (34)
drop_stats and _condition_41 not mutually exclusive
drop_stats and _condition_42 not mutually exclusive
drop_stats and bd_flood not mutually exclusive
drop_stats and lag_group not mutually exclusive
drop_stats and tunnel_to_mgid_mapping not mutually exclusive
drop_stats and _condition_43 not mutually exclusive
drop_stats and _condition_44 not mutually exclusive
drop_stats and learn_notify not mutually exclusive
drop_stats and _condition_45 not mutually exclusive
drop_stats and system_acl not mutually exclusive
>> choose Table Grouping (ingress) with match table drop_stats (1024) [drop_stats__action__ (1024), drop_stats_2 (1024)]
Earliest stage can place: 11
drop_stats and _condition_41 not mutually exclusive
drop_stats and _condition_42 not mutually exclusive
drop_stats and bd_flood not mutually exclusive
drop_stats and lag_group not mutually exclusive
drop_stats and tunnel_to_mgid_mapping not mutually exclusive
drop_stats and _condition_43 not mutually exclusive
drop_stats and _condition_44 not mutually exclusive
drop_stats and learn_notify not mutually exclusive
drop_stats and _condition_45 not mutually exclusive
drop_stats and system_acl not mutually exclusive
Placing table: drop_stats__action__ with 1024 entries
Placing table: drop_stats_2 with 1024 entries
Table drop_stats__action__ with 0 entries is directly referenced
Table drop_stats_2 with 2048 entries is indirectly referenced
Match Table drop_stats has a total of 1024 entries in stage 11
  Direct mapped table drop_stats__action__ has 0 entries
>> set drop_stats (35) to placed
>> set _condition_46 (34) to placed
------------------------------------
  Starting placement pass 1
------------------------------------

Nodes could place:
  _condition_49 (3)
_condition_49 and __egress_pkt_length_update__ not mutually exclusive
>> choose Table Grouping (egress) with condition table _condition_49 (0) []
Earliest stage can place: 0
_condition_49 and __egress_pkt_length_update__ not mutually exclusive
>> set _condition_49 (3) to placed

Nodes could place:
  _condition_50 (7)
_condition_50 and __egress_pkt_length_update__ not mutually exclusive
_condition_50 and _condition_49 not mutually exclusive
>> choose Table Grouping (egress) with condition table _condition_50 (0) []
Earliest stage can place: 0
_condition_50 and __egress_pkt_length_update__ not mutually exclusive
_condition_50 and _condition_49 not mutually exclusive
>> set _condition_50 (7) to placed

Nodes could place:
  _condition_51 (8)
rid and __egress_pkt_length_update__ not mutually exclusive
rid and _condition_49 not mutually exclusive
rid and _condition_50 not mutually exclusive
>> choose Table Grouping (egress) with match table rid (1024) [rid__action__ (1024)]
Earliest stage can place: 0
rid and __egress_pkt_length_update__ not mutually exclusive
rid and _condition_49 not mutually exclusive
rid and _condition_50 not mutually exclusive
Placing table: rid__action__ with 1024 entries
Could not place table rid in stage 0
*** Unable to find packing option to map match data table rid in stage 0.

  deallocate rid__action__
>>Trying to place:
     Table Grouping (egress) with match table rid (512) [rid__action__ (512)]
Placing table: rid__action__ with 512 entries
Could not place table rid in stage 0
*** Unable to find packing option to map match data table rid in stage 0.

  deallocate rid__action__
Last successful number of entries placed was 0
---last_entries_actually_got = 0
Group for next stage is:
Table Grouping (egress) with match table rid (1024) [rid__action__ (1024)]
Placing table: rid__action__ with 1024 entries
Table rid__action__ with 2048 entries is directly referenced
Match Table rid has a total of 3072 entries in stage 1
  Direct mapped table rid__action__ has 2048 entries
   Will need to re-allocate to get more entries!
  deallocate rid__action__
  deallocate rid
Placing table: rid__action__ with 3072 entries
Table rid__action__ with 4096 entries is directly referenced
Match Table rid has a total of 3072 entries in stage 1
  Direct mapped table rid__action__ has 4096 entries
>> set rid (43) to placed
>> set _condition_51 (8) to placed

Nodes could place:
  _condition_52 (9)
_condition_52 and _condition_51 not mutually exclusive
_condition_52 and rid not mutually exclusive
>> choose Table Grouping (egress) with condition table _condition_52 (0) []
Earliest stage can place: 1
_condition_52 and _condition_51 not mutually exclusive
_condition_52 and rid not mutually exclusive
>> set _condition_52 (9) to placed
>> cannot move n=egress_port_mapping because it performs metadata initialization

Nodes could place:
  mirror (10)
mirror and _condition_51 not mutually exclusive
mirror and _condition_52 not mutually exclusive
mirror and rid not mutually exclusive
>> choose Table Grouping (egress) with match table mirror (1024) [mirror__action__ (1024)]
Earliest stage can place: 1
mirror and _condition_51 not mutually exclusive
mirror and _condition_52 not mutually exclusive
mirror and rid not mutually exclusive
Placing table: mirror__action__ with 1024 entries
Table mirror__action__ with 1024 entries is directly referenced
Match Table mirror has a total of 3072 entries in stage 1
  Direct mapped table mirror__action__ has 1024 entries
   Will need to re-allocate to get more entries!
  deallocate mirror__action__
  deallocate mirror
Placing table: mirror__action__ with 3072 entries
Table mirror__action__ with 3072 entries is directly referenced
Match Table mirror has a total of 3072 entries in stage 1
  Direct mapped table mirror__action__ has 3072 entries
>> set mirror (10) to placed

Nodes could place:
  _condition_53 (11)
mcast_egress_ifindex and _condition_51 not mutually exclusive
mcast_egress_ifindex and _condition_52 not mutually exclusive
mcast_egress_ifindex and rid not mutually exclusive
mcast_egress_ifindex and mirror not mutually exclusive
>> choose Table Grouping (egress) with match table mcast_egress_ifindex (1024) [mcast_egress_ifindex__action__ (1024)]
Earliest stage can place: 1
mcast_egress_ifindex and _condition_51 not mutually exclusive
mcast_egress_ifindex and _condition_52 not mutually exclusive
mcast_egress_ifindex and rid not mutually exclusive
mcast_egress_ifindex and mirror not mutually exclusive
Placing table: mcast_egress_ifindex__action__ with 1024 entries
Table mcast_egress_ifindex__action__ with 0 entries is directly referenced
Match Table mcast_egress_ifindex has a total of 3072 entries in stage 1
  Direct mapped table mcast_egress_ifindex__action__ has 0 entries
>> set mcast_egress_ifindex (42) to placed
>> set _condition_53 (11) to placed

Nodes could place:
  _condition_54 (12)
replica_type and _condition_51 not mutually exclusive
>> choose Table Grouping (egress) with match table replica_type (512) [replica_type__action__ (512)]
Earliest stage can place: 2
Placing table: replica_type__action__ with 512 entries
Table replica_type__action__ with 0 entries is directly referenced
Match Table replica_type has a total of 512 entries in stage 2
  Direct mapped table replica_type__action__ has 0 entries
>> set replica_type (41) to placed
>> set _condition_54 (12) to placed

Nodes could place:
  egress_port_mapping (13)
egress_port_mapping and _condition_54 not mutually exclusive
egress_port_mapping and replica_type not mutually exclusive
>> choose Table Grouping (egress) with match table egress_port_mapping (290) [egress_port_mapping__action__ (290)]
Earliest stage can place: 2
egress_port_mapping and _condition_54 not mutually exclusive
egress_port_mapping and replica_type not mutually exclusive
Placing table: egress_port_mapping__action__ with 290 entries
Table egress_port_mapping__action__ with 2048 entries is directly referenced
Match Table egress_port_mapping has a total of 1024 entries in stage 2
  Direct mapped table egress_port_mapping__action__ has 2048 entries
>> set egress_port_mapping (13) to placed

Nodes could place:
  _condition_56 (33)
vlan_decap and _condition_54 not mutually exclusive
vlan_decap and egress_port_mapping not mutually exclusive
vlan_decap and replica_type not mutually exclusive
>> choose Table Grouping (egress) with match table vlan_decap (3) [vlan_decap__action__ (3)]
Earliest stage can place: 2
vlan_decap and _condition_54 not mutually exclusive
vlan_decap and egress_port_mapping not mutually exclusive
vlan_decap and replica_type not mutually exclusive
Placing table: vlan_decap__action__ with 3 entries
Table vlan_decap__action__ with 0 entries is directly referenced
Match Table vlan_decap has a total of 1024 entries in stage 2
  Direct mapped table vlan_decap__action__ has 0 entries
>> set vlan_decap (40) to placed
>> set _condition_56 (33) to placed

Nodes could place:
  _condition_57 (34)
_condition_57 and _condition_54 not mutually exclusive
_condition_57 and egress_port_mapping not mutually exclusive
_condition_57 and replica_type not mutually exclusive
_condition_57 and _condition_56 not mutually exclusive
_condition_57 and vlan_decap not mutually exclusive
>> choose Table Grouping (egress) with condition table _condition_57 (0) []
Earliest stage can place: 2
_condition_57 and _condition_54 not mutually exclusive
_condition_57 and egress_port_mapping not mutually exclusive
_condition_57 and replica_type not mutually exclusive
_condition_57 and _condition_56 not mutually exclusive
_condition_57 and vlan_decap not mutually exclusive
>> set _condition_57 (34) to placed

Nodes could place:
  _condition_58 (37)
tunnel_decap_process_outer and _condition_54 not mutually exclusive
>> choose Table Grouping (egress) with match table tunnel_decap_process_outer (129) [tunnel_decap_process_outer__action__ (129)]
Earliest stage can place: 3
Placing table: tunnel_decap_process_outer__action__ with 129 entries
Table tunnel_decap_process_outer__action__ with 1024 entries is directly referenced
Match Table tunnel_decap_process_outer has a total of 1024 entries in stage 3
  Direct mapped table tunnel_decap_process_outer__action__ has 1024 entries
>> set tunnel_decap_process_outer (38) to placed
>> set _condition_58 (37) to placed

Nodes could place:
  tunnel_decap_process_inner (39)
tunnel_decap_process_inner and _condition_58 not mutually exclusive
tunnel_decap_process_inner and tunnel_decap_process_outer not mutually exclusive
>> choose Table Grouping (egress) with match table tunnel_decap_process_inner (9) [tunnel_decap_process_inner__action__ (9)]
Earliest stage can place: 3
tunnel_decap_process_inner and _condition_58 not mutually exclusive
tunnel_decap_process_inner and tunnel_decap_process_outer not mutually exclusive
Placing table: tunnel_decap_process_inner__action__ with 9 entries
Table tunnel_decap_process_inner__action__ with 0 entries is directly referenced
Match Table tunnel_decap_process_inner has a total of 1024 entries in stage 3
  Direct mapped table tunnel_decap_process_inner__action__ has 0 entries
>> set tunnel_decap_process_inner (39) to placed

Nodes could place:
  _condition_59 (35)
rewrite and _condition_58 not mutually exclusive
rewrite and tunnel_decap_process_outer not mutually exclusive
rewrite and tunnel_decap_process_inner not mutually exclusive
>> choose Table Grouping (egress) with match table rewrite (1024) [rewrite__action__ (1024)]
Earliest stage can place: 3
rewrite and _condition_58 not mutually exclusive
rewrite and tunnel_decap_process_outer not mutually exclusive
rewrite and tunnel_decap_process_inner not mutually exclusive
Placing table: rewrite__action__ with 1024 entries
Table rewrite__action__ with 1024 entries is directly referenced
Match Table rewrite has a total of 3072 entries in stage 3
  Direct mapped table rewrite__action__ has 1024 entries
   Will need to re-allocate to get more entries!
  deallocate rewrite__action__
  deallocate rewrite
Placing table: rewrite__action__ with 3072 entries
Table rewrite__action__ with 3072 entries is directly referenced
Match Table rewrite has a total of 3072 entries in stage 3
  Direct mapped table rewrite__action__ has 3072 entries
>> set rewrite (36) to placed
>> set _condition_59 (35) to placed

Nodes could place:
  _condition_61 (14)
egress_bd_map and _condition_59 not mutually exclusive
>> choose Table Grouping (egress) with match table egress_bd_map (1024) [egress_bd_map__action__ (1024)]
Earliest stage can place: 4
Placing table: egress_bd_map__action__ with 1024 entries
Table egress_bd_map__action__ with 0 entries is directly referenced
Match Table egress_bd_map has a total of 3072 entries in stage 4
  Direct mapped table egress_bd_map__action__ has 0 entries
>> set egress_bd_map (28) to placed
>> set _condition_61 (14) to placed
all nodes between egress_bd_stats and egress_bd_map:
  _condition_62 (29)
  smac_rewrite (32)
  l3_rewrite (31)
checking if dep exists between egress_bd_stats and _condition_62
checking if dep exists between egress_bd_stats and smac_rewrite
checking if dep exists between egress_bd_stats and l3_rewrite

Nodes could place:
  _condition_62 (29)
  (egress_bd_map (28), egress_bd_stats (30))  (if transform graph)
l3_rewrite and _condition_61 not mutually exclusive
l3_rewrite and egress_bd_map not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table l3_rewrite (512) [l3_rewrite__action__ (512)] is 4
what_followed_n = _condition_64 (15)
egress_bd_stats and _condition_61 not mutually exclusive
egress_bd_stats and egress_bd_map not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table egress_bd_stats (1024) [egress_bd_stats__action__ (1024), egress_bd_stats (1024)] is 4 (if transform)
l3_rewrite and _condition_61 not mutually exclusive
l3_rewrite and egress_bd_map not mutually exclusive
>> choose Table Grouping (egress) with match table l3_rewrite (512) [l3_rewrite__action__ (512)]
Earliest stage can place: 4
l3_rewrite and _condition_61 not mutually exclusive
l3_rewrite and egress_bd_map not mutually exclusive
Placing table: l3_rewrite__action__ with 512 entries
Table l3_rewrite__action__ with 0 entries is directly referenced
Match Table l3_rewrite has a total of 512 entries in stage 4
  Direct mapped table l3_rewrite__action__ has 0 entries
>> set l3_rewrite (31) to placed
>> set _condition_62 (29) to placed

Nodes could place:
  smac_rewrite (32)
smac_rewrite and _condition_61 not mutually exclusive
>> choose Table Grouping (egress) with match table smac_rewrite (512) [smac_rewrite__action__ (512)]
Earliest stage can place: 5
Placing table: smac_rewrite__action__ with 512 entries
Table smac_rewrite__action__ with 4096 entries is directly referenced
Match Table smac_rewrite has a total of 1024 entries in stage 5
  Direct mapped table smac_rewrite__action__ has 4096 entries
>> set smac_rewrite (32) to placed

Nodes could place:
  egress_bd_stats (30)
egress_bd_stats and smac_rewrite not mutually exclusive
>> choose Table Grouping (egress) with match table egress_bd_stats (1024) [egress_bd_stats__action__ (1024), egress_bd_stats (1024)]
Earliest stage can place: 5
egress_bd_stats and smac_rewrite not mutually exclusive
Placing table: egress_bd_stats__action__ with 1024 entries
Placing table: egress_bd_stats with 1024 entries
Could not place table egress_bd_stats in stage 5
*** Unable to allocate enough resources for stat table egress_bd_stats in stage 5.
  deallocate egress_bd_stats__action__
>>Trying to place:
     Table Grouping (egress) with match table egress_bd_stats (512) [egress_bd_stats__action__ (512), egress_bd_stats (512)]
Placing table: egress_bd_stats__action__ with 512 entries
Placing table: egress_bd_stats with 512 entries
Could not place table egress_bd_stats in stage 5
*** Unable to allocate enough resources for stat table egress_bd_stats in stage 5.
  deallocate egress_bd_stats__action__
Last successful number of entries placed was 0
---last_entries_actually_got = 0
Group for next stage is:
Table Grouping (egress) with match table egress_bd_stats (1024) [egress_bd_stats__action__ (1024), egress_bd_stats (1024)]
Placing table: egress_bd_stats__action__ with 1024 entries
Placing table: egress_bd_stats with 1024 entries
Table egress_bd_stats__action__ with 0 entries is directly referenced
Table egress_bd_stats with 2048 entries is directly referenced
Match Table egress_bd_stats has a total of 3072 entries in stage 6
  Direct mapped table egress_bd_stats__action__ has 0 entries
  Direct mapped table egress_bd_stats has 2048 entries
   Will need to re-allocate to get more entries!
  deallocate egress_bd_stats__action__
  deallocate egress_bd_stats
  deallocate egress_bd_stats
Placing table: egress_bd_stats__action__ with 3072 entries
Placing table: egress_bd_stats with 3072 entries
Table egress_bd_stats__action__ with 0 entries is directly referenced
Table egress_bd_stats with 4096 entries is directly referenced
Match Table egress_bd_stats has a total of 3072 entries in stage 6
  Direct mapped table egress_bd_stats__action__ has 0 entries
  Direct mapped table egress_bd_stats has 4096 entries
>> set egress_bd_stats (30) to placed

Nodes could place:
  _condition_64 (15)
_condition_64 and egress_bd_stats not mutually exclusive
>> choose Table Grouping (egress) with condition table _condition_64 (0) []
Earliest stage can place: 6
_condition_64 and egress_bd_stats not mutually exclusive
>> set _condition_64 (15) to placed

Nodes could place:
  _condition_65 (19)
egress_vni and _condition_64 not mutually exclusive
egress_vni and egress_bd_stats not mutually exclusive
>> choose Table Grouping (egress) with match table egress_vni (1024) [egress_vni__action__ (1024)]
Earliest stage can place: 6
egress_vni and _condition_64 not mutually exclusive
egress_vni and egress_bd_stats not mutually exclusive
Placing table: egress_vni__action__ with 1024 entries
Table egress_vni__action__ with 4096 entries is directly referenced
Match Table egress_vni has a total of 3072 entries in stage 6
  Direct mapped table egress_vni__action__ has 4096 entries
>> set egress_vni (27) to placed
>> set _condition_65 (19) to placed

Nodes could place:
  tunnel_encap_process_inner (20)
tunnel_encap_process_inner and _condition_64 not mutually exclusive
tunnel_encap_process_inner and _condition_65 not mutually exclusive
tunnel_encap_process_inner and egress_vni not mutually exclusive
tunnel_encap_process_inner and egress_bd_stats not mutually exclusive
>> choose Table Grouping (egress) with match table tunnel_encap_process_inner (33) [tunnel_encap_process_inner__action__ (33)]
Earliest stage can place: 6
tunnel_encap_process_inner and _condition_64 not mutually exclusive
tunnel_encap_process_inner and _condition_65 not mutually exclusive
tunnel_encap_process_inner and egress_vni not mutually exclusive
tunnel_encap_process_inner and egress_bd_stats not mutually exclusive
Placing table: tunnel_encap_process_inner__action__ with 33 entries
Table tunnel_encap_process_inner__action__ with 4096 entries is directly referenced
Match Table tunnel_encap_process_inner has a total of 1024 entries in stage 6
  Direct mapped table tunnel_encap_process_inner__action__ has 4096 entries
>> set tunnel_encap_process_inner (20) to placed
>> cannot move n=egress_outer_bd_map because it performs metadata initialization
>> cannot move n=tunnel_dmac_rewrite due to write after read with v=tunnel_encap_process_outer

Nodes could place:
  tunnel_encap_process_outer (21)
>> choose Table Grouping (egress) with match table tunnel_encap_process_outer (512) [tunnel_encap_process_outer__action__ (512)]
Earliest stage can place: 7
Placing table: tunnel_encap_process_outer__action__ with 512 entries
User requested to implement the match table tunnel_encap_process_outer as a ternary table.
Table tunnel_encap_process_outer__action__ with 1024 entries is directly referenced
Match Table tunnel_encap_process_outer has a total of 512 entries in stage 7
  Direct mapped table tunnel_encap_process_outer__action__ has 1024 entries
>> set tunnel_encap_process_outer (21) to placed

Nodes could place:
  egress_outer_bd_map (22)
egress_outer_bd_map and tunnel_encap_process_outer not mutually exclusive
>> choose Table Grouping (egress) with match table egress_outer_bd_map (1024) [egress_outer_bd_map__action__ (1024)]
Earliest stage can place: 7
egress_outer_bd_map and tunnel_encap_process_outer not mutually exclusive
Placing table: egress_outer_bd_map__action__ with 1024 entries
Table egress_outer_bd_map__action__ with 0 entries is directly referenced
Match Table egress_outer_bd_map has a total of 3072 entries in stage 7
  Direct mapped table egress_outer_bd_map__action__ has 0 entries
>> set egress_outer_bd_map (22) to placed
all nodes between tunnel_dst_rewrite and egress_outer_bd_map:
  tunnel_rewrite (23)
checking if dep exists between tunnel_dst_rewrite and tunnel_rewrite
all nodes between tunnel_dmac_rewrite and egress_outer_bd_map:
  tunnel_smac_rewrite (25)
  tunnel_dst_rewrite (24)
  tunnel_rewrite (23)
checking if dep exists between tunnel_dmac_rewrite and tunnel_smac_rewrite
checking if dep exists between tunnel_dmac_rewrite and tunnel_dst_rewrite
checking if dep exists between tunnel_dmac_rewrite and tunnel_rewrite

Nodes could place:
  tunnel_rewrite (23)
  (egress_outer_bd_map (22), tunnel_dst_rewrite (24))  (if transform graph)
  (egress_outer_bd_map (22), tunnel_dmac_rewrite (26))  (if transform graph)
tunnel_rewrite and tunnel_encap_process_outer not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table tunnel_rewrite (1024) [tunnel_rewrite__action__ (1024)] is 8
what_followed_n = tunnel_smac_rewrite (25)
tunnel_dst_rewrite and tunnel_encap_process_outer not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table tunnel_dst_rewrite (1024) [tunnel_dst_rewrite__action__ (1024)] is 8 (if transform)
what_followed_n = mtu (16)
tunnel_dmac_rewrite and tunnel_encap_process_outer not mutually exclusive
tunnel_dmac_rewrite and egress_outer_bd_map not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table tunnel_dmac_rewrite (1024) [tunnel_dmac_rewrite__action__ (1024)] is 7 (if transform)
tunnel_dmac_rewrite and tunnel_encap_process_outer not mutually exclusive
tunnel_dmac_rewrite and egress_outer_bd_map not mutually exclusive
>> choose Table Grouping (egress) with match table tunnel_dmac_rewrite (1024) [tunnel_dmac_rewrite__action__ (1024)]
>>  needed graph transformation!
Earliest stage can place: 7
tunnel_dmac_rewrite and tunnel_encap_process_outer not mutually exclusive
tunnel_dmac_rewrite and egress_outer_bd_map not mutually exclusive
Placing table: tunnel_dmac_rewrite__action__ with 1024 entries
Table tunnel_dmac_rewrite__action__ with 4096 entries is directly referenced
Match Table tunnel_dmac_rewrite has a total of 3072 entries in stage 7
  Direct mapped table tunnel_dmac_rewrite__action__ has 4096 entries
>> set tunnel_dmac_rewrite (26) to placed
all nodes between tunnel_dst_rewrite and tunnel_dmac_rewrite:
  tunnel_rewrite (23)
checking if dep exists between tunnel_dst_rewrite and tunnel_rewrite
all nodes between tunnel_smac_rewrite and tunnel_dmac_rewrite:
  tunnel_dst_rewrite (24)
  tunnel_rewrite (23)
checking if dep exists between tunnel_smac_rewrite and tunnel_dst_rewrite
checking if dep exists between tunnel_smac_rewrite and tunnel_rewrite

Nodes could place:
  tunnel_rewrite (23)
  (tunnel_dmac_rewrite (26), tunnel_dst_rewrite (24))  (if transform graph)
  (tunnel_dmac_rewrite (26), tunnel_smac_rewrite (25))  (if transform graph)
tunnel_rewrite and tunnel_encap_process_outer not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table tunnel_rewrite (1024) [tunnel_rewrite__action__ (1024)] is 8
what_followed_n = tunnel_smac_rewrite (25)
tunnel_dst_rewrite and tunnel_encap_process_outer not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table tunnel_dst_rewrite (1024) [tunnel_dst_rewrite__action__ (1024)] is 8 (if transform)
what_followed_n = mtu (16)
tunnel_smac_rewrite and tunnel_encap_process_outer not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table tunnel_smac_rewrite (257) [tunnel_smac_rewrite__action__ (257)] is 8 (if transform)
tunnel_rewrite and tunnel_encap_process_outer not mutually exclusive
>> choose Table Grouping (egress) with match table tunnel_rewrite (1024) [tunnel_rewrite__action__ (1024)]
Earliest stage can place: 8
Placing table: tunnel_rewrite__action__ with 1024 entries
Table tunnel_rewrite__action__ with 1024 entries is directly referenced
Match Table tunnel_rewrite has a total of 3072 entries in stage 8
  Direct mapped table tunnel_rewrite__action__ has 1024 entries
   Will need to re-allocate to get more entries!
  deallocate tunnel_rewrite__action__
  deallocate tunnel_rewrite
Placing table: tunnel_rewrite__action__ with 3072 entries
Table tunnel_rewrite__action__ with 3072 entries is directly referenced
Match Table tunnel_rewrite has a total of 3072 entries in stage 8
  Direct mapped table tunnel_rewrite__action__ has 3072 entries
>> set tunnel_rewrite (23) to placed
all nodes between tunnel_smac_rewrite and tunnel_rewrite:
  tunnel_dst_rewrite (24)
checking if dep exists between tunnel_smac_rewrite and tunnel_dst_rewrite

Nodes could place:
  tunnel_dst_rewrite (24)
  (tunnel_rewrite (23), tunnel_smac_rewrite (25))  (if transform graph)
tunnel_dst_rewrite and tunnel_rewrite not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table tunnel_dst_rewrite (1024) [tunnel_dst_rewrite__action__ (1024)] is 8
what_followed_n = mtu (16)
tunnel_smac_rewrite and tunnel_rewrite not mutually exclusive
  >> earliest stage can place Table Grouping (egress) with match table tunnel_smac_rewrite (257) [tunnel_smac_rewrite__action__ (257)] is 8 (if transform)
tunnel_dst_rewrite and tunnel_rewrite not mutually exclusive
>> choose Table Grouping (egress) with match table tunnel_dst_rewrite (1024) [tunnel_dst_rewrite__action__ (1024)]
Earliest stage can place: 8
tunnel_dst_rewrite and tunnel_rewrite not mutually exclusive
Placing table: tunnel_dst_rewrite__action__ with 1024 entries
Table tunnel_dst_rewrite__action__ with 1024 entries is directly referenced
Match Table tunnel_dst_rewrite has a total of 3072 entries in stage 8
  Direct mapped table tunnel_dst_rewrite__action__ has 1024 entries
   Will need to re-allocate to get more entries!
  deallocate tunnel_dst_rewrite__action__
  deallocate tunnel_dst_rewrite
Placing table: tunnel_dst_rewrite__action__ with 3072 entries
Table tunnel_dst_rewrite__action__ with 3072 entries is directly referenced
Match Table tunnel_dst_rewrite has a total of 3072 entries in stage 8
  Direct mapped table tunnel_dst_rewrite__action__ has 3072 entries
>> set tunnel_dst_rewrite (24) to placed

Nodes could place:
  tunnel_smac_rewrite (25)
tunnel_smac_rewrite and tunnel_rewrite not mutually exclusive
tunnel_smac_rewrite and tunnel_dst_rewrite not mutually exclusive
>> choose Table Grouping (egress) with match table tunnel_smac_rewrite (257) [tunnel_smac_rewrite__action__ (257)]
Earliest stage can place: 8
tunnel_smac_rewrite and tunnel_rewrite not mutually exclusive
tunnel_smac_rewrite and tunnel_dst_rewrite not mutually exclusive
Placing table: tunnel_smac_rewrite__action__ with 257 entries
Table tunnel_smac_rewrite__action__ with 4096 entries is directly referenced
Match Table tunnel_smac_rewrite has a total of 1024 entries in stage 8
  Direct mapped table tunnel_smac_rewrite__action__ has 4096 entries
>> set tunnel_smac_rewrite (25) to placed

Nodes could place:
  mtu (16)
mtu and tunnel_rewrite not mutually exclusive
mtu and tunnel_dst_rewrite not mutually exclusive
mtu and tunnel_smac_rewrite not mutually exclusive
>> choose Table Grouping (egress) with match table mtu (512) [mtu__action__ (512)]
Earliest stage can place: 8
mtu and tunnel_rewrite not mutually exclusive
mtu and tunnel_dst_rewrite not mutually exclusive
mtu and tunnel_smac_rewrite not mutually exclusive
Placing table: mtu__action__ with 512 entries
User requested to implement the match table mtu as a ternary table.
Table mtu__action__ with 0 entries is directly referenced
Match Table mtu has a total of 512 entries in stage 8
  Direct mapped table mtu__action__ has 0 entries
>> set mtu (16) to placed

Nodes could place:
  _condition_66 (17)
egress_vlan_xlate and mtu not mutually exclusive
egress_vlan_xlate and tunnel_rewrite not mutually exclusive
egress_vlan_xlate and tunnel_dst_rewrite not mutually exclusive
egress_vlan_xlate and tunnel_smac_rewrite not mutually exclusive
>> choose Table Grouping (egress) with match table egress_vlan_xlate (1024) [egress_vlan_xlate__action__ (1024)]
Earliest stage can place: 8
egress_vlan_xlate and mtu not mutually exclusive
egress_vlan_xlate and tunnel_rewrite not mutually exclusive
egress_vlan_xlate and tunnel_dst_rewrite not mutually exclusive
egress_vlan_xlate and tunnel_smac_rewrite not mutually exclusive
Placing table: egress_vlan_xlate__action__ with 1024 entries
Table egress_vlan_xlate__action__ with 0 entries is directly referenced
Match Table egress_vlan_xlate has a total of 3072 entries in stage 8
  Direct mapped table egress_vlan_xlate__action__ has 0 entries
>> set egress_vlan_xlate (18) to placed
>> set _condition_66 (17) to placed

Nodes could place:
  capture_tstamp (4)
capture_tstamp and mtu not mutually exclusive
capture_tstamp and _condition_66 not mutually exclusive
capture_tstamp and egress_vlan_xlate not mutually exclusive
capture_tstamp and tunnel_rewrite not mutually exclusive
capture_tstamp and tunnel_dst_rewrite not mutually exclusive
capture_tstamp and tunnel_smac_rewrite not mutually exclusive
>> choose Table Grouping (egress) with match table capture_tstamp (1) [capture_tstamp__action__ (1)]
Earliest stage can place: 8
capture_tstamp and mtu not mutually exclusive
capture_tstamp and _condition_66 not mutually exclusive
capture_tstamp and egress_vlan_xlate not mutually exclusive
capture_tstamp and tunnel_rewrite not mutually exclusive
capture_tstamp and tunnel_dst_rewrite not mutually exclusive
capture_tstamp and tunnel_smac_rewrite not mutually exclusive
Placing table: capture_tstamp__action__ with 1 entries
Table capture_tstamp__action__ with 0 entries is directly referenced
Match Table capture_tstamp has a total of 1 entries in stage 8
  Direct mapped table capture_tstamp__action__ has 0 entries
>> set capture_tstamp (4) to placed

Nodes could place:
  _condition_67 (5)
egress_system_acl and capture_tstamp not mutually exclusive
egress_system_acl and mtu not mutually exclusive
>> choose Table Grouping (egress) with match table egress_system_acl (512) [egress_system_acl__action__ (512)]
Earliest stage can place: 9
Placing table: egress_system_acl__action__ with 512 entries
Table egress_system_acl__action__ with 0 entries is directly referenced
Match Table egress_system_acl has a total of 512 entries in stage 9
  Direct mapped table egress_system_acl__action__ has 0 entries
>> set egress_system_acl (6) to placed
>> set _condition_67 (5) to placed

------------------------------------------
 Logical Table IDs
------------------------------------------
Logical Table IDs in stage 0 are:
  0  :  __egress_pkt_length_update__
  1  :  _condition_49
  2  :  ingress_port_properties
  3  :  _condition_50
  4  :  switch_config_params
  5  :  validate_outer_ethernet
  6  :  validate_outer_ipv4_packet
  7  :  validate_outer_ipv6_packet
  8  :  validate_mpls_packet
  9  :  cpu_packet_transform
  10  :  port_vlan_to_bd_mapping
  11  :  port_vlan_to_ifindex_mapping
Logical Table IDs in stage 1 are:
  0  :  rid
  1  :  _condition_52
  2  :  mirror
  3  :  mcast_egress_ifindex
  4  :  spanning_tree
  5  :  fabric_ingress_dst_lkp
  6  :  outer_rmac
  7  :  ipv4_src_vtep
  8  :  ipv6_src_vtep
  9  :  ipv4_dest_vtep
  10  :  ipv6_dest_vtep
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Logical Table IDs in stage 2 are:
  0  :  replica_type
  1  :  egress_port_mapping
  2  :  vlan_decap
  3  :  _condition_57
  4  :  tunnel_check
  5  :  adjust_lkp_fields
  6  :  tunnel
  7  :  tunnel_lookup_miss
  8  :  storm_control
Logical Table IDs in stage 3 are:
  0  :  tunnel_decap_process_outer
  1  :  tunnel_decap_process_inner
  2  :  rewrite
  3  :  _condition_12
  4  :  validate_packet
  5  :  ingress_l4_src_port
  6  :  ingress_l4_dst_port
  7  :  smac
  8  :  dmac
  9  :  _condition_16
  10  :  _condition_18
  11  :  mac_acl
Logical Table IDs in stage 4 are:
  0  :  egress_bd_map
  1  :  l3_rewrite
  2  :  ip_acl
  3  :  ipv6_acl
  4  :  rmac
  5  :  _condition_28
  6  :  _condition_31
  7  :  _condition_22
  8  :  ipv4_multicast_bridge
  9  :  ipv6_multicast_bridge
  10  :  ipv4_multicast_bridge_star_g
  11  :  ipv6_multicast_bridge_star_g
Logical Table IDs in stage 5 are:
  0  :  smac_rewrite
  1  :  ipv4_racl
  2  :  ipv6_racl
  3  :  ipv4_multicast_route
  4  :  ipv4_urpf
  5  :  ipv6_multicast_route
  6  :  ipv6_urpf
  7  :  ipv4_multicast_route_star_g
  8  :  ipv4_urpf_lpm
  9  :  ipv6_multicast_route_star_g
  10  :  ipv4_fib
  11  :  ipv4_fib_lpm
Logical Table IDs in stage 6 are:
  0  :  egress_bd_stats
  1  :  _condition_64
  2  :  egress_vni
  3  :  tunnel_encap_process_inner
  4  :  ipv6_urpf_lpm
  5  :  ipv6_fib
  6  :  ipv6_fib_lpm
Logical Table IDs in stage 7 are:
  0  :  tunnel_encap_process_outer
  1  :  egress_outer_bd_map
  2  :  tunnel_dmac_rewrite
  3  :  urpf_bd
  4  :  compute_ipv4_hashes
  5  :  compute_ipv6_hashes
  6  :  compute_non_ip_hashes
Logical Table IDs in stage 8 are:
  0  :  tunnel_rewrite
  1  :  tunnel_dst_rewrite
  2  :  tunnel_smac_rewrite
  3  :  mtu
  4  :  egress_vlan_xlate
  5  :  capture_tstamp
  6  :  compute_other_hashes
  7  :  ingress_bd_stats
  8  :  acl_stats
  9  :  storm_control_stats
  10  :  racl_stats
Logical Table IDs in stage 9 are:
  0  :  egress_system_acl
  1  :  fwd_result
Logical Table IDs in stage 10 are:
  0  :  ecmp_group
  1  :  nexthop
Logical Table IDs in stage 11 are:
  0  :  bd_flood
  1  :  tunnel_to_mgid_mapping
  2  :  lag_group
  3  :  learn_notify
  4  :  _condition_44
  5  :  system_acl
  6  :  drop_stats

------------------------------------------

Set an action dependency (in ingress) for ipv6_urpf_lpm to ipv6_urpf in stages 6 to 5 due to container 124
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Ignoring container written (157) since writing same field (egress_metadata.bd), due user pragma to ignore table dependency.
Set a match dependency (in egress) for _condition_64 to egress_bd_map in stages 6 to 4 due to container 212
Set a match dependency (in egress) for tunnel_encap_process_outer to egress_bd_map in stages 7 to 4 due to container 212
action mapping for switch_config_params
   set_config_parameters -> validate_outer_ethernet
action mapping for validate_outer_ethernet
   malformed_outer_ethernet_packet -> _condition_4
   set_valid_outer_unicast_packet_untagged -> _condition_1
   set_valid_outer_multicast_packet_untagged -> _condition_1
   set_valid_outer_broadcast_packet_untagged -> _condition_1
   set_valid_outer_unicast_packet_single_tagged -> _condition_1
   set_valid_outer_unicast_packet_qinq_tagged -> _condition_1
   set_valid_outer_multicast_packet_single_tagged -> _condition_1
   set_valid_outer_multicast_packet_qinq_tagged -> _condition_1
   set_valid_outer_broadcast_packet_single_tagged -> _condition_1
   set_valid_outer_broadcast_packet_qinq_tagged -> _condition_1
action mapping for ingress_port_mapping
   set_port_lag_index -> ingress_port_properties
action mapping for ingress_port_properties
   set_ingress_port_properties -> switch_config_params
action mapping for port_vlan_to_bd_mapping
   set_bd_properties -> port_vlan_to_ifindex_mapping
   port_vlan_mapping_miss -> port_vlan_to_ifindex_mapping
action mapping for port_vlan_to_ifindex_mapping
   set_ingress_interface_properties -> _condition_5
   __meta_init_miss_action_port_vlan_to_ifindex_mapping__ -> _condition_5
   nop -> _condition_5
action mapping for cpu_packet_transform
   set_bd_properties -> port_vlan_to_ifindex_mapping
   port_vlan_mapping_miss -> port_vlan_to_ifindex_mapping
action mapping for ingress_bd_stats
   update_ingress_bd_stats -> acl_stats
action mapping for lag_group
   set_lag_miss -> _condition_43
   set_lag_port -> _condition_43
action mapping for egress_port_mapping
   egress_port_type_cpu -> _condition_61
   __meta_init_miss_action_egress_port_mapping__ -> _condition_61
   egress_port_type_normal -> _condition_56
action mapping for egress_vlan_xlate
   set_egress_if_params_untagged -> capture_tstamp
   set_egress_if_params_tagged -> capture_tstamp
action mapping for capture_tstamp
   set_capture_tstamp -> _condition_67
action mapping for spanning_tree
   set_stp_state -> _condition_6
action mapping for smac
   nop -> _condition_15
   smac_miss -> _condition_15
   smac_hit -> _condition_15
action mapping for dmac
   nop -> _condition_16
   dmac_hit -> _condition_16
   dmac_multicast_hit -> _condition_16
   dmac_miss -> _condition_16
   dmac_redirect_nexthop -> _condition_16
   dmac_redirect_ecmp -> _condition_16
   dmac_drop -> _condition_16
action mapping for learn_notify
   nop -> _condition_44
   generate_learn_notify -> _condition_44
action mapping for validate_packet
   nop -> ingress_l4_src_port
   set_unicast -> ingress_l4_src_port
   set_unicast_and_ipv6_src_is_link_local -> ingress_l4_src_port
   set_multicast -> ingress_l4_src_port
   set_multicast_and_ipv6_src_is_link_local -> ingress_l4_src_port
   set_broadcast -> ingress_l4_src_port
   set_malformed_packet -> ingress_l4_src_port
action mapping for egress_bd_stats
   nop -> _condition_64
action mapping for egress_bd_map
   set_egress_bd_properties -> _condition_62
   nop -> _condition_62
   __meta_init_miss_action_egress_bd_map__ -> _condition_62
action mapping for egress_outer_bd_map
   set_egress_outer_bd_properties -> tunnel_dmac_rewrite
   nop -> tunnel_dmac_rewrite
   __meta_init_miss_action_egress_outer_bd_map__ -> tunnel_dmac_rewrite
action mapping for vlan_decap
   nop -> _condition_57
   remove_vlan_single_tagged -> _condition_57
action mapping for rmac
   rmac_hit -> _condition_22
   __meta_init_miss_action_rmac__ -> _condition_34
   rmac_miss -> _condition_34
action mapping for urpf_bd
   nop -> _condition_34
   urpf_bd_miss -> _condition_34
action mapping for smac_rewrite
   rewrite_smac -> egress_bd_stats
action mapping for l3_rewrite
   nop -> smac_rewrite
   ipv4_unicast_rewrite -> smac_rewrite
   ipv4_multicast_rewrite -> smac_rewrite
   ipv6_unicast_rewrite -> smac_rewrite
   ipv6_multicast_rewrite -> smac_rewrite
   mpls_rewrite -> smac_rewrite
action mapping for mtu
   mtu_miss -> _condition_66
   ipv4_mtu_check -> _condition_66
   ipv6_mtu_check -> _condition_66
action mapping for validate_outer_ipv4_packet
   set_malformed_outer_ipv4_packet -> _condition_4
   set_valid_outer_ipv4_packet -> _condition_4
   set_valid_outer_ipv4_llmc_packet -> _condition_4
   set_valid_outer_ipv4_mc_packet -> _condition_4
action mapping for ipv4_fib
   on_miss -> ipv4_fib_lpm
   fib_hit_nexthop -> _condition_27
   fib_hit_myip -> _condition_27
   fib_hit_ecmp -> _condition_27
action mapping for ipv4_fib_lpm
   on_miss -> _condition_27
   fib_hit_nexthop -> _condition_27
   fib_hit_ecmp -> _condition_27
action mapping for ipv4_urpf_lpm
   ipv4_urpf_hit -> ipv4_fib
   urpf_miss -> ipv4_fib
action mapping for ipv4_urpf
   on_miss -> ipv4_urpf_lpm
   ipv4_urpf_hit -> ipv4_fib
action mapping for validate_outer_ipv6_packet
   set_malformed_outer_ipv6_packet -> _condition_4
   set_valid_outer_ipv6_packet -> _condition_4
   set_valid_outer_ipv6_llmc_packet -> _condition_4
   set_valid_outer_ipv6_mc_packet -> _condition_4
action mapping for ipv6_fib_lpm
   on_miss -> _condition_27
   fib_hit_nexthop -> _condition_27
   fib_hit_ecmp -> _condition_27
action mapping for ipv6_fib
   on_miss -> ipv6_fib_lpm
   fib_hit_nexthop -> _condition_27
   fib_hit_myip -> _condition_27
   fib_hit_ecmp -> _condition_27
action mapping for ipv6_urpf_lpm
   ipv6_urpf_hit -> ipv6_fib
   urpf_miss -> ipv6_fib
action mapping for ipv6_urpf
   on_miss -> ipv6_urpf_lpm
   ipv6_urpf_hit -> ipv6_fib
action mapping for outer_rmac
   on_miss -> _condition_10
   outer_rmac_hit -> _condition_8
action mapping for ipv4_dest_vtep
   nop -> _condition_10
   set_tunnel_lookup_flag -> _condition_10
   set_tunnel_vni_and_lookup_flag -> _condition_10
action mapping for ipv4_src_vtep
   on_miss -> ipv4_dest_vtep
   src_vtep_hit -> ipv4_dest_vtep
action mapping for ipv6_dest_vtep
   nop -> _condition_10
   set_tunnel_lookup_flag -> _condition_10
   set_tunnel_vni_and_lookup_flag -> _condition_10
action mapping for ipv6_src_vtep
   on_miss -> ipv6_dest_vtep
   src_vtep_hit -> ipv6_dest_vtep
action mapping for tunnel
   nop -> _condition_11
   tunnel_lookup_miss -> tunnel_lookup_miss
   terminate_tunnel_inner_non_ip -> _condition_11
   terminate_tunnel_inner_ethernet_ipv4 -> _condition_11
   terminate_tunnel_inner_ipv4 -> _condition_11
   terminate_tunnel_inner_ethernet_ipv6 -> _condition_11
   terminate_tunnel_inner_ipv6 -> _condition_11
   terminate_eompls -> _condition_11
   terminate_vpls -> _condition_11
   terminate_ipv4_over_mpls -> _condition_11
   terminate_ipv6_over_mpls -> _condition_11
   terminate_pw -> _condition_11
   forward_mpls -> _condition_11
action mapping for adjust_lkp_fields
   non_ip_lkp -> _condition_11
   ipv4_lkp -> _condition_11
   ipv6_lkp -> _condition_11
action mapping for tunnel_lookup_miss
   non_ip_lkp -> _condition_11
   ipv4_lkp -> _condition_11
   ipv6_lkp -> _condition_11
action mapping for tunnel_check
   nop -> _condition_11
   tunnel_check_pass -> tunnel
action mapping for validate_mpls_packet
   set_valid_mpls_label -> _condition_4
action mapping for tunnel_decap_process_outer
   decap_vxlan_inner_ipv4 -> tunnel_decap_process_inner
   decap_vxlan_inner_non_ip -> tunnel_decap_process_inner
   decap_genv_inner_ipv4 -> tunnel_decap_process_inner
   decap_genv_inner_non_ip -> tunnel_decap_process_inner
   decap_gre_inner_ipv4 -> tunnel_decap_process_inner
   decap_gre_inner_non_ip -> tunnel_decap_process_inner
   decap_ip_inner_ipv4 -> tunnel_decap_process_inner
   decap_vxlan_inner_ipv6 -> tunnel_decap_process_inner
   decap_genv_inner_ipv6 -> tunnel_decap_process_inner
   decap_gre_inner_ipv6 -> tunnel_decap_process_inner
   decap_ip_inner_ipv6 -> tunnel_decap_process_inner
   decap_nvgre_inner_ipv4 -> tunnel_decap_process_inner
   decap_nvgre_inner_non_ip -> tunnel_decap_process_inner
   decap_nvgre_inner_ipv6 -> tunnel_decap_process_inner
   decap_mpls_inner_ipv4_pop1 -> tunnel_decap_process_inner
   decap_mpls_inner_ethernet_ipv4_pop1 -> tunnel_decap_process_inner
   decap_mpls_inner_ethernet_non_ip_pop1 -> tunnel_decap_process_inner
   decap_mpls_inner_ipv4_pop2 -> tunnel_decap_process_inner
   decap_mpls_inner_ethernet_ipv4_pop2 -> tunnel_decap_process_inner
   decap_mpls_inner_ethernet_non_ip_pop2 -> tunnel_decap_process_inner
   decap_mpls_inner_ipv4_pop3 -> tunnel_decap_process_inner
   decap_mpls_inner_ethernet_ipv4_pop3 -> tunnel_decap_process_inner
   decap_mpls_inner_ethernet_non_ip_pop3 -> tunnel_decap_process_inner
   decap_mpls_inner_ipv6_pop1 -> tunnel_decap_process_inner
   decap_mpls_inner_ethernet_ipv6_pop1 -> tunnel_decap_process_inner
   decap_mpls_inner_ipv6_pop2 -> tunnel_decap_process_inner
   decap_mpls_inner_ethernet_ipv6_pop2 -> tunnel_decap_process_inner
   decap_mpls_inner_ipv6_pop3 -> tunnel_decap_process_inner
   decap_mpls_inner_ethernet_ipv6_pop3 -> tunnel_decap_process_inner
action mapping for tunnel_decap_process_inner
   decap_inner_udp -> _condition_59
   decap_inner_tcp -> _condition_59
   decap_inner_icmp -> _condition_59
   decap_inner_unknown -> _condition_59
action mapping for egress_vni
   set_egress_tunnel_vni -> tunnel_encap_process_inner
action mapping for tunnel_encap_process_inner
   inner_ipv4_udp_rewrite -> tunnel_encap_process_outer
   inner_ipv4_tcp_rewrite -> tunnel_encap_process_outer
   inner_ipv4_icmp_rewrite -> tunnel_encap_process_outer
   inner_ipv4_unknown_rewrite -> tunnel_encap_process_outer
   inner_ipv6_udp_rewrite -> tunnel_encap_process_outer
   inner_ipv6_tcp_rewrite -> tunnel_encap_process_outer
   inner_ipv6_icmp_rewrite -> tunnel_encap_process_outer
   inner_ipv6_unknown_rewrite -> tunnel_encap_process_outer
   inner_non_ip_rewrite -> tunnel_encap_process_outer
action mapping for tunnel_encap_process_outer
   nop -> egress_outer_bd_map
   ipv4_nvgre_rewrite -> egress_outer_bd_map
   ipv4_gre_rewrite -> egress_outer_bd_map
   ipv4_ip_rewrite -> egress_outer_bd_map
   ipv6_gre_rewrite -> egress_outer_bd_map
   ipv6_ip_rewrite -> egress_outer_bd_map
   ipv6_nvgre_rewrite -> egress_outer_bd_map
   mpls_ethernet_push1_rewrite -> egress_outer_bd_map
   mpls_ip_push1_rewrite -> egress_outer_bd_map
   mpls_ethernet_push2_rewrite -> egress_outer_bd_map
   mpls_ip_push2_rewrite -> egress_outer_bd_map
   mpls_ethernet_push3_rewrite -> egress_outer_bd_map
   mpls_ip_push3_rewrite -> egress_outer_bd_map
   ipv4_vxlan_rewrite -> egress_outer_bd_map
   ipv4_genv_rewrite -> egress_outer_bd_map
   ipv6_vxlan_rewrite -> egress_outer_bd_map
   ipv6_genv_rewrite -> egress_outer_bd_map
action mapping for tunnel_rewrite
   nop -> tunnel_dst_rewrite
   set_ipv4_tunnel_rewrite_details -> tunnel_dst_rewrite
   set_ipv6_tunnel_rewrite_details -> tunnel_dst_rewrite
   set_mpls_rewrite_push1 -> tunnel_dst_rewrite
   set_mpls_rewrite_push2 -> tunnel_dst_rewrite
   set_mpls_rewrite_push3 -> tunnel_dst_rewrite
action mapping for tunnel_dst_rewrite
   nop -> tunnel_smac_rewrite
   rewrite_tunnel_ipv4_dst -> tunnel_smac_rewrite
   rewrite_tunnel_ipv6_dst -> tunnel_smac_rewrite
action mapping for tunnel_smac_rewrite
   nop -> mtu
   rewrite_tunnel_smac -> mtu
action mapping for tunnel_dmac_rewrite
   nop -> tunnel_rewrite
   rewrite_tunnel_dmac -> tunnel_rewrite
action mapping for tunnel_to_mgid_mapping
   nop -> _condition_43
   set_tunnel_mgid -> _condition_43
action mapping for ingress_l4_src_port
   nop -> ingress_l4_dst_port
   set_ingress_src_port_range_id -> ingress_l4_dst_port
action mapping for ingress_l4_dst_port
   nop -> _condition_14
   set_ingress_dst_port_range_id -> _condition_14
action mapping for mac_acl
   nop -> _condition_21
   acl_deny -> _condition_21
   acl_permit -> _condition_21
   acl_redirect_nexthop -> _condition_21
   acl_redirect_ecmp -> _condition_21
   acl_mirror -> _condition_21
action mapping for ip_acl
   nop -> _condition_21
   acl_deny -> _condition_21
   acl_permit -> _condition_21
   acl_redirect_nexthop -> _condition_21
   acl_redirect_ecmp -> _condition_21
   acl_mirror -> _condition_21
action mapping for ipv6_acl
   nop -> _condition_21
   acl_deny -> _condition_21
   acl_permit -> _condition_21
   acl_redirect_nexthop -> _condition_21
   acl_redirect_ecmp -> _condition_21
   acl_mirror -> _condition_21
action mapping for ipv4_racl
   nop -> _condition_24
   racl_deny -> _condition_24
   racl_permit -> _condition_24
   racl_redirect_nexthop -> _condition_24
   racl_redirect_ecmp -> _condition_24
action mapping for ipv6_racl
   nop -> _condition_26
   racl_deny -> _condition_26
   racl_permit -> _condition_26
   racl_redirect_nexthop -> _condition_26
   racl_redirect_ecmp -> _condition_26
action mapping for acl_stats
   acl_stats_update -> storm_control_stats
action mapping for racl_stats
   racl_stats_update -> _condition_36
action mapping for system_acl
   nop -> _condition_46
   drop_packet -> _condition_46
   drop_packet_with_reason -> _condition_46
   redirect_to_cpu -> _condition_46
   redirect_to_cpu_with_reason -> _condition_46
   copy_to_cpu -> _condition_46
   copy_to_cpu_with_reason -> _condition_46
action mapping for drop_stats
   drop_stats_update -> --END_OF_PIPELINE--
action mapping for egress_system_acl
   nop -> --END_OF_PIPELINE--
   drop_packet -> --END_OF_PIPELINE--
   egress_copy_to_cpu -> --END_OF_PIPELINE--
   egress_redirect_to_cpu -> --END_OF_PIPELINE--
   egress_copy_to_cpu_with_reason -> --END_OF_PIPELINE--
   egress_redirect_to_cpu_with_reason -> --END_OF_PIPELINE--
   egress_mirror_coal_hdr -> --END_OF_PIPELINE--
   egress_insert_cpu_timestamp -> --END_OF_PIPELINE--
   egress_mirror -> --END_OF_PIPELINE--
   egress_mirror_and_drop -> --END_OF_PIPELINE--
action mapping for ipv4_multicast_bridge_star_g
   nop -> _condition_30
   multicast_bridge_star_g_hit -> _condition_30
action mapping for ipv4_multicast_bridge
   on_miss -> ipv4_multicast_bridge_star_g
   multicast_bridge_s_g_hit -> _condition_30
action mapping for ipv4_multicast_route_star_g
   multicast_route_star_g_miss -> _condition_34
   multicast_route_sm_star_g_hit -> _condition_34
   multicast_route_bidir_star_g_hit -> _condition_34
action mapping for ipv4_multicast_route
   on_miss -> ipv4_multicast_route_star_g
   multicast_route_s_g_hit -> _condition_34
action mapping for ipv6_multicast_bridge_star_g
   nop -> _condition_33
   multicast_bridge_star_g_hit -> _condition_33
action mapping for ipv6_multicast_bridge
   on_miss -> ipv6_multicast_bridge_star_g
   multicast_bridge_s_g_hit -> _condition_33
action mapping for ipv6_multicast_route_star_g
   multicast_route_star_g_miss -> _condition_34
   multicast_route_sm_star_g_hit -> _condition_34
   multicast_route_bidir_star_g_hit -> _condition_34
action mapping for ipv6_multicast_route
   on_miss -> ipv6_multicast_route_star_g
   multicast_route_s_g_hit -> _condition_34
action mapping for bd_flood
   nop -> _condition_43
   set_bd_flood_mc_index -> _condition_43
action mapping for rid
   nop -> _condition_52
   outer_replica_from_rid -> _condition_52
   encap_replica_from_rid -> _condition_52
   inner_replica_from_rid -> _condition_52
   unicast_replica_from_rid -> _condition_52
action mapping for mcast_egress_ifindex
   set_egress_ifindex_from_rid -> _condition_54
action mapping for replica_type
   nop -> egress_port_mapping
   set_replica_copy_bridged -> egress_port_mapping
action mapping for fwd_result
   nop -> _condition_39
   set_l2_redirect -> _condition_39
   set_fib_redirect -> _condition_39
   set_cpu_redirect -> _condition_39
   set_acl_redirect -> _condition_39
   set_racl_redirect -> _condition_39
   set_rmac_non_ip_drop -> _condition_39
   set_multicast_route -> _condition_39
   set_multicast_rpf_fail_bridge -> _condition_39
   set_multicast_rpf_fail_flood_to_mrouters -> _condition_39
   set_multicast_bridge -> _condition_39
   set_multicast_miss_flood -> _condition_39
   set_multicast_miss_flood_to_mrouters -> _condition_39
   set_multicast_drop -> _condition_39
action mapping for ecmp_group
   nop -> _condition_41
   set_ecmp_nexthop_details -> _condition_41
   set_ecmp_nexthop_details_with_tunnel -> _condition_41
   set_ecmp_nexthop_details_for_post_routed_flood -> _condition_41
action mapping for nexthop
   nop -> _condition_41
   set_nexthop_details -> _condition_41
   set_nexthop_details_with_tunnel -> _condition_41
   set_nexthop_details_for_post_routed_flood -> _condition_41
   set_nexthop_details_for_glean -> _condition_41
   set_nexthop_details_for_drop -> _condition_41
action mapping for rewrite
   nop -> _condition_61
   set_l2_rewrite -> _condition_61
   set_l2_rewrite_with_tunnel -> _condition_61
   set_l3_rewrite_with_tunnel -> _condition_61
   set_l3_rewrite_with_tunnel_vnid -> _condition_61
   set_l3_rewrite_with_tunnel_and_ingress_vrf -> _condition_61
   set_l3_rewrite -> _condition_61
   set_mpls_push_rewrite_l2 -> _condition_61
   set_mpls_swap_push_rewrite_l3 -> _condition_61
   set_mpls_push_rewrite_l3 -> _condition_61
action mapping for storm_control_stats
   nop -> racl_stats
   __meta_init_miss_action_storm_control_stats__ -> racl_stats
action mapping for storm_control
   nop -> _condition_12
   set_storm_control_meter -> _condition_12
action mapping for fabric_ingress_dst_lkp
   nop -> _condition_7
   terminate_cpu_packet -> _condition_7
action mapping for mirror
   nop -> _condition_53
   set_mirror_bd -> _condition_53
   ipv4_erspan_t3_rewrite_with_eth_hdr -> _condition_53
   ipv4_erspan_t3_rewrite_with_eth_hdr_and_vlan_tag -> _condition_53
action mapping for compute_ipv4_hashes
   compute_lkp_ipv4_hash -> compute_other_hashes
   __meta_init_miss_action_compute_ipv4_hashes__ -> compute_other_hashes
action mapping for compute_ipv6_hashes
   compute_lkp_ipv6_hash -> compute_other_hashes
   __meta_init_miss_action_compute_ipv6_hashes__ -> compute_other_hashes
action mapping for compute_non_ip_hashes
   compute_lkp_non_ip_hash -> compute_other_hashes
   __meta_init_miss_action_compute_non_ip_hashes__ -> compute_other_hashes
action mapping for compute_other_hashes
   compute_other_hashes -> ingress_bd_stats
action mapping for __egress_pkt_length_update__
   __egress_bridged_adjust__ -> _condition_49
true/false mapping for _condition_0
   False -> ingress_port_properties
   True -> ingress_port_mapping
true/false mapping for _condition_1
   False -> _condition_2
   True -> validate_outer_ipv4_packet
true/false mapping for _condition_2
   False -> _condition_3
   True -> validate_outer_ipv6_packet
true/false mapping for _condition_3
   False -> _condition_4
   True -> validate_mpls_packet
true/false mapping for _condition_4
   False -> port_vlan_to_bd_mapping
   True -> cpu_packet_transform
true/false mapping for _condition_5
   False -> _condition_6
   True -> spanning_tree
true/false mapping for _condition_6
   False -> _condition_7
   True -> fabric_ingress_dst_lkp
true/false mapping for _condition_7
   False -> _condition_10
   True -> outer_rmac
true/false mapping for _condition_8
   False -> _condition_9
   True -> ipv4_src_vtep
true/false mapping for _condition_9
   False -> _condition_10
   True -> ipv6_src_vtep
true/false mapping for _condition_10
   False -> adjust_lkp_fields
   True -> tunnel_check
true/false mapping for _condition_11
   False -> _condition_12
   True -> storm_control
true/false mapping for _condition_12
   False -> _condition_34
   True -> _condition_13
true/false mapping for _condition_13
   False -> ingress_l4_src_port
   True -> validate_packet
true/false mapping for _condition_14
   False -> _condition_15
   True -> smac
true/false mapping for _condition_15
   False -> _condition_16
   True -> dmac
true/false mapping for _condition_16
   False -> _condition_18
   True -> _condition_17
true/false mapping for _condition_17
   False -> _condition_21
   True -> mac_acl
true/false mapping for _condition_18
   False -> _condition_21
   True -> _condition_19
true/false mapping for _condition_19
   False -> _condition_20
   True -> ip_acl
true/false mapping for _condition_20
   False -> _condition_21
   True -> ipv6_acl
true/false mapping for _condition_21
   False -> _condition_28
   True -> rmac
true/false mapping for _condition_22
   False -> _condition_34
   True -> _condition_23
true/false mapping for _condition_23
   False -> _condition_25
   True -> ipv4_racl
true/false mapping for _condition_24
   False -> ipv4_fib
   True -> ipv4_urpf
true/false mapping for _condition_25
   False -> _condition_27
   True -> ipv6_racl
true/false mapping for _condition_26
   False -> ipv6_fib
   True -> ipv6_urpf
true/false mapping for _condition_27
   False -> _condition_34
   True -> urpf_bd
true/false mapping for _condition_28
   False -> _condition_31
   True -> _condition_29
true/false mapping for _condition_29
   False -> _condition_30
   True -> ipv4_multicast_bridge
true/false mapping for _condition_30
   False -> _condition_34
   True -> ipv4_multicast_route
true/false mapping for _condition_31
   False -> _condition_34
   True -> _condition_32
true/false mapping for _condition_32
   False -> _condition_33
   True -> ipv6_multicast_bridge
true/false mapping for _condition_33
   False -> _condition_34
   True -> ipv6_multicast_route
true/false mapping for _condition_34
   False -> _condition_35
   True -> compute_ipv4_hashes
true/false mapping for _condition_35
   False -> compute_non_ip_hashes
   True -> compute_ipv6_hashes
true/false mapping for _condition_36
   False -> _condition_39
   True -> fwd_result
true/false mapping for _condition_39
   False -> nexthop
   True -> ecmp_group
true/false mapping for _condition_41
   False -> _condition_42
   True -> bd_flood
true/false mapping for _condition_42
   False -> lag_group
   True -> tunnel_to_mgid_mapping
true/false mapping for _condition_43
   False -> _condition_44
   True -> learn_notify
true/false mapping for _condition_44
   False -> --END_OF_PIPELINE--
   True -> _condition_45
true/false mapping for _condition_45
   False -> --END_OF_PIPELINE--
   True -> system_acl
true/false mapping for _condition_46
   False -> --END_OF_PIPELINE--
   True -> drop_stats
true/false mapping for _condition_49
   False -> capture_tstamp
   True -> _condition_50
true/false mapping for _condition_50
   False -> capture_tstamp
   True -> _condition_51
true/false mapping for _condition_51
   False -> _condition_52
   True -> rid
true/false mapping for _condition_52
   False -> mirror
   True -> _condition_53
true/false mapping for _condition_53
   False -> _condition_54
   True -> mcast_egress_ifindex
true/false mapping for _condition_54
   False -> egress_port_mapping
   True -> replica_type
true/false mapping for _condition_56
   False -> _condition_57
   True -> vlan_decap
true/false mapping for _condition_57
   False -> _condition_59
   True -> _condition_58
true/false mapping for _condition_58
   False -> _condition_59
   True -> tunnel_decap_process_outer
true/false mapping for _condition_59
   False -> _condition_61
   True -> rewrite
true/false mapping for _condition_61
   False -> _condition_64
   True -> egress_bd_map
true/false mapping for _condition_62
   False -> egress_bd_stats
   True -> l3_rewrite
true/false mapping for _condition_64
   False -> mtu
   True -> _condition_65
true/false mapping for _condition_65
   False -> tunnel_encap_process_inner
   True -> egress_vni
true/false mapping for _condition_66
   False -> capture_tstamp
   True -> egress_vlan_xlate
true/false mapping for _condition_67
   False -> --END_OF_PIPELINE--
   True -> egress_system_acl
