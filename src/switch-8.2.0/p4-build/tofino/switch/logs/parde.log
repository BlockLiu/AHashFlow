+---------------------------------------------------------------------+
|  Log file: parde.log                                                |
|  Compiler version: 5.8.0 (7069cde)                                  |
|  Created on: Sun Nov 17 06:21:48 2019                               |
|  Run ID: 5264f50f8fd548e5                                           |
+---------------------------------------------------------------------+

># Begin digest init (pre-PHV)
>## Gress 0
Adding reserved i2e digest to drop ingress packets in the TM.
  Added record for data 'dummy<Reserved I2E Session>' with id 0
Found digest generation call in action 'p4_action.acl_mirror', receiver 0x5E, data 'p4_field_list.i2e_mirror_info'
  Added record for data 'p4_field_list.i2e_mirror_info' with id 1
Found digest generation call in action 'p4_action.generate_learn_notify', receiver 0x0, data 'p4_field_list.mac_learn_digest'
  Created new digest object for receiver
  Added record for data 'p4_field_list.mac_learn_digest' with id 0
>## Gress 1
Found digest generation call in action 'p4_action.egress_copy_to_cpu', receiver 0x5F, data 'p4_field_list.cpu_info'
  Created new digest object for receiver
  Added record for data 'p4_field_list.cpu_info' with id 0
Found digest generation call in action 'p4_action.egress_redirect_to_cpu', receiver 0x5F, data 'p4_field_list.cpu_info'
Found digest generation call in action 'p4_action.egress_copy_to_cpu_with_reason', receiver 0x5F, data 'p4_field_list.cpu_info'
Found digest generation call in action 'p4_action.egress_redirect_to_cpu_with_reason', receiver 0x5F, data 'p4_field_list.cpu_info'
Found digest generation call in action 'p4_action.egress_mirror', receiver 0x5F, data 'p4_field_list.e2e_mirror_info'
  Added record for data 'p4_field_list.e2e_mirror_info' with id 1
>## Rewrite CLONE_I2E_DIGEST_RCVR ids
ID 0 -> 8
ID 1 -> 9
>## Rewrite CLONE_E2E_DIGEST_RCVR ids
ID 0 -> 24
ID 1 -> 25
># End digest init (pre-PHV)
># Begin digest PHV reservations
+8 bit for gress 0 receiver 0x5E
+8 bit for gress 0 receiver 0x0
+8 bit for gress 1 receiver 0x5F
Reserve POV 3 for clone_src indicator
># End digest PHV reservations
># Begin digest init (post-PHV)
>## Gress 0 receiver 0x5E
  Allocated 8-bit selector '_selector_CLONE_I2E_DIGEST_RCVR' to address 64
  Initializing digest for object '<Reserved I2E Session>'
  PHV layout: 
  Field offsets: {}
  Initializing digest for object 'p4_field_list.i2e_mirror_info'
  PHV layout: 64(8B),0(32B),2(32B)
  Field offsets: {'i2e_metadata.mirror_session_id': (7, 7), 'i2e_metadata.ingress_tstamp': (1, 7)}
>## Gress 0 receiver 0x0
  Allocated 8-bit selector '_selector_FLOW_LRN_DIGEST_RCVR' to address 65
  Initializing digest for object 'p4_field_list.mac_learn_digest'
  PHV layout: 65(8B),128(16B),129(16B),190(16B),6(32B)
  Field offsets: {'ingress_metadata.ifindex': (3, 5), 'l2_metadata.lkp_mac_sa': (5, 7), 'ingress_metadata.bd': (1, 5)}
>## Gress 1 receiver 0x5F
  Allocated 8-bit selector '_selector_CLONE_E2E_DIGEST_RCVR' to address 80
  Initializing digest for object 'p4_field_list.cpu_info'
  PHV layout: 80(8B),144(16B),146(16B),148(16B),150(16B)
  Field offsets: {'ingress_metadata.ifindex': (3, 5), 'ingress_metadata.ingress_port': (7, 0), 'fabric_metadata.reason_code': (5, 7), 'ingress_metadata.bd': (1, 5)}
  Initializing digest for object 'p4_field_list.e2e_mirror_info'
  PHV layout: 80(8B),160(16B),16(32B)
  Field offsets: {'i2e_metadata.mirror_session_id': (1, 7), 'i2e_metadata.ingress_tstamp': (3, 7)}
CLONE_I2E_DIGEST_RCVR mirror ID is at address 58
CLONE_E2E_DIGEST_RCVR mirror ID is at address 199
># End digest init (post-PHV)
Bridge-MF:ingress_metadata.bd
Bridge-MF:ingress_metadata.ifindex
Bridge-MF:fabric_metadata.reason_code
Bridge-MF:tunnel_metadata.tunnel_terminate
Bridge-MF:l3_metadata.routed
Bridge-MF:l3_metadata.vrf
Bridge-MF:l2_metadata.lkp_pkt_type
Bridge-MF:ig_intr_md_for_tm.packet_color
Bridge-MF:egress_metadata.bypass
Bridge-MF:egress_metadata.capture_tstamp_on_tx
Bridge-MF:ingress_metadata.egress_ifindex
Bridge-MF:tunnel_metadata.ingress_tunnel_type
Bridge-MF:ingress_metadata.ingress_port
Bridge-MF:hash_metadata.entropy_hash
Bridge-MF:i2e_metadata.ingress_tstamp
Bridge-MF:tunnel_metadata.tunnel_dst_index
Bridge-MF:l3_metadata.nexthop_index
Bridge-MF:i2e_metadata.ingress_tstamp_hi
Bridge-MF:i2e_metadata.mirror_session_id
Found parser entry point: start
Found parser entry point: start_e2e_mirrored
Found parser entry point: start_i2e_mirrored
># Begin unroll of HLIR parse graph
>## Create shadow parse graph and find loops
>## Entrypoint 'p4_parse_state.start'
Creating shadow state: 'p4_parse_state.start' -> 'shadow_state (start, 140071069895248)'
Creating shadow state: 'p4_parse_state.parse_ethernet' -> 'shadow_state (parse_ethernet, 140071080389584)'
Creating shadow state: 'p4_parse_state.parse_llc_header' -> 'shadow_state (parse_llc_header, 140071080389200)'
Creating shadow state: 'p4_parse_state.parse_snap_header' -> 'shadow_state (parse_snap_header, 140071080390160)'
Creating shadow state: 'p4_parse_state.parse_vlan' -> 'shadow_state (parse_vlan, 140071080388688)'
Creating shadow state: 'p4_parse_state.parse_mpls' -> 'shadow_state (parse_mpls, 140071080389072)'
Creating shadow state: 'p4_parse_state.parse_mpls_bos' -> 'shadow_state (parse_mpls_bos, 140071080387152)'
Creating shadow state: 'p4_parse_state.parse_mpls_inner_ipv4' -> 'shadow_state (parse_mpls_inner_ipv4, 140071080390608)'
Creating shadow state: 'p4_parse_state.parse_inner_ipv4' -> 'shadow_state (parse_inner_ipv4, 140071080390224)'
Creating shadow state: 'p4_parse_state.parse_inner_icmp' -> 'shadow_state (parse_inner_icmp, 140071080389392)'
Creating shadow state: 'p4_parse_state.parse_inner_ipv6' -> 'shadow_state (parse_inner_ipv6, 140071080388304)'
Creating shadow state: 'p4_parse_state.parse_inner_tcp' -> 'shadow_state (parse_inner_tcp, 140071080389648)'
Creating shadow state: 'p4_parse_state.parse_inner_udp' -> 'shadow_state (parse_inner_udp, 140071080386896)'
Creating shadow state: 'p4_parse_state.parse_mpls_inner_ipv6' -> 'shadow_state (parse_mpls_inner_ipv6, 140071080388816)'
Creating shadow state: 'p4_parse_state.parse_ipv6_in_ip' -> 'shadow_state (parse_ipv6_in_ip, 140071080389712)'
Creating shadow state: 'p4_parse_state.parse_ipv4_option_32b' -> 'shadow_state (parse_ipv4_option_32b, 140071080389840)'
Creating shadow state: 'p4_parse_state.parse_icmp' -> 'shadow_state (parse_icmp, 140071080387280)'
Creating shadow state: 'p4_parse_state.parse_set_prio_med' -> 'shadow_state (parse_set_prio_med, 140071080387728)'
Creating shadow state: 'p4_parse_state.parse_ipv4_no_options' -> 'shadow_state (parse_ipv4_no_options, 140071080390544)'
Creating shadow state: 'p4_parse_state.parse_tcp' -> 'shadow_state (parse_tcp, 140071080388624)'
Creating shadow state: 'p4_parse_state.parse_ipv6' -> 'shadow_state (parse_ipv6, 140071080388048)'
Creating shadow state: 'p4_parse_state.parse_ipv4_in_ip' -> 'shadow_state (parse_ipv4_in_ip, 140071080390352)'
Creating shadow state: 'p4_parse_state.parse_udp' -> 'shadow_state (parse_udp, 140071080389520)'
Creating shadow state: 'p4_parse_state.parse_vxlan' -> 'shadow_state (parse_vxlan, 140071080386832)'
Creating shadow state: 'p4_parse_state.parse_inner_ethernet' -> 'shadow_state (parse_inner_ethernet, 140071080387920)'
Creating shadow state: 'p4_parse_state.parse_nvgre' -> 'shadow_state (parse_nvgre, 140071080387792)'
Creating shadow state: 'p4_parse_state.parse_gre' -> 'shadow_state (parse_gre, 140071080389904)'
Creating shadow state: 'p4_parse_state.parse_gre_ipv4' -> 'shadow_state (parse_gre_ipv4, 140071080387024)'
Creating shadow state: 'p4_parse_state.parse_gre_ipv6' -> 'shadow_state (parse_gre_ipv6, 140071080387088)'
Creating shadow state: 'p4_parse_state.parse_erspan_t3' -> 'shadow_state (parse_erspan_t3, 140071080387664)'
Creating shadow state: 'p4_parse_state.parse_eompls' -> 'shadow_state (parse_eompls, 140071080387536)'
Creating shadow state: 'p4_parse_state.parse_geneve' -> 'shadow_state (parse_geneve, 140071080390480)'
Creating shadow state: 'p4_parse_state.parse_sflow' -> 'shadow_state (parse_sflow, 140071080389776)'
Creating shadow state: 'p4_parse_state.parse_qinq_vlan' -> 'shadow_state (parse_qinq_vlan, 140071080387408)'
Creating shadow state: 'p4_parse_state.parse_ipv4' -> 'shadow_state (parse_ipv4, 140071080387344)'
Creating shadow state: 'p4_parse_state.parse_ipv4_other' -> 'shadow_state (parse_ipv4_other, 140071080388176)'
Creating shadow state: 'p4_parse_state.parse_fabric_payload_header' -> 'shadow_state (parse_fabric_payload_header, 140071080387472)'
Creating shadow state: 'p4_parse_state.parse_qinq' -> 'shadow_state (parse_qinq, 140071080387856)'
Creating shadow state: 'p4_parse_state.parse_arp_rarp' -> 'shadow_state (parse_arp_rarp, 140071080389328)'
Creating shadow state: 'p4_parse_state.parse_arp_rarp_req' -> 'shadow_state (parse_arp_rarp_req, 140071080386768)'
Creating shadow state: 'p4_parse_state.parse_arp_rarp_res' -> 'shadow_state (parse_arp_rarp_res, 140071080388432)'
Creating shadow state: 'p4_parse_state.parse_set_prio_high' -> 'shadow_state (parse_set_prio_high, 140071080388368)'
Creating shadow state: 'p4_parse_state.parse_fabric_header_cpu' -> 'shadow_state (parse_fabric_header_cpu, 140071080390288)'
Creating shadow state: 'p4_parse_state.parse_fabric_timestamp_header' -> 'shadow_state (parse_fabric_timestamp_header, 140071080388752)'
Creating shadow state: 'p4_parse_state.parse_fabric_header' -> 'shadow_state (parse_fabric_header, 140071080389968)'
Creating shadow state: 'p4_parse_state.parse_igmp' -> 'shadow_state (parse_igmp, 140071080389008)'
>## Entrypoint 'p4_parse_state.start_e2e_mirrored'
Creating shadow state: 'p4_parse_state.start_e2e_mirrored' -> 'shadow_state (start_e2e_mirrored, 140071080388560)'
>## Entrypoint 'p4_parse_state.start_i2e_mirrored'
Creating shadow state: 'p4_parse_state.start_i2e_mirrored' -> 'shadow_state (start_i2e_mirrored, 140071080403664)'
>## Loop [p4_parse_state.parse_mpls]
Validating loop shape
Validating loop extractions
Max iterations for loop states:(shadow_state (parse_mpls, 140071080389072),):3
Unrolling loop to 3 iterations
Created error state: shadow_state (loop_[p4_parse_state.parse_mpls]_oob, 140071080403728)
  Error state will perform action: (set, <p4_hlir.hlir.p4_headers.p4_field object at 0x7f64e17eef90>, 49152)
  Error state will exit to: p4_conditional_node._condition_0
Processing 'shadow_state (parse_mpls__it0, 140071080389072)'
  State transitions: [(0, shadow_state (parse_mpls, 140071080403024)), (1, shadow_state (parse_mpls_bos, 140071080387152)), (P4_DEFAULT, p4_conditional_node._condition_0)]
  State calls: [(extract, p4_header_instance.mpls[0])]
Processing 'shadow_state (parse_mpls__it1, 140071080403024)'
  State transitions: [(0, shadow_state (parse_mpls, 140071080403600)), (1, shadow_state (parse_mpls_bos, 140071080387152)), (P4_DEFAULT, p4_conditional_node._condition_0)]
  State calls: [(extract, p4_header_instance.mpls[1])]
Processing 'shadow_state (parse_mpls__it2, 140071080403600)'
  State transitions: [(0, shadow_state (loop_[p4_parse_state.parse_mpls]_oob, 140071080403728)), (1, shadow_state (parse_mpls_bos, 140071080387152)), (P4_DEFAULT, p4_conditional_node._condition_0)]
  State calls: [(extract, p4_header_instance.mpls[2])]
Final state map: {shadow_state (parse_mpls__it0, 140071080389072): [shadow_state (parse_mpls__it0, 140071080389072), shadow_state (parse_mpls__it1, 140071080403024), shadow_state (parse_mpls__it2, 140071080403600)]}
># End unroll of HLIR parse graph
># Begin deparser init
>## Create records for gress 0
Skipping metadata header 'p4_header_instance.standard_metadata'
Skipping intrinsic header 'p4_header_instance.ig_prsr_ctrl'
Skipping intrinsic header 'p4_header_instance.ig_intr_md'
Skipping intrinsic header 'p4_header_instance.ig_intr_md_from_parser_aux'
Skipping intrinsic header 'p4_header_instance.ig_intr_md_for_tm'
Skipping intrinsic header 'p4_header_instance.ig_intr_md_for_mb'
Skipping intrinsic header 'p4_header_instance.eg_intr_md'
Skipping intrinsic header 'p4_header_instance.eg_intr_md_from_parser_aux'
Skipping intrinsic header 'p4_header_instance.eg_intr_md_for_mb'
Skipping intrinsic header 'p4_header_instance.eg_intr_md_for_oport'
Created record for 'p4_header_instance.ethernet'
Created record for 'p4_header_instance.llc_header'
Created record for 'p4_header_instance.snap_header'
Created record for 'p4_header_instance.vlan_tag_[0]'
Created record for 'p4_header_instance.vlan_tag_[1]'
Skipping virtual header 'p4_header_instance.vlan_tag_[next]'
Skipping virtual header 'p4_header_instance.vlan_tag_[last]'
Created record for 'p4_header_instance.mpls[0]'
Created record for 'p4_header_instance.mpls[1]'
Created record for 'p4_header_instance.mpls[2]'
Skipping virtual header 'p4_header_instance.mpls[next]'
Skipping virtual header 'p4_header_instance.mpls[last]'
Created record for 'p4_header_instance.ipv4'
Created record for 'p4_header_instance.ipv4_option_32b'
Created record for 'p4_header_instance.ipv6'
Created record for 'p4_header_instance.icmp'
Created record for 'p4_header_instance.igmp'
Created record for 'p4_header_instance.tcp'
Created record for 'p4_header_instance.udp'
Created record for 'p4_header_instance.gre'
Created record for 'p4_header_instance.nvgre'
Created record for 'p4_header_instance.inner_ethernet'
Created record for 'p4_header_instance.inner_ipv4'
Created record for 'p4_header_instance.inner_ipv6'
Created record for 'p4_header_instance.erspan_t3_header'
Created record for 'p4_header_instance.vxlan'
Created record for 'p4_header_instance.genv'
Created record for 'p4_header_instance.inner_icmp'
Created record for 'p4_header_instance.inner_tcp'
Created record for 'p4_header_instance.inner_udp'
Created record for 'p4_header_instance.fabric_header'
Created record for 'p4_header_instance.fabric_header_cpu'
Created record for 'p4_header_instance.fabric_payload_header'
Created record for 'p4_header_instance.fabric_header_timestamp'
Skipping metadata header 'p4_header_instance.ingress_metadata'
Skipping metadata header 'p4_header_instance.egress_metadata'
Skipping metadata header 'p4_header_instance.intrinsic_metadata'
Skipping metadata header 'p4_header_instance.global_config_metadata'
Skipping metadata header 'p4_header_instance.l2_metadata'
Skipping metadata header 'p4_header_instance.l3_metadata'
Skipping metadata header 'p4_header_instance.ipv4_metadata'
Skipping metadata header 'p4_header_instance.ipv6_metadata'
Skipping metadata header 'p4_header_instance.tunnel_metadata'
Skipping metadata header 'p4_header_instance.acl_metadata'
Skipping metadata header 'p4_header_instance.i2e_metadata'
Skipping metadata header 'p4_header_instance.nat_metadata'
Skipping metadata header 'p4_header_instance.multicast_metadata'
Skipping metadata header 'p4_header_instance.nexthop_metadata'
Skipping metadata header 'p4_header_instance.fabric_metadata'
Skipping metadata header 'p4_header_instance.hash_metadata'
Skipping metadata header 'p4_header_instance.meter_metadata'
Skipping metadata header 'p4_header_instance.qos_metadata'
Skipping metadata header 'p4_header_instance.__md_ingress'
Skipping metadata header 'p4_header_instance.__md_egress'
>## Build record ordering for gress 0
>## Build field ordering for record 'ethernet'
>## Build field ordering for record 'fabric_header'
>## Build field ordering for record 'fabric_header_cpu'
>## Build field ordering for record 'fabric_header_timestamp'
>## Build field ordering for record 'fabric_payload_header'
>## Build field ordering for record 'llc_header'
>## Build field ordering for record 'snap_header'
>## Build field ordering for record 'vlan_tag_[0]'
>## Build field ordering for record 'vlan_tag_[1]'
>## Build field ordering for record 'ipv4'
>## Build field ordering for record 'ipv4_option_32b'
>## Build field ordering for record 'igmp'
>## Build field ordering for record 'ipv6'
>## Build field ordering for record 'udp'
>## Build field ordering for record 'genv'
>## Build field ordering for record 'gre'
>## Build field ordering for record 'nvgre'
>## Build field ordering for record 'vxlan'
>## Build field ordering for record 'mpls[0]'
>## Build field ordering for record 'mpls[1]'
>## Build field ordering for record 'mpls[2]'
>## Build field ordering for record 'inner_ethernet'
>## Build field ordering for record 'inner_ipv6'
>## Build field ordering for record 'inner_ipv4'
>## Build field ordering for record 'inner_udp'
>## Build field ordering for record 'tcp'
>## Build field ordering for record 'inner_tcp'
>## Build field ordering for record 'inner_icmp'
>## Build field ordering for record 'icmp'
>## Create records for gress 1
Skipping metadata header 'p4_header_instance.standard_metadata'
Skipping intrinsic header 'p4_header_instance.ig_prsr_ctrl'
Skipping intrinsic header 'p4_header_instance.ig_intr_md'
Skipping intrinsic header 'p4_header_instance.ig_intr_md_from_parser_aux'
Skipping intrinsic header 'p4_header_instance.ig_intr_md_for_tm'
Skipping intrinsic header 'p4_header_instance.ig_intr_md_for_mb'
Skipping intrinsic header 'p4_header_instance.eg_intr_md'
Skipping intrinsic header 'p4_header_instance.eg_intr_md_from_parser_aux'
Skipping intrinsic header 'p4_header_instance.eg_intr_md_for_mb'
Skipping intrinsic header 'p4_header_instance.eg_intr_md_for_oport'
Created record for 'p4_header_instance.ethernet'
Created record for 'p4_header_instance.llc_header'
Created record for 'p4_header_instance.snap_header'
Created record for 'p4_header_instance.vlan_tag_[0]'
Created record for 'p4_header_instance.vlan_tag_[1]'
Skipping virtual header 'p4_header_instance.vlan_tag_[next]'
Skipping virtual header 'p4_header_instance.vlan_tag_[last]'
Created record for 'p4_header_instance.mpls[0]'
Created record for 'p4_header_instance.mpls[1]'
Created record for 'p4_header_instance.mpls[2]'
Skipping virtual header 'p4_header_instance.mpls[next]'
Skipping virtual header 'p4_header_instance.mpls[last]'
Created record for 'p4_header_instance.ipv4'
Created record for 'p4_header_instance.ipv4_option_32b'
Created record for 'p4_header_instance.ipv6'
Created record for 'p4_header_instance.icmp'
Created record for 'p4_header_instance.igmp'
Created record for 'p4_header_instance.tcp'
Created record for 'p4_header_instance.udp'
Created record for 'p4_header_instance.gre'
Created record for 'p4_header_instance.nvgre'
Created record for 'p4_header_instance.inner_ethernet'
Created record for 'p4_header_instance.inner_ipv4'
Created record for 'p4_header_instance.inner_ipv6'
Created record for 'p4_header_instance.erspan_t3_header'
Created record for 'p4_header_instance.vxlan'
Created record for 'p4_header_instance.genv'
Created record for 'p4_header_instance.inner_icmp'
Created record for 'p4_header_instance.inner_tcp'
Created record for 'p4_header_instance.inner_udp'
Created record for 'p4_header_instance.fabric_header'
Created record for 'p4_header_instance.fabric_header_cpu'
Created record for 'p4_header_instance.fabric_payload_header'
Created record for 'p4_header_instance.fabric_header_timestamp'
Skipping metadata header 'p4_header_instance.ingress_metadata'
Skipping metadata header 'p4_header_instance.egress_metadata'
Skipping metadata header 'p4_header_instance.intrinsic_metadata'
Skipping metadata header 'p4_header_instance.global_config_metadata'
Skipping metadata header 'p4_header_instance.l2_metadata'
Skipping metadata header 'p4_header_instance.l3_metadata'
Skipping metadata header 'p4_header_instance.ipv4_metadata'
Skipping metadata header 'p4_header_instance.ipv6_metadata'
Skipping metadata header 'p4_header_instance.tunnel_metadata'
Skipping metadata header 'p4_header_instance.acl_metadata'
Skipping metadata header 'p4_header_instance.i2e_metadata'
Skipping metadata header 'p4_header_instance.nat_metadata'
Skipping metadata header 'p4_header_instance.multicast_metadata'
Skipping metadata header 'p4_header_instance.nexthop_metadata'
Skipping metadata header 'p4_header_instance.fabric_metadata'
Skipping metadata header 'p4_header_instance.hash_metadata'
Skipping metadata header 'p4_header_instance.meter_metadata'
Skipping metadata header 'p4_header_instance.qos_metadata'
Skipping metadata header 'p4_header_instance.__md_ingress'
Skipping metadata header 'p4_header_instance.__md_egress'
>## Build record ordering for gress 1
>## Build field ordering for record 'ethernet'
>## Build field ordering for record 'fabric_header'
>## Build field ordering for record 'fabric_header_cpu'
>## Build field ordering for record 'fabric_header_timestamp'
>## Build field ordering for record 'fabric_payload_header'
>## Build field ordering for record 'llc_header'
>## Build field ordering for record 'snap_header'
>## Build field ordering for record 'vlan_tag_[0]'
>## Build field ordering for record 'vlan_tag_[1]'
>## Build field ordering for record 'ipv4'
>## Build field ordering for record 'ipv4_option_32b'
>## Build field ordering for record 'igmp'
>## Build field ordering for record 'ipv6'
>## Build field ordering for record 'udp'
>## Build field ordering for record 'genv'
>## Build field ordering for record 'gre'
>## Build field ordering for record 'nvgre'
>## Build field ordering for record 'vxlan'
>## Build field ordering for record 'mpls[0]'
>## Build field ordering for record 'mpls[1]'
>## Build field ordering for record 'mpls[2]'
>## Build field ordering for record 'erspan_t3_header'
>## Build field ordering for record 'inner_ethernet'
>## Build field ordering for record 'inner_ipv6'
>## Build field ordering for record 'inner_ipv4'
>## Build field ordering for record 'inner_udp'
>## Build field ordering for record 'tcp'
>## Build field ordering for record 'inner_tcp'
>## Build field ordering for record 'inner_icmp'
>## Build field ordering for record 'icmp'
>## Create deparser bridge record
Bridge contains user-provided data
># End deparser init
Constructing parse graph for entry point start on ingress
State:parse_set_prio_med:Setting priority:3
State:parse_set_prio_high:Setting priority:5
Constructing parse graph for entry point start on egress
State:parse_set_prio_med:Setting priority:3
State:parse_set_prio_high:Setting priority:5
Constructing parse graph for entry point start_e2e_mirrored on egress
Constructing parse graph for entry point start_i2e_mirrored on egress
Egress intrinsic metadata unconditional extraction plan: ExtractionPlan { shift 64, extractions ['eg_intr_md.egress_port', 'eg_intr_md.egress_rid', 'eg_intr_md.egress_rid', 'eg_intr_md.deflection_flag', 'eg_intr_md.pkt_length'] }
Egress intrinsic metadata conditional extraction plan: ExtractionPlan { shift 0, extractions [] }
Writing 1 to phv117 starting at lsb 4.
># Begin scraping deparser POV allocation from raw PHV allocation
PHV layout: [66, 15, 15, 15, 15, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
>## Scraping individual POV records
POV 21 -> inner_ipv4
POV 22 -> inner_ipv6
POV 13 -> ipv6
POV 23 -> erspan_t3_header
POV 31 -> fabric_payload_header
POV 37 -> mpls[1]
POV 14 -> icmp
POV 36 -> mpls[0]
POV 26 -> inner_icmp
POV 35 -> vlan_tag_[1]
POV 15 -> igmp
POV 38 -> mpls[2]
POV 27 -> inner_tcp
POV 16 -> tcp
POV 8 -> ethernet
POV 17 -> udp
POV 29 -> fabric_header
POV 28 -> inner_udp
POV 18 -> gre
POV 24 -> vxlan
POV 34 -> vlan_tag_[0]
POV 30 -> fabric_header_cpu
POV 33 -> pov_bmeta
POV 19 -> nvgre
POV 20 -> inner_ethernet
POV 11 -> ipv4
POV 12 -> ipv4_option_32b
POV 9 -> llc_header
POV 25 -> genv
POV 10 -> snap_header
POV 32 -> fabric_header_timestamp
>## Setting up array bits
># End scraping deparser POV allocation from raw PHV allocation
># Begin parser POV rewrite
>## Filling in POV init state
>## Rewriting parser POV extractions
POV for metadata_bridge -> PHV 15 |= 0x2000000
POV for ethernet -> PHV 15 |= 0x1
POV for llc_header -> PHV 15 |= 0x2
POV for snap_header -> PHV 15 |= 0x4
POV for vlan_tag_[0] -> PHV 15 |= 0x4000000
POV for mpls[0] -> PHV 15 |= 0x10000000
POV for mpls[1] -> PHV 15 |= 0x20000000
POV for mpls[2] -> PHV 15 |= 0x40000000
POV for inner_ipv4 -> PHV 15 |= 0x2000
POV for inner_icmp -> PHV 15 |= 0x40000
POV for inner_tcp -> PHV 15 |= 0x80000
POV for inner_udp -> PHV 15 |= 0x100000
POV for inner_ipv6 -> PHV 15 |= 0x4000
POV for inner_ethernet -> PHV 15 |= 0x1000
POV for ipv4 -> PHV 15 |= 0x8
POV for icmp -> PHV 15 |= 0x40
POV for tcp -> PHV 15 |= 0x100
POV for udp -> PHV 15 |= 0x200
POV for vxlan -> PHV 15 |= 0x10000
POV for genv -> PHV 15 |= 0x20000
POV for gre -> PHV 15 |= 0x400
POV for nvgre -> PHV 15 |= 0x800
POV for erspan_t3_header -> PHV 15 |= 0x8000
POV for igmp -> PHV 15 |= 0x80
POV for ipv4 -> PHV 15 |= 0x8
POV for ipv4_option_32b -> PHV 15 |= 0x10
POV for ipv4 -> PHV 15 |= 0x8
POV for ipv6 -> PHV 15 |= 0x20
POV for vlan_tag_[0] -> PHV 15 |= 0x4000000
POV for vlan_tag_[1] -> PHV 15 |= 0x8000000
POV for fabric_header -> PHV 15 |= 0x200000
POV for fabric_header_cpu -> PHV 15 |= 0x400000
POV for fabric_header_timestamp -> PHV 15 |= 0x1000000
POV for fabric_payload_header -> PHV 15 |= 0x800000
POV for ig_intr_md -> dropped (no deparser record)
POV for ig_intr_md_from_parser_aux -> dropped (no deparser record)
>## Sampling not detected, deparsing at least 1 POV byte
>## Adding POV containers to metadata bridge: [66]
>## Set POV skip state's shift amount to 8
># Begin scraping deparser POV allocation from raw PHV allocation
PHV layout: [60, 60, 60, 60, 61, 61, 61, 61, 211, 211, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]
>## Scraping individual POV records
POV 5 -> 1
POV 39 -> inner_ipv4
POV 32 -> fabric_header
POV 12 -> ipv6
POV 65 -> tcp
POV 36 -> fabric_payload_header
POV 33 -> fabric_header_timestamp
POV 67 -> inner_icmp
POV 2 -> mpls[0]
POV 34 -> vlan_tag_[1]
POV 1 -> mpls[1]
POV 0 -> mpls[2]
POV 68 -> inner_tcp
POV 16 -> erspan_t3_header
POV 7 -> ethernet
POV 66 -> udp
POV 40 -> inner_ipv6
POV 69 -> inner_udp
POV 14 -> gre
POV 13 -> igmp
POV 6 -> vlan_tag_[0]
POV 35 -> fabric_header_cpu
POV 41 -> inner_ethernet
POV 15 -> nvgre
POV 10 -> ipv4
POV 37 -> vxlan
POV 11 -> ipv4_option_32b
POV 8 -> llc_header
POV 38 -> genv
POV 9 -> snap_header
POV 64 -> icmp
>## Setting up array bits
Array mpls maps to POV range 0-2
   array uses deposit-style push/pop with 3-bit padding
      msb_pad = 3 bits
      lsb_pad = 0 bits
Array mpls POV map: ['mpls[2]', 'mpls[1]', 'mpls[0]']
># End scraping deparser POV allocation from raw PHV allocation
># Begin parser POV rewrite
>## Filling in POV init state
PHV 60 |= 0x38
>## Rewriting parser POV extractions
POV for ethernet -> PHV 60 |= 0x80
POV for llc_header -> PHV 60 |= 0x100
POV for snap_header -> PHV 60 |= 0x200
POV for vlan_tag_[0] -> PHV 60 |= 0x40
POV for mpls[0] -> PHV 60 |= 0x4
POV for mpls[1] -> PHV 60 |= 0x2
POV for mpls[2] -> PHV 60 |= 0x1
POV for inner_ipv4 -> PHV 61 |= 0x80
POV for inner_icmp -> PHV 211 |= 0x8
POV for inner_tcp -> PHV 211 |= 0x10
POV for inner_udp -> PHV 211 |= 0x20
POV for inner_ipv6 -> PHV 61 |= 0x100
POV for inner_ethernet -> PHV 61 |= 0x200
POV for ipv4 -> PHV 60 |= 0x400
POV for icmp -> PHV 211 |= 0x1
POV for tcp -> PHV 211 |= 0x2
POV for udp -> PHV 211 |= 0x4
POV for vxlan -> PHV 61 |= 0x20
POV for genv -> PHV 61 |= 0x40
POV for gre -> PHV 60 |= 0x4000
POV for nvgre -> PHV 60 |= 0x8000
POV for erspan_t3_header -> PHV 60 |= 0x10000
POV for igmp -> PHV 60 |= 0x2000
POV for ipv4 -> PHV 60 |= 0x400
POV for ipv4_option_32b -> PHV 60 |= 0x800
POV for ipv4 -> PHV 60 |= 0x400
POV for ipv6 -> PHV 60 |= 0x1000
POV for vlan_tag_[0] -> PHV 60 |= 0x40
POV for vlan_tag_[1] -> PHV 61 |= 0x4
POV for fabric_header -> PHV 61 |= 0x1
POV for fabric_header_cpu -> PHV 61 |= 0x8
POV for fabric_header_timestamp -> PHV 61 |= 0x2
POV for fabric_payload_header -> PHV 61 |= 0x10
POV for ethernet -> PHV 60 |= 0x80
POV for ethernet -> PHV 60 |= 0x80
split_big_states: state='parse_inner_ipv6' split at offset=28
split_big_states: state='parse_ipv6' split at offset=28
Linear Chain parse_inner_tcp -> parse_inner_tcp//spilled
Try merge parse_inner_tcp <- parse_inner_tcp//spilled
merge output at offset 128
Ran out of 32b extractors
states will not be partially merged since S2 is end of chain
Linear Chain parse_mpls_inner_ipv4 -> parse_inner_ipv4//spilled
Try merge parse_mpls_inner_ipv4 <- parse_inner_ipv4
Multiple paths to state S2 : parse_inner_ipv4 <- 6
Try merge parse_inner_ipv4 <- parse_inner_ipv4//spilled
cannot partial merge states with active checksums
Linear Chain parse_mpls_inner_ipv6 -> parse_inner_ipv6//split//spilled
Try merge parse_mpls_inner_ipv6 <- parse_inner_ipv6
Multiple paths to state S2 : parse_inner_ipv6 <- 5
Try merge parse_inner_ipv6 <- parse_inner_ipv6//spilled
merge output at offset 48
Ran out of 8b extractors
states will not be partially merged since S2 is part of spilled states
Try merge parse_inner_ipv6//spilled <- parse_inner_ipv6//spilled//spilled
merge output at offset 128
Ran out of 32b extractors
merge_offset = 0, complete_merge = False
Before Merge ------
S1: State : parse_inner_ipv6//spilled
shift: 0B
match_reservations: []
outputs[addr, width]: ([263, 32], [264, 32], [37, 32], [39, 32], [105, 8], [107, 8])
match_extractions: []
next state parse_inner_ipv6//spilled//spilled val 0 mask [False]
parent state parse_inner_ipv6


S2: State : parse_inner_ipv6//spilled//spilled
shift: 28B
match_reservations: []
outputs[addr, width]: ([41, 32], [43, 32], [45, 32])
branch promise on = nextHdr, offset = 48b, dst = parse_inner_ipv6//split//spilled
match_extractions: []
next state parse_inner_ipv6//split val 0 mask [False]
parent state parse_inner_ipv6//spilled


Partial merge done parse_inner_ipv6//spilled <- parse_inner_ipv6//spilled//spilled
Remaining S2 match_ext = 0, outputs = 3
Try merge parse_inner_ipv6//spilled//spilled <- parse_inner_ipv6//split
s2 output at offset 0 overlaps earlier outputs; can't merge
Try merge parse_inner_ipv6//split <- parse_inner_ipv6//split//spilled
merge output at offset 64
Ran out of 32b extractors
states will not be partially merged since S2 is end of chain
Linear Chain parse_eompls -> parse_inner_ethernet//spilled
Try merge parse_eompls <- parse_inner_ethernet
Multiple paths to state S2 : parse_inner_ethernet <- 5
Try merge parse_inner_ethernet <- parse_inner_ethernet//spilled
merge output at offset 16
Ran out of 32b extractors
states will not be partially merged since S2 is end of chain
Linear Chain parse_tcp -> parse_tcp//spilled
Try merge parse_tcp <- parse_tcp//spilled
merge output at offset 128
Ran out of 32b extractors
states will not be partially merged since S2 is end of chain
Linear Chain parse_ipv4_option_32b -> parse_ipv4_option_32b//spilled
Try merge parse_ipv4_option_32b <- parse_ipv4_option_32b//spilled
cannot partial merge states with active checksums
Linear Chain parse_ipv6 -> parse_ipv6//split
Try merge parse_ipv6 <- parse_ipv6//spilled
merge output at offset 128
Ran out of 32b extractors
merge_offset = 0, complete_merge = False
Before Merge ------
S1: State : parse_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ([15, 32], [185, 16], [267, 32], [104, 8], [106, 8], [36, 32], [38, 32])
match_extractions: []
next state parse_ipv6//spilled val 0 mask [False]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state parse_ethernet


S2: State : parse_ipv6//spilled
shift: 28B
match_reservations: []
outputs[addr, width]: ([40, 32], [42, 32], [44, 32])
branch promise on = nextHdr, offset = 48b, dst = parse_ipv6//split
match_extractions: []
next state parse_ipv6//split val 0 mask [False]
parent state parse_ipv6


Partial merge done parse_ipv6 <- parse_ipv6//spilled
Remaining S2 match_ext = 0, outputs = 3
Try merge parse_ipv6//spilled <- parse_ipv6//split
merge output at offset 0
cannot merge s2 field at 224 - outside shifter
states will not be partially merged since S2 is end of chain
Linear Chain parse_fabric_timestamp_header -> parse_fabric_payload_header
Try merge parse_fabric_timestamp_header <- parse_fabric_payload_header
Multiple paths to state S2 : parse_fabric_payload_header <- 2
Linear Chain parse_fabric_header -> parse_fabric_header_cpu
Try merge parse_fabric_header <- parse_fabric_header_cpu
s2 output at offset 64 overlaps earlier outputs; can't merge
Linear Chain <Phase 0> -> parse_ethernet
Try merge <Phase 0> <- start
Multiple paths to state S2 : start <- 2
Try merge start <- parse_ethernet
merge output at offset 0
merge output at offset 8
merge output at offset 16
merge output at offset 48
merge output at offset 64
merge output at offset 96
Merge s2 constant extraction v=1 phv=15
merge_offset = 112, complete_merge = True
Before Merge ------
S1: State : start
shift: 0B
match_reservations: []
outputs[addr, width]: ([15, 32],)
branch on = None, offset = 96b, dst = start
match_extractions: []
next state parse_ethernet val 0 mask [False]
parent state <Phase 0>
parent state <Ingress intrinsic metadata>


S2: State : parse_ethernet
shift: 14B
match_reservations: []
outputs[addr, width]: ([15, 32], [108, 8], [110, 8], [5, 32], [191, 16], [8, 32], [188, 16])
branch on = etherType, offset = 96b, dst = parse_ethernet
match_extractions: []
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, False, True, True, True, True, True]
next state parse_fabric_header val 36864 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_qinq val 37120 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state start


Full merge done start <- parse_ethernet
Remove state parse_ethernet in 0
Linear Chain <POV initialization> -> <Ingress intrinsic metadata>
Try merge <POV initialization> <- <Ingress intrinsic metadata>
merge output at offset 0
merge output at offset 16
merge output at offset 32
merge_offset = 64, complete_merge = True
Before Merge ------
S1: State : <POV initialization>
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state <Ingress intrinsic metadata> val 0 mask [False]
parent state <Shim start state>


S2: State : <Ingress intrinsic metadata>
shift: 8B
match_reservations: []
outputs[addr, width]: ([141, 16], [130, 16], [1, 32])
branch on = None, offset = 0b, dst = <Ingress intrinsic metadata>
match_extractions: []
next state <Phase 0> val 0 mask [True]
parent state <POV initialization>


Full merge done <POV initialization> <- <Ingress intrinsic metadata>
Remove state <Ingress intrinsic metadata> in 0
assign ids to 62 states, dir = 0
------
State : <Shim start state>
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state <POV initialization>_<Ingress intrinsic metadata> val 0 mask [False]

------
State : parse_llc_header
shift: 3B
match_reservations: []
outputs[addr, width]: ([15, 32], [311, 8], [339, 16])
branch on = dsap, offset = 0b, dst = parse_llc_header
branch on = ssap, offset = 8b, dst = parse_llc_header
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_snap_header val 43690 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 65278 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_snap_header
shift: 5B
match_reservations: []
outputs[addr, width]: ([15, 32], [308, 8], [336, 16], [337, 16])
branch on = type_, offset = 24b, dst = parse_snap_header
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_qinq val 37120 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_llc_header

------
State : parse_vlan
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [200, 16], [187, 16])
branch on = etherType, offset = 16b, dst = parse_vlan
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_mpls__it0
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [36, 32])
branch on = bos, offset = 23b, dst = parse_mpls__it0
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, None, None, None, None, None, None, None]
next state parse_mpls__it1 val 0 mask [True]
next state parse_mpls_bos val 1 mask [True]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_mpls__it1
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [274, 32])
branch on = bos, offset = 23b, dst = parse_mpls__it1
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, None, None, None, None, None, None, None]
next state parse_mpls__it2 val 0 mask [True]
next state parse_mpls_bos val 1 mask [True]
parent state parse_mpls__it0

------
State : parse_mpls__it2
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [275, 32])
branch on = bos, offset = 23b, dst = parse_mpls__it2
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, None, None, None, None, None, None, None]
next state loop_[p4_parse_state.parse_mpls]_oob val 0 mask [True]
next state parse_mpls_bos val 1 mask [True]
parent state parse_mpls__it1

------
State : loop_[p4_parse_state.parse_mpls]_oob
shift: 0B
match_reservations: []
outputs[addr, width]: ([135, 16],)
match_extractions: []
parent state parse_mpls__it2

------
State : parse_mpls_bos
shift: 0B
match_reservations: []
outputs[addr, width]: ()
branch on = None, offset = 0b, dst = parse_mpls_bos
match_extractions: [match_window(hw_id=2, width=8)]
match key = [None, None, None, None, 0, 1, 2, 3]
next state parse_mpls_inner_ipv4 val 4 mask [True, True, True, True]
next state parse_mpls_inner_ipv6 val 6 mask [True, True, True, True]
next state parse_eompls val 0 mask [False]
parent state parse_mpls__it2
parent state parse_mpls__it1
parent state parse_mpls__it0

------
State : parse_mpls_inner_ipv4
shift: 0B
match_reservations: []
outputs[addr, width]: ([68, 8],)
match_extractions: []
next state parse_inner_ipv4 val 0 mask [False]
parent state parse_mpls_bos

------
State : parse_inner_ipv4
shift: 0B
match_reservations: []
outputs[addr, width]: ([15, 32], [184, 16], [292, 8], [293, 8], [326, 16], [327, 16], [328, 16], [260, 32], [261, 32], [294, 8], [295, 8], [39, 32])
match_extractions: []
next state parse_inner_ipv4//spilled val 0 mask [False]
parent state parse_mpls_inner_ipv4
parent state parse_inner_ethernet
parent state parse_geneve
parent state parse_gre_ipv4
parent state parse_erspan_t3
parent state parse_ipv4_in_ip

------
State : parse_inner_icmp
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [272, 32], [201, 16])
match_extractions: []
parent state parse_inner_ipv4
parent state parse_inner_ipv6

------
State : parse_inner_tcp
shift: 0B
match_reservations: []
outputs[addr, width]: ([15, 32], [298, 8], [299, 8], [330, 16], [270, 32], [271, 32], [272, 32], [201, 16], [203, 16], [121, 8])
match_extractions: []
next state parse_inner_tcp//spilled val 0 mask [False]
parent state parse_inner_ipv4
parent state parse_inner_ipv6

------
State : parse_inner_udp
shift: 8B
match_reservations: []
outputs[addr, width]: ([15, 32], [298, 8], [299, 8], [330, 16], [272, 32], [201, 16], [203, 16])
match_extractions: []
parent state parse_inner_ipv4
parent state parse_inner_ipv6

------
State : parse_mpls_inner_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ([68, 8],)
match_extractions: []
next state parse_inner_ipv6 val 0 mask [False]
parent state parse_mpls_bos

------
State : parse_inner_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ([15, 32], [184, 16], [260, 32], [261, 32], [292, 8], [326, 16], [262, 32], [293, 8], [294, 8], [295, 8])
match_extractions: []
next state parse_inner_ipv6//spilled val 0 mask [False]
parent state parse_mpls_inner_ipv6
parent state parse_inner_ethernet
parent state parse_geneve
parent state parse_gre_ipv6
parent state parse_ipv6_in_ip

------
State : parse_eompls
shift: 0B
match_reservations: []
outputs[addr, width]: ([68, 8],)
match_extractions: []
next state parse_inner_ethernet val 0 mask [False]
parent state parse_mpls_bos

------
State : parse_inner_ethernet
shift: 0B
match_reservations: []
outputs[addr, width]: ([15, 32], [296, 8], [268, 32], [329, 16], [297, 8], [269, 32], [186, 16], [190, 16], [6, 32], [109, 8], [111, 8])
match_extractions: []
next state parse_inner_ethernet//spilled val 0 mask [False]
parent state parse_eompls
parent state parse_vxlan
parent state parse_geneve
parent state parse_nvgre
parent state parse_erspan_t3

------
State : parse_ipv4
shift: 0B
match_reservations: []
outputs[addr, width]: ()
branch on = None, offset = 4b, dst = parse_ipv4
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, None, None, None, None]
next state parse_ipv4_no_options val 5 mask [True, True, True, True]
next state parse_ipv4_option_32b val 6 mask [True, True, True, True]
next state parse_ipv4_other val 0 mask [False]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_ipv4_no_options
shift: 20B
match_reservations: []
outputs[addr, width]: ([15, 32], [185, 16], [340, 16], [267, 32], [106, 8], [104, 8], [341, 16], [36, 32], [38, 32])
branch on = fragOffset, offset = 51b, dst = parse_ipv4_no_options
branch on = protocol, offset = 72b, dst = parse_ipv4_no_options
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8)]
match key = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, None, None, None]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_icmp val 1 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_tcp val 6 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_udp val 17 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_gre val 47 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4_in_ip val 4 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6_in_ip val 41 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_igmp val 2 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 88 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 89 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 103 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 112 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_ipv4

------
State : parse_icmp
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [272, 32], [202, 16])
branch on = typeCode, offset = 0b, dst = parse_icmp
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_set_prio_med val 33280 mask [False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True]
next state parse_set_prio_med val 33792 mask [False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True]
next state parse_set_prio_med val 34816 mask [False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_set_prio_med
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
parent state parse_icmp
parent state parse_tcp
parent state parse_udp
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6
parent state parse_arp_rarp_req
parent state parse_arp_rarp_res
parent state parse_llc_header

------
State : parse_tcp
shift: 0B
match_reservations: []
outputs[addr, width]: ([15, 32], [304, 8], [272, 32], [273, 32], [274, 32], [120, 8], [326, 16], [202, 16], [204, 16], [122, 8])
match_extractions: []
next state parse_tcp//spilled val 0 mask [False]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_udp
shift: 8B
match_reservations: []
outputs[addr, width]: ([15, 32], [300, 8], [301, 8], [331, 16], [274, 32], [202, 16], [204, 16])
branch on = dstPort, offset = 16b, dst = parse_udp
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_vxlan val 4789 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_geneve val 6081 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 67 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 68 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 546 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 547 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 520 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 521 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 1985 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_sflow val 6343 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_vxlan
shift: 8B
match_reservations: []
outputs[addr, width]: ([15, 32], [304, 8], [305, 8], [333, 16], [275, 32], [68, 8], [124, 8], [175, 16])
match_extractions: []
next state parse_inner_ethernet val 0 mask [False]
parent state parse_udp

------
State : parse_geneve
shift: 8B
match_reservations: []
outputs[addr, width]: ([15, 32], [304, 8], [305, 8], [333, 16], [275, 32], [124, 8], [175, 16], [68, 8])
branch on = ver, offset = 0b, dst = parse_geneve
branch on = optLen, offset = 2b, dst = parse_geneve
branch on = protoType, offset = 16b, dst = parse_geneve
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
match key = [16, 17, 18, 19, 20, 21, 22, 23]
next state parse_inner_ethernet val 25944 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_udp

------
State : parse_sflow
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
parent state parse_udp

------
State : parse_gre
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [300, 8], [301, 8], [333, 16])
branch on = C, offset = 0b, dst = parse_gre
branch on = R, offset = 1b, dst = parse_gre
branch on = K, offset = 2b, dst = parse_gre
branch on = S, offset = 3b, dst = parse_gre
branch on = s, offset = 4b, dst = parse_gre
branch on = recurse, offset = 5b, dst = parse_gre
branch on = flags, offset = 8b, dst = parse_gre
branch on = ver, offset = 13b, dst = parse_gre
branch on = proto, offset = 16b, dst = parse_gre
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8), match_window(hw_id=3, width=8)]
match key = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
match key = [8, 9, 10, 11, 12, 13, 14, 15]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_nvgre val 536896856 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_gre_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_gre_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_erspan_t3 val 8939 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_nvgre
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [274, 32], [68, 8], [124, 8], [175, 16])
match_extractions: []
next state parse_inner_ethernet val 0 mask [False]
parent state parse_gre

------
State : parse_gre_ipv4
shift: 0B
match_reservations: []
outputs[addr, width]: ([68, 8],)
match_extractions: []
next state parse_inner_ipv4 val 0 mask [False]
parent state parse_gre

------
State : parse_gre_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ([68, 8],)
match_extractions: []
next state parse_inner_ipv6 val 0 mask [False]
parent state parse_gre

------
State : parse_erspan_t3
shift: 12B
match_reservations: []
outputs[addr, width]: ([15, 32], [304, 8], [305, 8], [331, 16], [274, 32], [275, 32])
branch on = ft_d_other, offset = 80b, dst = parse_erspan_t3
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_inner_ethernet val 0 mask [True, False, False, False, False, False, False, False, False, False, True, True, True, True, True, False]
next state parse_inner_ipv4 val 2048 mask [True, False, False, False, False, False, False, False, False, False, True, True, True, True, True, False]
parent state parse_gre

------
State : parse_ipv4_in_ip
shift: 0B
match_reservations: []
outputs[addr, width]: ([68, 8],)
match_extractions: []
next state parse_inner_ipv4 val 0 mask [False]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_ipv6_in_ip
shift: 0B
match_reservations: []
outputs[addr, width]: ([68, 8],)
match_extractions: []
next state parse_inner_ipv6 val 0 mask [False]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_igmp
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [272, 32], [202, 16])
match_extractions: []
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b

------
State : parse_ipv4_option_32b
shift: 0B
match_reservations: []
outputs[addr, width]: ([15, 32], [185, 16], [340, 16], [267, 32], [106, 8], [104, 8], [341, 16], [36, 32], [38, 32])
match_extractions: []
next state parse_ipv4_option_32b//spilled val 0 mask [False]
parent state parse_ipv4

------
State : parse_ipv4_other
shift: 20B
match_reservations: []
outputs[addr, width]: ([15, 32], [185, 16], [340, 16], [267, 32], [106, 8], [104, 8], [341, 16], [36, 32], [38, 32])
match_extractions: []
parent state parse_ipv4

------
State : parse_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ([15, 32], [185, 16], [267, 32], [104, 8], [106, 8], [36, 32], [38, 32])
match_extractions: []
next state parse_ipv6//spilled val 0 mask [False]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_arp_rarp
shift: 0B
match_reservations: []
outputs[addr, width]: ()
branch on = None, offset = 48b, dst = parse_arp_rarp
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_arp_rarp_req val 1 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp_res val 2 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_arp_rarp_req
shift: 0B
match_reservations: []
outputs[addr, width]: ([125, 8],)
match_extractions: []
next state parse_set_prio_med val 0 mask [False]
parent state parse_arp_rarp

------
State : parse_arp_rarp_res
shift: 0B
match_reservations: []
outputs[addr, width]: ([125, 8],)
match_extractions: []
next state parse_set_prio_med val 0 mask [False]
parent state parse_arp_rarp

------
State : parse_set_prio_high
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_qinq
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [200, 16], [187, 16])
branch on = etherType, offset = 16b, dst = parse_qinq
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_qinq_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_qinq_vlan
shift: 4B
match_reservations: []
outputs[addr, width]: ([15, 32], [309, 8], [310, 8], [338, 16])
branch on = etherType, offset = 16b, dst = parse_qinq_vlan
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_qinq

------
State : parse_fabric_header
shift: 5B
match_reservations: []
outputs[addr, width]: ([15, 32], [303, 8], [56, 32])
match_extractions: []
next state parse_fabric_header_cpu val 0 mask [False]
parent state start_parse_ethernet

------
State : parse_fabric_header_cpu
shift: 9B
match_reservations: []
outputs[addr, width]: ([15, 32], [133, 16], [302, 8], [332, 16], [10, 32], [123, 8])
branch on = reasonCode, offset = 56b, dst = parse_fabric_header_cpu
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_fabric_timestamp_header val 8 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_fabric_payload_header val 0 mask [False]
parent state parse_fabric_header

------
State : parse_fabric_timestamp_header
shift: 6B
match_reservations: []
outputs[addr, width]: ([15, 32], [306, 8], [307, 8], [334, 16], [335, 16])
match_extractions: []
next state parse_fabric_payload_header val 0 mask [False]
parent state parse_fabric_header_cpu

------
State : parse_fabric_payload_header
shift: 2B
match_reservations: []
outputs[addr, width]: ([15, 32], [189, 16])
branch on = etherType, offset = 0b, dst = parse_fabric_payload_header
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, False, True, True, True, True, True]
next state parse_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_qinq val 37120 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_fabric_timestamp_header
parent state parse_fabric_header_cpu

------
State : <Phase 0>
shift: 8B
match_reservations: []
outputs[addr, width]: ([168, 16],)
branch on = None, offset = 0b, dst = <Phase 0>
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state start_parse_ethernet val 0 mask [False]
parent state <POV initialization>_<Ingress intrinsic metadata>

------
State : <POV initialization>_<Ingress intrinsic metadata>
shift: 8B
match_reservations: []
outputs[addr, width]: ([141, 16], [130, 16], [1, 32])
branch on = None, offset = 0b, dst = <POV initialization>_<Ingress intrinsic metadata>
match_extractions: [match_window(hw_id=2, width=8)]
match key = [None, None, None, None, None, None, None, 0]
next state <Phase 0> val 0 mask [True]
parent state <Shim start state>

------
State : start_parse_ethernet
shift: 14B
match_reservations: []
outputs[addr, width]: ([15, 32], [108, 8], [110, 8], [5, 32], [191, 16], [8, 32], [188, 16], [15, 32])
branch on = None, offset = 96b, dst = start_parse_ethernet
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, False, True, True, True, True, True]
next state parse_fabric_header val 36864 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_qinq val 37120 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state <Phase 0>
parent state <POV initialization>_<Ingress intrinsic metadata>

------
State : parse_inner_ipv6//split
shift: 0B
match_reservations: [match_window(hw_id=2, width=8)]
outputs[addr, width]: ([327, 16], [328, 16], [265, 32], [266, 32], [47, 32], [7, 32])
match_extractions: []
next state parse_inner_ipv6//split//spilled val 0 mask [False]
parent state parse_inner_ipv6

------
State : parse_ipv6//split
shift: 12B
match_reservations: [match_window(hw_id=2, width=8)]
outputs[addr, width]: ([46, 32], [3, 32], [4, 32])
branch on = nextHdr, offset = 48b, dst = parse_ipv6//split
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_icmp val 58 mask [True, True, True, True, True, True, True, True]
next state parse_tcp val 6 mask [True, True, True, True, True, True, True, True]
next state parse_ipv4_in_ip val 4 mask [True, True, True, True, True, True, True, True]
next state parse_udp val 17 mask [True, True, True, True, True, True, True, True]
next state parse_gre val 47 mask [True, True, True, True, True, True, True, True]
next state parse_ipv6_in_ip val 41 mask [True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 88 mask [True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 89 mask [True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 103 mask [True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 112 mask [True, True, True, True, True, True, True, True]
parent state parse_ipv6

------
State : parse_inner_ipv4//spilled
shift: 20B
match_reservations: []
outputs[addr, width]: ([45, 32], [105, 8], [107, 8])
branch on = fragOffset, offset = 51b, dst = parse_inner_ipv4//spilled
branch on = ihl, offset = 4b, dst = parse_inner_ipv4//spilled
branch on = protocol, offset = 72b, dst = parse_inner_ipv4//spilled
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8), match_window(hw_id=3, width=8)]
match key = [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, None, None, None]
match key = [8, 9, 10, 11, None, None, None, None]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_inner_icmp val 1281 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_tcp val 1286 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_udp val 1297 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_inner_ipv4

------
State : parse_inner_tcp//spilled
shift: 20B
match_reservations: []
outputs[addr, width]: ([273, 32],)
match_extractions: []
parent state parse_inner_tcp

------
State : parse_inner_ipv6//spilled
shift: 0B
match_reservations: []
outputs[addr, width]: ([263, 32], [264, 32], [37, 32], [39, 32], [105, 8], [107, 8])
match_extractions: []
next state parse_inner_ipv6//spilled//spilled val 0 mask [False]
parent state parse_inner_ipv6

------
State : parse_inner_ipv6//spilled//spilled
shift: 28B
match_reservations: []
outputs[addr, width]: ([41, 32], [43, 32], [45, 32])
branch promise on = nextHdr, offset = 48b, dst = parse_inner_ipv6//split//spilled
match_extractions: [match_window(hw_id=2, width=8)]
next state parse_inner_ipv6//split val 0 mask [False]
parent state parse_inner_ipv6//spilled

------
State : parse_inner_ethernet//spilled
shift: 14B
match_reservations: []
outputs[addr, width]: ([11, 32],)
branch on = etherType, offset = 96b, dst = parse_inner_ethernet//spilled
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_inner_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_inner_ethernet

------
State : parse_tcp//spilled
shift: 20B
match_reservations: []
outputs[addr, width]: ([275, 32],)
branch on = dstPort, offset = 16b, dst = parse_tcp//spilled
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_set_prio_med val 179 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 639 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_tcp

------
State : parse_ipv4_option_32b//spilled
shift: 24B
match_reservations: []
outputs[addr, width]: ([15, 32], [276, 32])
branch on = fragOffset, offset = 51b, dst = parse_ipv4_option_32b//spilled
branch on = protocol, offset = 72b, dst = parse_ipv4_option_32b//spilled
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8)]
match key = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, None, None, None]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_icmp val 1 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_tcp val 6 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_udp val 17 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_gre val 47 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4_in_ip val 4 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6_in_ip val 41 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_igmp val 2 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 88 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 89 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 103 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 112 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_ipv4_option_32b

------
State : parse_ipv6//spilled
shift: 28B
match_reservations: []
outputs[addr, width]: ([40, 32], [42, 32], [44, 32])
branch promise on = nextHdr, offset = 48b, dst = parse_ipv6//split
match_extractions: [match_window(hw_id=2, width=8)]
next state parse_ipv6//split val 0 mask [False]
parent state parse_ipv6

------
State : parse_inner_ipv6//split//spilled
shift: 12B
match_reservations: [match_window(hw_id=2, width=8)]
outputs[addr, width]: ([9, 32],)
branch on = nextHdr, offset = 48b, dst = parse_inner_ipv6//split//spilled
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_inner_icmp val 58 mask [True, True, True, True, True, True, True, True]
next state parse_inner_tcp val 6 mask [True, True, True, True, True, True, True, True]
next state parse_inner_udp val 17 mask [True, True, True, True, True, True, True, True]
parent state parse_inner_ipv6//split

split_big_states: state='parse_inner_ipv6' split at offset=30
split_big_states: state='parse_ipv6' split at offset=30
Linear Chain <Ingress mirror #1 ('p4_field_list.i2e_mirror_info')> -> start_i2e_mirrored
Try merge <Ingress mirror #1 ('p4_field_list.i2e_mirror_info')> <- start_i2e_mirrored
merge output at offset 0
merge output at offset 8
merge output at offset 16
merge output at offset 48
merge output at offset 64
merge output at offset 96
Merge s2 constant extraction v=1 phv=60
merge_offset = 112, complete_merge = True
Before Merge ------
S1: State : <Ingress mirror #1 ('p4_field_list.i2e_mirror_info')>
shift: 9B
match_reservations: []
outputs[addr, width]: ([16, 32], [160, 16], [117, 8], [117, 8])
match_extractions: []
next state start_i2e_mirrored val 0 mask [False]


S2: State : start_i2e_mirrored
shift: 14B
match_reservations: []
outputs[addr, width]: ([60, 32], [99, 8], [112, 8], [48, 32], [178, 16], [50, 32], [192, 16])
match_extractions: []
parent state <Ingress mirror #1 ('p4_field_list.i2e_mirror_info')>


Full merge done <Ingress mirror #1 ('p4_field_list.i2e_mirror_info')> <- start_i2e_mirrored
Remove state start_i2e_mirrored in 1
Linear Chain <Egress mirror #0 ('p4_field_list.cpu_info')> -> start_e2e_mirrored
Try merge <Egress mirror #0 ('p4_field_list.cpu_info')> <- start_e2e_mirrored
Multiple paths to state S2 : start_e2e_mirrored <- 2
Linear Chain parse_mpls_inner_ipv4 -> parse_inner_ipv4
Try merge parse_mpls_inner_ipv4 <- parse_inner_ipv4
Multiple paths to state S2 : parse_inner_ipv4 <- 6
Linear Chain parse_mpls_inner_ipv6 -> parse_inner_ipv6//split
Try merge parse_mpls_inner_ipv6 <- parse_inner_ipv6
Multiple paths to state S2 : parse_inner_ipv6 <- 5
Try merge parse_inner_ipv6 <- parse_inner_ipv6//spilled
merge output at offset 128
Ran out of 32b extractors
merge_offset = 0, complete_merge = False
Before Merge ------
S1: State : parse_inner_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ([61, 32], [21, 32], [164, 16], [90, 8], [92, 8], [23, 32], [25, 32], [94, 8], [97, 8])
match_extractions: []
next state parse_inner_ipv6//spilled val 0 mask [False]
parent state parse_mpls_inner_ipv6
parent state parse_inner_ethernet
parent state parse_geneve
parent state parse_gre_ipv6
parent state parse_ipv6_in_ip


S2: State : parse_inner_ipv6//spilled
shift: 30B
match_reservations: []
outputs[addr, width]: ([27, 32], [29, 32], [31, 32])
branch promise on = nextHdr, offset = 48b, dst = parse_inner_ipv6//split
match_extractions: []
next state parse_inner_ipv6//split val 0 mask [False]
parent state parse_inner_ipv6


Partial merge done parse_inner_ipv6 <- parse_inner_ipv6//spilled
Remaining S2 match_ext = 0, outputs = 3
Try merge parse_inner_ipv6//spilled <- parse_inner_ipv6//split
merge output at offset 0
cannot merge s2 field at 240 - outside shifter
states will not be partially merged since S2 is end of chain
Linear Chain parse_eompls -> parse_inner_ethernet
Try merge parse_eompls <- parse_inner_ethernet
Multiple paths to state S2 : parse_inner_ethernet <- 5
Linear Chain parse_ipv4_option_32b -> parse_ipv4_option_32b//spilled
Try merge parse_ipv4_option_32b <- parse_ipv4_option_32b//spilled
merge output at offset 160
Ran out of 32b extractors
states will not be partially merged since S2 is end of chain
Linear Chain parse_ipv6 -> parse_ipv6//split
Try merge parse_ipv6 <- parse_ipv6//spilled
merge output at offset 128
Ran out of 32b extractors
merge_offset = 0, complete_merge = False
Before Merge ------
S1: State : parse_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ([60, 32], [20, 32], [162, 16], [89, 8], [91, 8], [22, 32], [24, 32], [93, 8], [96, 8])
match_extractions: []
next state parse_ipv6//spilled val 0 mask [False]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state parse_ethernet


S2: State : parse_ipv6//spilled
shift: 30B
match_reservations: []
outputs[addr, width]: ([26, 32], [28, 32], [30, 32])
branch promise on = nextHdr, offset = 48b, dst = parse_ipv6//split
match_extractions: []
next state parse_ipv6//split val 0 mask [False]
parent state parse_ipv6


Partial merge done parse_ipv6 <- parse_ipv6//spilled
Remaining S2 match_ext = 0, outputs = 3
Try merge parse_ipv6//spilled <- parse_ipv6//split
merge output at offset 0
cannot merge s2 field at 240 - outside shifter
states will not be partially merged since S2 is end of chain
Linear Chain parse_fabric_timestamp_header -> parse_fabric_payload_header
Try merge parse_fabric_timestamp_header <- parse_fabric_payload_header
Multiple paths to state S2 : parse_fabric_payload_header <- 2
Linear Chain parse_fabric_header -> parse_fabric_header_cpu
Try merge parse_fabric_header <- parse_fabric_header_cpu
merge output at offset 0
merge output at offset 8
merge output at offset 24
merge output at offset 40
merge output at offset 56
Merge s2 constant extraction v=1 phv=61
merge_offset = 72, complete_merge = True
Before Merge ------
S1: State : parse_fabric_header
shift: 5B
match_reservations: []
outputs[addr, width]: ([61, 32], [115, 8], [256, 32])
match_extractions: []
next state parse_fabric_header_cpu val 0 mask [False]
parent state parse_ethernet


S2: State : parse_fabric_header_cpu
shift: 9B
match_reservations: []
outputs[addr, width]: ([61, 32], [288, 8], [152, 16], [147, 16], [145, 16], [149, 16])
branch on = reasonCode, offset = 56b, dst = parse_fabric_header_cpu
match_extractions: []
next state parse_fabric_timestamp_header val 8 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_fabric_payload_header val 0 mask [False]
parent state parse_fabric_header


Full merge done parse_fabric_header <- parse_fabric_header_cpu
Remove state parse_fabric_header_cpu in 1
Linear Chain <POV skip> -> parse_ethernet
Try merge <POV skip> <- <Metadata bridge>
merge output at offset 0
merge output at offset 16
merge output at offset 32
merge output at offset 48
merge output at offset 64
merge output at offset 88
merge output at offset 112
merge output at offset 120
merge output at offset 128
merge output at offset 160
merge_offset = 192, complete_merge = True
Before Merge ------
S1: State : <POV skip>
shift: 1B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state <Metadata bridge> val 0 mask [False]
parent state <Egress intrinsic metadata>


S2: State : <Metadata bridge>
shift: 0B
match_reservations: []
outputs[addr, width]: ([144, 16], [146, 16], [148, 16], [151, 16], [81, 8], [82, 8], [85, 8], [88, 8], [16, 32], [19, 32])
match_extractions: []
next state <Metadata bridge>//spilled val 0 mask [False]
parent state <POV skip>


Full merge done <POV skip> <- <Metadata bridge>
Try merge <POV skip>_<Metadata bridge> <- <Metadata bridge>//spilled
merge output at offset 72
Ran out of 16b extractors
merge_offset = 0, complete_merge = False
Before Merge ------
S1: State : <POV skip>_<Metadata bridge>
shift: 1B
match_reservations: []
outputs[addr, width]: ([144, 16], [146, 16], [148, 16], [151, 16], [81, 8], [82, 8], [85, 8], [88, 8], [16, 32], [19, 32])
match_extractions: []
next state <Metadata bridge>//spilled val 0 mask [False]
parent state <Egress intrinsic metadata>


S2: State : <Metadata bridge>//spilled
shift: 28B
match_reservations: []
outputs[addr, width]: ([155, 16], [150, 16], [159, 16], [160, 16])
match_extractions: []
next state start val 0 mask [False]
parent state <POV skip>_<Metadata bridge>


Partial merge done <POV skip>_<Metadata bridge> <- <Metadata bridge>//spilled
Remaining S2 match_ext = 0, outputs = 4
Try merge <Metadata bridge>//spilled <- start
Switch expression data does not fit in the input buffer: 16 bit branch word at offset 320 overflows 256 bit shift register.
states will not be partially merged since the resulting match would be too complex
Try merge start <- parse_ethernet
merge output at offset 0
merge output at offset 8
merge output at offset 16
merge output at offset 48
merge output at offset 64
merge output at offset 96
Merge s2 constant extraction v=1 phv=60
merge_offset = 112, complete_merge = True
Before Merge ------
S1: State : start
shift: 0B
match_reservations: []
outputs[addr, width]: ()
branch on = None, offset = 96b, dst = start
match_extractions: []
next state parse_ethernet val 0 mask [False]
parent state <Metadata bridge>


S2: State : parse_ethernet
shift: 14B
match_reservations: []
outputs[addr, width]: ([60, 32], [99, 8], [112, 8], [48, 32], [178, 16], [50, 32], [192, 16])
branch on = etherType, offset = 96b, dst = parse_ethernet
match_extractions: []
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, False, True, True, True, True, True]
next state parse_fabric_header_parse_fabric_header_cpu val 36864 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_qinq val 37120 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state start


Full merge done start <- parse_ethernet
Remove state <Metadata bridge> in 1
Remove state parse_ethernet in 1
Linear Chain <POV initialization> -> <Egress intrinsic metadata>
Try merge <POV initialization> <- <Egress intrinsic metadata>
merge output at offset 0
merge output at offset 16
merge output at offset 24
merge output at offset 40
merge output at offset 48
merge_offset = 64, complete_merge = True
Before Merge ------
S1: State : <POV initialization>
shift: 0B
match_reservations: []
outputs[addr, width]: ([60, 32],)
match_extractions: []
next state <Egress intrinsic metadata> val 0 mask [False]
parent state <Shim start state>


S2: State : <Egress intrinsic metadata>
shift: 8B
match_reservations: []
outputs[addr, width]: ([167, 16], [95, 8], [169, 16], [98, 8], [172, 16])
branch on = None, offset = 64b, dst = <Egress intrinsic metadata>
match_extractions: []
next state <Ingress mirror #1 ('p4_field_list.i2e_mirror_info')>_start_i2e_mirrored val 9 mask [True, True, True, True, True, True, False, False]
next state <Egress mirror #0 ('p4_field_list.cpu_info')> val 24 mask [True, True, True, True, True, True, False, False]
next state <Egress mirror #1 ('p4_field_list.e2e_mirror_info')> val 25 mask [True, True, True, True, True, True, False, False]
next state <POV skip>_<Metadata bridge> val 0 mask [False]
parent state <POV initialization>


Full merge done <POV initialization> <- <Egress intrinsic metadata>
Remove state <Egress intrinsic metadata> in 1
assign ids to 60 states, dir = 1
------
State : <Shim start state>
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state <POV initialization>_<Egress intrinsic metadata> val 0 mask [False]

------
State : parse_llc_header
shift: 3B
match_reservations: []
outputs[addr, width]: ([60, 32], [290, 8], [324, 16])
branch on = dsap, offset = 0b, dst = parse_llc_header
branch on = ssap, offset = 8b, dst = parse_llc_header
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_snap_header val 43690 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 65278 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_snap_header
shift: 5B
match_reservations: []
outputs[addr, width]: ([60, 32], [289, 8], [320, 16], [321, 16])
branch on = type_, offset = 24b, dst = parse_snap_header
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_qinq val 37120 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_llc_header

------
State : parse_vlan
shift: 4B
match_reservations: []
outputs[addr, width]: ([60, 32], [180, 16], [194, 16])
branch on = etherType, offset = 16b, dst = parse_vlan
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_mpls__it0
shift: 4B
match_reservations: []
outputs[addr, width]: ([60, 32], [114, 8], [208, 16], [89, 8])
branch on = bos, offset = 23b, dst = parse_mpls__it0
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, None, None, None, None, None, None, None]
next state parse_mpls__it1 val 0 mask [True]
next state parse_mpls_bos val 1 mask [True]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_mpls__it1
shift: 4B
match_reservations: []
outputs[addr, width]: ([60, 32], [116, 8], [209, 16], [91, 8])
branch on = bos, offset = 23b, dst = parse_mpls__it1
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, None, None, None, None, None, None, None]
next state parse_mpls__it2 val 0 mask [True]
next state parse_mpls_bos val 1 mask [True]
parent state parse_mpls__it0

------
State : parse_mpls__it2
shift: 4B
match_reservations: []
outputs[addr, width]: ([60, 32], [118, 8], [210, 16], [83, 8])
branch on = bos, offset = 23b, dst = parse_mpls__it2
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, None, None, None, None, None, None, None]
next state loop_[p4_parse_state.parse_mpls]_oob val 0 mask [True]
next state parse_mpls_bos val 1 mask [True]
parent state parse_mpls__it1

------
State : loop_[p4_parse_state.parse_mpls]_oob
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
parent state parse_mpls__it2

------
State : parse_mpls_bos
shift: 0B
match_reservations: []
outputs[addr, width]: ()
branch on = None, offset = 0b, dst = parse_mpls_bos
match_extractions: [match_window(hw_id=2, width=8)]
match key = [None, None, None, None, 0, 1, 2, 3]
next state parse_mpls_inner_ipv4 val 4 mask [True, True, True, True]
next state parse_mpls_inner_ipv6 val 6 mask [True, True, True, True]
next state parse_eompls val 0 mask [False]
parent state parse_mpls__it2
parent state parse_mpls__it1
parent state parse_mpls__it0

------
State : parse_mpls_inner_ipv4
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state parse_inner_ipv4 val 0 mask [False]
parent state parse_mpls_bos

------
State : parse_inner_ipv4
shift: 20B
match_reservations: []
outputs[addr, width]: ([61, 32], [92, 8], [94, 8], [164, 16], [21, 32], [97, 8], [90, 8], [166, 16], [23, 32], [33, 32])
branch on = fragOffset, offset = 51b, dst = parse_inner_ipv4
branch on = ihl, offset = 4b, dst = parse_inner_ipv4
branch on = protocol, offset = 72b, dst = parse_inner_ipv4
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8), match_window(hw_id=3, width=8)]
match key = [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, None, None, None]
match key = [8, 9, 10, 11, None, None, None, None]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_inner_icmp val 1281 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_tcp val 1286 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_udp val 1297 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_mpls_inner_ipv4
parent state parse_inner_ethernet
parent state parse_geneve
parent state parse_gre_ipv4
parent state parse_erspan_t3
parent state parse_ipv4_in_ip

------
State : parse_inner_icmp
shift: 4B
match_reservations: []
outputs[addr, width]: ([211, 16], [52, 32])
match_extractions: []
parent state parse_inner_ipv4
parent state parse_inner_ipv6

------
State : parse_inner_tcp
shift: 20B
match_reservations: []
outputs[addr, width]: ([211, 16], [84, 8], [87, 8], [177, 16], [181, 16], [198, 16], [52, 32], [53, 32], [54, 32])
match_extractions: []
parent state parse_inner_ipv4
parent state parse_inner_ipv6

------
State : parse_inner_udp
shift: 8B
match_reservations: []
outputs[addr, width]: ([211, 16], [84, 8], [87, 8], [171, 16], [163, 16], [177, 16])
match_extractions: []
parent state parse_inner_ipv4
parent state parse_inner_ipv6

------
State : parse_mpls_inner_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state parse_inner_ipv6 val 0 mask [False]
parent state parse_mpls_bos

------
State : parse_inner_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ([61, 32], [21, 32], [164, 16], [90, 8], [92, 8], [23, 32], [25, 32], [94, 8], [97, 8])
match_extractions: []
next state parse_inner_ipv6//spilled val 0 mask [False]
parent state parse_mpls_inner_ipv6
parent state parse_inner_ethernet
parent state parse_geneve
parent state parse_gre_ipv6
parent state parse_ipv6_in_ip

------
State : parse_eompls
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state parse_inner_ethernet val 0 mask [False]
parent state parse_mpls_bos

------
State : parse_inner_ethernet
shift: 14B
match_reservations: []
outputs[addr, width]: ([61, 32], [100, 8], [113, 8], [49, 32], [179, 16], [51, 32], [195, 16])
branch on = etherType, offset = 96b, dst = parse_inner_ethernet
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_inner_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_eompls
parent state parse_vxlan
parent state parse_geneve
parent state parse_nvgre
parent state parse_erspan_t3

------
State : parse_ipv4
shift: 0B
match_reservations: []
outputs[addr, width]: ()
branch on = None, offset = 4b, dst = parse_ipv4
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, None, None, None, None]
next state parse_ipv4_no_options val 5 mask [True, True, True, True]
next state parse_ipv4_option_32b val 6 mask [True, True, True, True]
next state parse_ipv4_other val 0 mask [False]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_ipv4_no_options
shift: 20B
match_reservations: []
outputs[addr, width]: ([60, 32], [91, 8], [93, 8], [162, 16], [20, 32], [96, 8], [89, 8], [165, 16], [22, 32], [32, 32])
branch on = fragOffset, offset = 51b, dst = parse_ipv4_no_options
branch on = protocol, offset = 72b, dst = parse_ipv4_no_options
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8)]
match key = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, None, None, None]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_icmp val 1 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_tcp val 6 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_udp val 17 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_gre val 47 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4_in_ip val 4 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6_in_ip val 41 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_igmp val 2 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 88 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 89 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 103 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 112 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_ipv4

------
State : parse_icmp
shift: 4B
match_reservations: []
outputs[addr, width]: ([211, 16], [49, 32])
branch on = typeCode, offset = 0b, dst = parse_icmp
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_set_prio_med val 33280 mask [False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True]
next state parse_set_prio_med val 33792 mask [False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True]
next state parse_set_prio_med val 34816 mask [False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_set_prio_med
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
parent state parse_icmp
parent state parse_tcp
parent state parse_udp
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6
parent state parse_arp_rarp_req
parent state parse_arp_rarp_res
parent state parse_llc_header

------
State : parse_tcp
shift: 20B
match_reservations: []
outputs[addr, width]: ([211, 16], [90, 8], [92, 8], [176, 16], [179, 16], [195, 16], [49, 32], [51, 32], [52, 32])
branch on = dstPort, offset = 16b, dst = parse_tcp
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_set_prio_med val 179 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 639 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_udp
shift: 8B
match_reservations: []
outputs[addr, width]: ([211, 16], [83, 8], [86, 8], [170, 16], [161, 16], [176, 16])
branch on = dstPort, offset = 16b, dst = parse_udp
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_vxlan val 4789 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_geneve val 6081 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 67 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 68 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 546 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 547 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 520 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 521 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 1985 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_sflow val 6343 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_vxlan
shift: 8B
match_reservations: []
outputs[addr, width]: ([61, 32], [18, 32], [101, 8], [196, 16], [114, 8])
match_extractions: []
next state parse_inner_ethernet val 0 mask [False]
parent state parse_udp

------
State : parse_geneve
shift: 8B
match_reservations: []
outputs[addr, width]: ([61, 32], [18, 32], [101, 8], [196, 16], [114, 8])
branch on = ver, offset = 0b, dst = parse_geneve
branch on = optLen, offset = 2b, dst = parse_geneve
branch on = protoType, offset = 16b, dst = parse_geneve
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
match key = [16, 17, 18, 19, 20, 21, 22, 23]
next state parse_inner_ethernet val 25944 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_inner_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_udp

------
State : parse_sflow
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
parent state parse_udp

------
State : parse_gre
shift: 4B
match_reservations: []
outputs[addr, width]: ([60, 32], [86, 8], [114, 8], [196, 16])
branch on = C, offset = 0b, dst = parse_gre
branch on = R, offset = 1b, dst = parse_gre
branch on = K, offset = 2b, dst = parse_gre
branch on = S, offset = 3b, dst = parse_gre
branch on = s, offset = 4b, dst = parse_gre
branch on = recurse, offset = 5b, dst = parse_gre
branch on = flags, offset = 8b, dst = parse_gre
branch on = ver, offset = 13b, dst = parse_gre
branch on = proto, offset = 16b, dst = parse_gre
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8), match_window(hw_id=3, width=8)]
match key = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
match key = [8, 9, 10, 11, 12, 13, 14, 15]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_nvgre val 536896856 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_gre_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_gre_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_erspan_t3 val 8939 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_nvgre
shift: 4B
match_reservations: []
outputs[addr, width]: ([60, 32], [101, 8], [197, 16], [83, 8])
match_extractions: []
next state parse_inner_ethernet val 0 mask [False]
parent state parse_gre

------
State : parse_gre_ipv4
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state parse_inner_ipv4 val 0 mask [False]
parent state parse_gre

------
State : parse_gre_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state parse_inner_ipv6 val 0 mask [False]
parent state parse_gre

------
State : parse_erspan_t3
shift: 12B
match_reservations: []
outputs[addr, width]: ([60, 32], [83, 8], [101, 8], [170, 16], [18, 32], [176, 16], [161, 16])
branch on = ft_d_other, offset = 80b, dst = parse_erspan_t3
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_inner_ethernet val 0 mask [True, False, False, False, False, False, False, False, False, False, True, True, True, True, True, False]
next state parse_inner_ipv4 val 2048 mask [True, False, False, False, False, False, False, False, False, False, True, True, True, True, True, False]
parent state parse_gre

------
State : parse_ipv4_in_ip
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state parse_inner_ipv4 val 0 mask [False]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_ipv6_in_ip
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state parse_inner_ipv6 val 0 mask [False]
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b
parent state parse_ipv6

------
State : parse_igmp
shift: 4B
match_reservations: []
outputs[addr, width]: ([60, 32], [24, 32])
match_extractions: []
parent state parse_ipv4_no_options
parent state parse_ipv4_option_32b

------
State : parse_ipv4_option_32b
shift: 0B
match_reservations: []
outputs[addr, width]: ([60, 32], [91, 8], [93, 8], [162, 16], [20, 32], [96, 8], [89, 8], [165, 16], [22, 32], [32, 32])
match_extractions: []
next state parse_ipv4_option_32b//spilled val 0 mask [False]
parent state parse_ipv4

------
State : parse_ipv4_other
shift: 20B
match_reservations: []
outputs[addr, width]: ([60, 32], [91, 8], [93, 8], [162, 16], [20, 32], [96, 8], [89, 8], [165, 16], [22, 32], [32, 32])
match_extractions: []
parent state parse_ipv4

------
State : parse_ipv6
shift: 0B
match_reservations: []
outputs[addr, width]: ([60, 32], [20, 32], [162, 16], [89, 8], [91, 8], [22, 32], [24, 32], [93, 8], [96, 8])
match_extractions: []
next state parse_ipv6//spilled val 0 mask [False]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_arp_rarp
shift: 0B
match_reservations: []
outputs[addr, width]: ()
branch on = None, offset = 48b, dst = parse_arp_rarp
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_arp_rarp_req val 1 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp_res val 2 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_arp_rarp_req
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state parse_set_prio_med val 0 mask [False]
parent state parse_arp_rarp

------
State : parse_arp_rarp_res
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
next state parse_set_prio_med val 0 mask [False]
parent state parse_arp_rarp

------
State : parse_set_prio_high
shift: 0B
match_reservations: []
outputs[addr, width]: ()
match_extractions: []
parent state parse_vlan
parent state parse_qinq_vlan
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_qinq
shift: 4B
match_reservations: []
outputs[addr, width]: ([60, 32], [180, 16], [194, 16])
branch on = etherType, offset = 16b, dst = parse_qinq
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_qinq_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_snap_header
parent state parse_fabric_payload_header
parent state start_parse_ethernet

------
State : parse_qinq_vlan
shift: 4B
match_reservations: []
outputs[addr, width]: ([61, 32], [322, 16], [323, 16])
branch on = etherType, offset = 16b, dst = parse_qinq_vlan
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_qinq

------
State : parse_fabric_header_parse_fabric_header_cpu
shift: 14B
match_reservations: []
outputs[addr, width]: ([61, 32], [115, 8], [256, 32], [288, 8], [152, 16], [147, 16], [145, 16], [149, 16], [61, 32])
branch on = reasonCode, offset = 96b, dst = parse_fabric_header_parse_fabric_header_cpu
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_fabric_timestamp_header val 8 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_fabric_payload_header val 0 mask [False]
parent state start_parse_ethernet

------
State : parse_fabric_timestamp_header
shift: 6B
match_reservations: []
outputs[addr, width]: ([61, 32], [153, 16], [17, 32])
match_extractions: []
next state parse_fabric_payload_header val 0 mask [False]
parent state parse_fabric_header_parse_fabric_header_cpu

------
State : parse_fabric_payload_header
shift: 2B
match_reservations: []
outputs[addr, width]: ([61, 32], [193, 16])
branch on = etherType, offset = 0b, dst = parse_fabric_payload_header
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, False, True, True, True, True, True]
next state parse_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_qinq val 37120 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_fabric_timestamp_header
parent state parse_fabric_header_parse_fabric_header_cpu

------
State : start_e2e_mirrored
shift: 14B
match_reservations: []
outputs[addr, width]: ([60, 32], [99, 8], [112, 8], [48, 32], [178, 16], [50, 32], [192, 16])
match_extractions: []
parent state <Egress mirror #0 ('p4_field_list.cpu_info')>
parent state <Egress mirror #1 ('p4_field_list.e2e_mirror_info')>

------
State : <POV skip>_<Metadata bridge>
shift: 1B
match_reservations: []
outputs[addr, width]: ([144, 16], [146, 16], [148, 16], [151, 16], [81, 8], [82, 8], [85, 8], [88, 8], [16, 32], [19, 32])
match_extractions: []
next state <Metadata bridge>//spilled val 0 mask [False]
parent state <POV initialization>_<Egress intrinsic metadata>

------
State : <Ingress mirror #1 ('p4_field_list.i2e_mirror_info')>_start_i2e_mirrored
shift: 23B
match_reservations: []
outputs[addr, width]: ([16, 32], [160, 16], [117, 8], [117, 8], [99, 8], [112, 8], [48, 32], [178, 16], [50, 32], [192, 16], [60, 32])
match_extractions: []
parent state <POV initialization>_<Egress intrinsic metadata>

------
State : <Egress mirror #0 ('p4_field_list.cpu_info')>
shift: 9B
match_reservations: []
outputs[addr, width]: ([144, 16], [146, 16], [148, 16], [150, 16], [117, 8])
match_extractions: []
next state start_e2e_mirrored val 0 mask [False]
parent state <POV initialization>_<Egress intrinsic metadata>

------
State : <Egress mirror #1 ('p4_field_list.e2e_mirror_info')>
shift: 7B
match_reservations: []
outputs[addr, width]: ([160, 16], [16, 32], [117, 8], [117, 8])
match_extractions: []
next state start_e2e_mirrored val 0 mask [False]
parent state <POV initialization>_<Egress intrinsic metadata>

------
State : <POV initialization>_<Egress intrinsic metadata>
shift: 8B
match_reservations: []
outputs[addr, width]: ([60, 32], [167, 16], [95, 8], [169, 16], [98, 8], [172, 16])
branch on = None, offset = 64b, dst = <POV initialization>_<Egress intrinsic metadata>
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state <Ingress mirror #1 ('p4_field_list.i2e_mirror_info')>_start_i2e_mirrored val 9 mask [True, True, True, True, True, True, False, False]
next state <Egress mirror #0 ('p4_field_list.cpu_info')> val 24 mask [True, True, True, True, True, True, False, False]
next state <Egress mirror #1 ('p4_field_list.e2e_mirror_info')> val 25 mask [True, True, True, True, True, True, False, False]
next state <POV skip>_<Metadata bridge> val 0 mask [False]
parent state <Shim start state>

------
State : start_parse_ethernet
shift: 14B
match_reservations: []
outputs[addr, width]: ([99, 8], [112, 8], [48, 32], [178, 16], [50, 32], [192, 16], [60, 32])
branch on = None, offset = 96b, dst = start_parse_ethernet
match_extractions: [match_window(hw_id=0, width=16)]
match key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True]
next state parse_llc_header val 0 mask [False, False, False, False, False, False, False, False, False, True, False, True, True, True, True, True]
next state parse_fabric_header_parse_fabric_header_cpu val 36864 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_vlan val 33024 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_qinq val 37120 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_mpls__it0 val 34887 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4 val 2048 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6 val 34525 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_arp_rarp val 2054 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 35020 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_high val 34825 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state <POV skip>_<Metadata bridge>

------
State : parse_inner_ipv6//split
shift: 10B
match_reservations: [match_window(hw_id=2, width=8)]
outputs[addr, width]: ([166, 16], [33, 32], [35, 32])
branch on = nextHdr, offset = 48b, dst = parse_inner_ipv6//split
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_inner_icmp val 58 mask [True, True, True, True, True, True, True, True]
next state parse_inner_tcp val 6 mask [True, True, True, True, True, True, True, True]
next state parse_inner_udp val 17 mask [True, True, True, True, True, True, True, True]
parent state parse_inner_ipv6

------
State : parse_ipv6//split
shift: 10B
match_reservations: [match_window(hw_id=2, width=8)]
outputs[addr, width]: ([165, 16], [32, 32], [34, 32])
branch on = nextHdr, offset = 48b, dst = parse_ipv6//split
match_extractions: [match_window(hw_id=2, width=8)]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_icmp val 58 mask [True, True, True, True, True, True, True, True]
next state parse_tcp val 6 mask [True, True, True, True, True, True, True, True]
next state parse_ipv4_in_ip val 4 mask [True, True, True, True, True, True, True, True]
next state parse_udp val 17 mask [True, True, True, True, True, True, True, True]
next state parse_gre val 47 mask [True, True, True, True, True, True, True, True]
next state parse_ipv6_in_ip val 41 mask [True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 88 mask [True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 89 mask [True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 103 mask [True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 112 mask [True, True, True, True, True, True, True, True]
parent state parse_ipv6

------
State : parse_inner_ipv6//spilled
shift: 30B
match_reservations: []
outputs[addr, width]: ([27, 32], [29, 32], [31, 32])
branch promise on = nextHdr, offset = 48b, dst = parse_inner_ipv6//split
match_extractions: [match_window(hw_id=2, width=8)]
next state parse_inner_ipv6//split val 0 mask [False]
parent state parse_inner_ipv6

------
State : parse_ipv4_option_32b//spilled
shift: 24B
match_reservations: []
outputs[addr, width]: ([60, 32], [257, 32])
branch on = fragOffset, offset = 51b, dst = parse_ipv4_option_32b//spilled
branch on = protocol, offset = 72b, dst = parse_ipv4_option_32b//spilled
match_extractions: [match_window(hw_id=0, width=16), match_window(hw_id=2, width=8)]
match key = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, None, None, None]
match key = [0, 1, 2, 3, 4, 5, 6, 7]
next state parse_icmp val 1 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_tcp val 6 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_udp val 17 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_gre val 47 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv4_in_ip val 4 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_ipv6_in_ip val 41 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_igmp val 2 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 88 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 89 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 103 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
next state parse_set_prio_med val 112 mask [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
parent state parse_ipv4_option_32b

------
State : parse_ipv6//spilled
shift: 30B
match_reservations: []
outputs[addr, width]: ([26, 32], [28, 32], [30, 32])
branch promise on = nextHdr, offset = 48b, dst = parse_ipv6//split
match_extractions: [match_window(hw_id=2, width=8)]
next state parse_ipv6//split val 0 mask [False]
parent state parse_ipv6

------
State : <Metadata bridge>//spilled
shift: 28B
match_reservations: []
outputs[addr, width]: ([155, 16], [150, 16], [159, 16], [160, 16])
match_extractions: []
next state start_parse_ethernet val 0 mask [False]
parent state <POV skip>_<Metadata bridge>

Added a dummy extraction to container 135 in state parse_inner_ipv4_140070784712080
Added a dummy extraction to container 135 in state parse_ipv4_no_options_140071112762320
Added a dummy extraction to container 135 in state parse_ipv4_other_140071112652304
Added a dummy extraction to container 135 in state parse_ipv4_option_32b_140070795486352
